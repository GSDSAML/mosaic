(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[149],{5382:function(e,t,s){var i,n,o,r,a,l,u,c,h,d,p,f,m,g,v,y,A,x,S,T,b,w,C,N;i=s(7424),n=s(6690),o=s(9728),r=function(e,t,s){return{endTime:t,insertTime:s,type:"exponentialRampToValue",value:e}},a=function(e,t,s){return{endTime:t,insertTime:s,type:"linearRampToValue",value:e}},l=function(e,t){return{startTime:t,type:"setValue",value:e}},u=function(e,t,s){return{duration:s,startTime:t,type:"setValueCurve",values:e}},c=function(e,t,s){var i=s.startTime,n=s.target;return n+(t-n)*Math.exp((i-e)/s.timeConstant)},h=function(e){return"exponentialRampToValue"===e.type},d=function(e){return"linearRampToValue"===e.type},p=function(e){return h(e)||d(e)},f=function(e){return"setValue"===e.type},m=function(e){return"setValueCurve"===e.type},g=function(e,t,s,i){var n=e[t];return void 0===n?i:p(n)||f(n)?n.value:m(n)?n.values[n.values.length-1]:c(s,g(e,t-1,n.startTime,i),n)},v=function(e,t,s,i,n){return void 0===s?[i.insertTime,n]:p(s)?[s.endTime,s.value]:f(s)?[s.startTime,s.value]:m(s)?[s.startTime+s.duration,s.values[s.values.length-1]]:[s.startTime,g(e,t-1,s.startTime,n)]},y=function(e){return"cancelAndHold"===e.type},A=function(e){return"cancelScheduledValues"===e.type},x=function(e){return y(e)||A(e)?e.cancelTime:h(e)||d(e)?e.endTime:e.startTime},S=function(e,t,s,i){var n=i.endTime,o=i.value;return s===o?o:0<s&&0<o||s<0&&o<0?s*Math.pow(o/s,(e-t)/(n-t)):0},T=function(e,t,s,i){return s+(e-t)/(i.endTime-t)*(i.value-s)},b=function(e,t){var s=Math.floor(t),i=Math.ceil(t);return s===i?e[s]:(1-(t-s))*e[s]+(1-(i-t))*e[i]},w=function(e,t){var s=t.duration,i=t.startTime,n=t.values,o=(e-i)/s*(n.length-1);return b(n,o)},C=function(e){return"setTarget"===e.type},N=o(function AutomationEventList(e){n(this,AutomationEventList),this._automationEvents=[],this._currenTime=0,this._defaultValue=e},[{key:Symbol.iterator,value:function(){return this._automationEvents[Symbol.iterator]()}},{key:"add",value:function(e){var t=x(e);if(y(e)||A(e)){var s=this._automationEvents.findIndex(function(s){return A(e)&&m(s)?s.startTime+s.duration>=t:x(s)>=t}),i=this._automationEvents[s];if(-1!==s&&(this._automationEvents=this._automationEvents.slice(0,s)),y(e)){var n=this._automationEvents[this._automationEvents.length-1];if(void 0!==i&&p(i)){if(void 0!==n&&C(n))throw Error("The internal list is malformed.");var o=void 0===n?i.insertTime:m(n)?n.startTime+n.duration:x(n),c=void 0===n?this._defaultValue:m(n)?n.values[n.values.length-1]:n.value,f=h(i)?S(t,o,c,i):T(t,o,c,i),g=h(i)?r(f,t,this._currenTime):a(f,t,this._currenTime);this._automationEvents.push(g)}if(void 0!==n&&C(n)&&this._automationEvents.push(l(this.getValue(t),t)),void 0!==n&&m(n)&&n.startTime+n.duration>t){var v=t-n.startTime,b=(n.values.length-1)/n.duration,w=Math.max(2,1+Math.ceil(v*b)),N=v/(w-1)*b,O=n.values.slice(0,w);if(N<1)for(var k=1;k<w;k+=1){var M=N*k%1;O[k]=n.values[k-1]*(1-M)+n.values[k]*M}this._automationEvents[this._automationEvents.length-1]=u(O,n.startTime,v)}}}else{var D=this._automationEvents.findIndex(function(e){return x(e)>t}),F=-1===D?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[D-1];if(void 0!==F&&m(F)&&x(F)+F.duration>t)return!1;var E=h(e)?r(e.value,e.endTime,this._currenTime):d(e)?a(e.value,t,this._currenTime):e;if(-1===D)this._automationEvents.push(E);else{if(m(e)&&t+e.duration>x(this._automationEvents[D]))return!1;this._automationEvents.splice(D,0,E)}}return!0}},{key:"flush",value:function(e){var t=this._automationEvents.findIndex(function(t){return x(t)>e});if(t>1){var s=this._automationEvents.slice(t-1),i=s[0];C(i)&&s.unshift(l(g(this._automationEvents,t-2,i.startTime,this._defaultValue),i.startTime)),this._automationEvents=s}}},{key:"getValue",value:function(e){if(0===this._automationEvents.length)return this._defaultValue;var t=this._automationEvents.findIndex(function(t){return x(t)>e}),s=this._automationEvents[t],n=(-1===t?this._automationEvents.length:t)-1,o=this._automationEvents[n];if(void 0!==o&&C(o)&&(void 0===s||!p(s)||s.insertTime>e))return c(e,g(this._automationEvents,n-1,o.startTime,this._defaultValue),o);if(void 0!==o&&f(o)&&(void 0===s||!p(s)))return o.value;if(void 0!==o&&m(o)&&(void 0===s||!p(s)||o.startTime+o.duration>e))return e<o.startTime+o.duration?w(e,o):o.values[o.values.length-1];if(void 0!==o&&p(o)&&(void 0===s||!p(s)))return o.value;if(void 0!==s&&h(s)){var r=i(v(this._automationEvents,n,o,s,this._defaultValue),2);return S(e,r[0],r[1],s)}if(void 0!==s&&d(s)){var a=i(v(this._automationEvents,n,o,s,this._defaultValue),2);return T(e,a[0],a[1],s)}return this._defaultValue}}]),t.AutomationEventList=N,t.createCancelAndHoldAutomationEvent=function(e){return{cancelTime:e,type:"cancelAndHold"}},t.createCancelScheduledValuesAutomationEvent=function(e){return{cancelTime:e,type:"cancelScheduledValues"}},t.createExponentialRampToValueAutomationEvent=function(e,t){return{endTime:t,type:"exponentialRampToValue",value:e}},t.createLinearRampToValueAutomationEvent=function(e,t){return{endTime:t,type:"linearRampToValue",value:e}},t.createSetTargetAutomationEvent=function(e,t,s){return{startTime:t,target:e,timeConstant:s,type:"setTarget"}},t.createSetValueAutomationEvent=l,t.createSetValueCurveAutomationEvent=u},2149:function(e,t,s){"use strict";let i,n;s.r(t),s.d(t,{AMOscillator:function(){return AMOscillator},AMSynth:function(){return AMSynth},Abs:function(){return Abs},Add:function(){return Add},AmplitudeEnvelope:function(){return AmplitudeEnvelope},Analyser:function(){return Analyser},AudioToGain:function(){return AudioToGain},AutoFilter:function(){return AutoFilter},AutoPanner:function(){return AutoPanner},AutoWah:function(){return AutoWah},BaseContext:function(){return BaseContext},BiquadFilter:function(){return BiquadFilter},BitCrusher:function(){return BitCrusher},Buffer:function(){return sK},BufferSource:function(){return s1},Buffers:function(){return s0},Channel:function(){return Channel},Chebyshev:function(){return Chebyshev},Chorus:function(){return Chorus},Clock:function(){return Clock},Compressor:function(){return Compressor},Context:function(){return Context},Convolver:function(){return Convolver},CrossFade:function(){return CrossFade},DCMeter:function(){return DCMeter},Delay:function(){return Delay},Destination:function(){return sX},Distortion:function(){return Distortion},Draw:function(){return sH},DuoSynth:function(){return DuoSynth},EQ3:function(){return EQ3},Emitter:function(){return Emitter},Envelope:function(){return Envelope},FFT:function(){return FFT},FMOscillator:function(){return FMOscillator},FMSynth:function(){return FMSynth},FatOscillator:function(){return FatOscillator},FeedbackCombFilter:function(){return FeedbackCombFilter},FeedbackDelay:function(){return FeedbackDelay},Filter:function(){return Filter},Follower:function(){return Follower},Freeverb:function(){return Freeverb},Frequency:function(){return Frequency},FrequencyClass:function(){return FrequencyClass},FrequencyEnvelope:function(){return FrequencyEnvelope},FrequencyShifter:function(){return FrequencyShifter},Gain:function(){return Gain},GainToAudio:function(){return GainToAudio},Gate:function(){return Gate},GrainPlayer:function(){return GrainPlayer},GreaterThan:function(){return GreaterThan},GreaterThanZero:function(){return GreaterThanZero},IntervalTimeline:function(){return IntervalTimeline},JCReverb:function(){return JCReverb},LFO:function(){return LFO},Limiter:function(){return Limiter},Listener:function(){return s$},Loop:function(){return Loop},LowpassCombFilter:function(){return LowpassCombFilter},Master:function(){return sY},MembraneSynth:function(){return MembraneSynth},Merge:function(){return Merge},MetalSynth:function(){return MetalSynth},Meter:function(){return Meter},MidSideCompressor:function(){return MidSideCompressor},MidSideMerge:function(){return MidSideMerge},MidSideSplit:function(){return MidSideSplit},Midi:function(){return Midi},MidiClass:function(){return MidiClass},Mono:function(){return Mono},MonoSynth:function(){return MonoSynth},MultibandCompressor:function(){return MultibandCompressor},MultibandSplit:function(){return MultibandSplit},Multiply:function(){return Multiply},Negate:function(){return Negate},Noise:function(){return Noise},NoiseSynth:function(){return NoiseSynth},Offline:function(){return Offline},OfflineContext:function(){return OfflineContext},OmniOscillator:function(){return OmniOscillator},OnePoleFilter:function(){return OnePoleFilter},Oscillator:function(){return Oscillator},PWMOscillator:function(){return PWMOscillator},PanVol:function(){return PanVol},Panner:function(){return Panner},Panner3D:function(){return Panner3D},Param:function(){return Param},Part:function(){return Part},Pattern:function(){return Pattern},Phaser:function(){return Phaser},PingPongDelay:function(){return PingPongDelay},PitchShift:function(){return PitchShift},Player:function(){return Player},Players:function(){return Players},PluckSynth:function(){return PluckSynth},PolySynth:function(){return PolySynth},Pow:function(){return Pow},PulseOscillator:function(){return PulseOscillator},Recorder:function(){return Recorder},Reverb:function(){return Reverb},Sampler:function(){return Sampler},Scale:function(){return Scale},ScaleExp:function(){return ScaleExp},Sequence:function(){return Sequence},Signal:function(){return Signal},Solo:function(){return Solo},Split:function(){return Split},StateTimeline:function(){return StateTimeline},StereoWidener:function(){return StereoWidener},Subtract:function(){return Subtract},SyncedSignal:function(){return SyncedSignal},Synth:function(){return Synth},Ticks:function(){return Ticks},TicksClass:function(){return TicksClass},Time:function(){return Time},TimeClass:function(){return TimeClass},Timeline:function(){return Timeline},ToneAudioBuffer:function(){return ToneAudioBuffer},ToneAudioBuffers:function(){return ToneAudioBuffers},ToneAudioNode:function(){return ToneAudioNode},ToneBufferSource:function(){return ToneBufferSource},ToneEvent:function(){return ToneEvent},ToneOscillatorNode:function(){return ToneOscillatorNode},Transport:function(){return sZ},TransportTime:function(){return TransportTime},TransportTimeClass:function(){return TransportTimeClass},Tremolo:function(){return Tremolo},Unit:function(){return e0},UserMedia:function(){return UserMedia},Vibrato:function(){return Vibrato},Volume:function(){return Volume},WaveShaper:function(){return WaveShaper},Waveform:function(){return Waveform},Zero:function(){return Zero},connect:function(){return connect},connectSeries:function(){return connectSeries},connectSignal:function(){return connectSignal},context:function(){return sJ},dbToGain:function(){return dbToGain},debug:function(){return eK},defaultArg:function(){return defaultArg},disconnect:function(){return disconnect},ftom:function(){return ftom},gainToDb:function(){return gainToDb},getContext:function(){return getContext},getDestination:function(){return getDestination},getDraw:function(){return getDraw},getListener:function(){return getListener},getTransport:function(){return getTransport},immediate:function(){return immediate},intervalToFrequencyRatio:function(){return intervalToFrequencyRatio},isArray:function(){return isArray},isBoolean:function(){return isBoolean},isDefined:function(){return isDefined},isFunction:function(){return isFunction},isNote:function(){return isNote},isNumber:function(){return isNumber},isObject:function(){return isObject},isString:function(){return isString},isUndef:function(){return isUndef},loaded:function(){return loaded},mtof:function(){return mtof},now:function(){return now},optionsFromArguments:function(){return optionsFromArguments},setContext:function(){return setContext},start:function(){return start},supported:function(){return isSupported},version:function(){return e1}});var o,r,a,l,u,c,h,d,p,f,m,g,v,y,A,x,S,T,b,w,C,N,O,k,M,D,F,E,P,R,I,q,V,B,G,L,j,W,z,U,Q,Z,X,Y,$,H,J,K,ee,et,es,ei,en,eo,er,ea,el,eu,ec,eh,ed,ep,ef,em,eg,e_,ev,ey,eA,ex,eS,eT,eb,ew,eC,eN,eO,ek,eM,eD,eF,eE,eP,eR,eI,eq,eV,eB,eG,eL,ej,eW,ez,eU,eQ,eZ,eX,eY,e$,eH,eJ,eK={};s.r(eK),s.d(eK,{assert:function(){return assert},assertContextRunning:function(){return assertContextRunning},assertRange:function(){return assertRange},log:function(){return log},setLogger:function(){return setLogger},warn:function(){return warn}});var e0={};s.r(e0);let e1="14.7.77";var e2=s(5382);let e3=new WeakSet,e8=new WeakMap,e4=new WeakMap,e6=new WeakMap,e5=new WeakMap,e9=new WeakMap,e7=new WeakMap,te=new WeakMap,tt=new WeakMap,ts=new WeakMap,ti={construct:()=>ti},isConstructible=e=>{try{let t=new Proxy(e,ti);new t}catch{return!1}return!0},tn=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,splitImportStatements=(e,t)=>{let s=[],i=e.replace(/^[\s]+/,""),n=i.match(tn);for(;null!==n;){let e=n[1].slice(1,-1),o=n[0].replace(/([\s]+)?;?$/,"").replace(e,new URL(e,t).toString());s.push(o),n=(i=i.slice(n[0].length).replace(/^[\s]+/,"")).match(tn)}return[s.join(";"),i]},verifyParameterDescriptors=e=>{if(void 0!==e&&!Array.isArray(e))throw TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},verifyProcessorCtor=e=>{if(!isConstructible(e))throw TypeError("The given value for processorCtor should be a constructor.");if(null===e.prototype||"object"!=typeof e.prototype)throw TypeError("The given value for processorCtor should have a prototype.")},getValueForKey=(e,t)=>{let s=e.get(t);if(void 0===s)throw Error("A value with the given key could not be found.");return s},pickElementFromSet=(e,t)=>{let s=Array.from(e).filter(t);if(s.length>1)throw Error("More than one element was found.");if(0===s.length)throw Error("No element was found.");let[i]=s;return e.delete(i),i},deletePassiveInputConnectionToAudioNode=(e,t,s,i)=>{let n=getValueForKey(e,t),o=pickElementFromSet(n,e=>e[0]===s&&e[1]===i);return 0===n.size&&e.delete(t),o},getEventListenersOfAudioNode=e=>getValueForKey(e7,e),setInternalStateToActive=e=>{if(e3.has(e))throw Error("The AudioNode is already stored.");e3.add(e),getEventListenersOfAudioNode(e).forEach(e=>e(!0))},isAudioWorkletNode=e=>"port"in e,setInternalStateToPassive=e=>{if(!e3.has(e))throw Error("The AudioNode is not stored.");e3.delete(e),getEventListenersOfAudioNode(e).forEach(e=>e(!1))},setInternalStateToPassiveWhenNecessary=(e,t)=>{!isAudioWorkletNode(e)&&t.every(e=>0===e.size)&&setInternalStateToPassive(e)},to={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},isOwnedByContext=(e,t)=>e.context===t,testAudioBufferCopyChannelMethodsOutOfBoundsSupport=e=>{try{e.copyToChannel(new Float32Array(1),0,-1)}catch{return!1}return!0},createIndexSizeError=()=>new DOMException("","IndexSizeError"),wrapAudioBufferGetChannelDataMethod=e=>{var t;e.getChannelData=(t=e.getChannelData,s=>{try{return t.call(e,s)}catch(e){if(12===e.code)throw createIndexSizeError();throw e}})},tr={numberOfChannels:1},isActiveAudioNode=e=>e3.has(e),ta={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},isAudioBufferSourceNode=e=>"playbackRate"in e,isBiquadFilterNode=e=>"frequency"in e&&"gain"in e,isConstantSourceNode=e=>"offset"in e,isGainNode=e=>!("frequency"in e)&&"gain"in e,isOscillatorNode=e=>"detune"in e&&"frequency"in e&&!("gain"in e),isStereoPannerNode=e=>"pan"in e,getAudioNodeConnections=e=>getValueForKey(e8,e),getAudioParamConnections=e=>getValueForKey(e6,e),deactivateActiveAudioNodeInputConnections=(e,t)=>{let{activeInputs:s}=getAudioNodeConnections(e);s.forEach(s=>s.forEach(([s])=>{t.includes(e)||deactivateActiveAudioNodeInputConnections(s,[...t,e])}));let i=isAudioBufferSourceNode(e)?[e.playbackRate]:isAudioWorkletNode(e)?Array.from(e.parameters.values()):isBiquadFilterNode(e)?[e.Q,e.detune,e.frequency,e.gain]:isConstantSourceNode(e)?[e.offset]:isGainNode(e)?[e.gain]:isOscillatorNode(e)?[e.detune,e.frequency]:isStereoPannerNode(e)?[e.pan]:[];for(let e of i){let s=getAudioParamConnections(e);void 0!==s&&s.activeInputs.forEach(([e])=>deactivateActiveAudioNodeInputConnections(e,t))}isActiveAudioNode(e)&&setInternalStateToPassive(e)},deactivateAudioGraph=e=>{deactivateActiveAudioNodeInputConnections(e.destination,[])},isValidLatencyHint=e=>void 0===e||"number"==typeof e||"string"==typeof e&&("balanced"===e||"interactive"===e||"playback"===e),isAudioNode=e=>"context"in e,isAudioNodeOutputConnection=e=>isAudioNode(e[0]),insertElementInSet=(e,t,s,i)=>{for(let t of e)if(s(t)){if(i)return!1;throw Error("The set contains at least one similar element.")}return e.add(t),!0},addActiveInputConnectionToAudioParam=(e,t,[s,i],n)=>{insertElementInSet(e,[t,s,i],e=>e[0]===t&&e[1]===s,n)},addPassiveInputConnectionToAudioParam=(e,[t,s,i],n)=>{let o=e.get(t);void 0===o?e.set(t,new Set([[s,i]])):insertElementInSet(o,[s,i],e=>e[0]===s,n)},isNativeAudioNodeFaker=e=>"inputs"in e,connectNativeAudioNodeToNativeAudioNode=(e,t,s,i)=>{if(isNativeAudioNodeFaker(t)){let n=t.inputs[i];return e.connect(n,s,0),[n,s,0]}return e.connect(t,s,i),[t,s,i]},deleteActiveInputConnection=(e,t,s)=>{for(let i of e)if(i[0]===t&&i[1]===s)return e.delete(i),i;return null},deleteActiveInputConnectionToAudioParam=(e,t,s)=>pickElementFromSet(e,e=>e[0]===t&&e[1]===s),deleteEventListenerOfAudioNode=(e,t)=>{let s=getEventListenersOfAudioNode(e);if(!s.delete(t))throw Error("Missing the expected event listener.")},deletePassiveInputConnectionToAudioParam=(e,t,s)=>{let i=getValueForKey(e,t),n=pickElementFromSet(i,e=>e[0]===s);return 0===i.size&&e.delete(t),n},disconnectNativeAudioNodeFromNativeAudioNode=(e,t,s,i)=>{isNativeAudioNodeFaker(t)?e.disconnect(t.inputs[i],s,0):e.disconnect(t,s,i)},getNativeAudioNode=e=>getValueForKey(e4,e),getNativeAudioParam=e=>getValueForKey(e5,e),isPartOfACycle=e=>te.has(e),isPassiveAudioNode=e=>!e3.has(e),testAudioNodeDisconnectMethodSupport=(e,t)=>new Promise(s=>{if(null!==t)s(!0);else{let t=e.createScriptProcessor(256,1,1),i=e.createGain(),n=e.createBuffer(1,2,44100),o=n.getChannelData(0);o[0]=1,o[1]=1;let r=e.createBufferSource();r.buffer=n,r.loop=!0,r.connect(t).connect(e.destination),r.connect(i),r.disconnect(i),t.onaudioprocess=i=>{let n=i.inputBuffer.getChannelData(0);Array.prototype.some.call(n,e=>1===e)?s(!0):s(!1),r.stop(),t.onaudioprocess=null,r.disconnect(t),t.disconnect(e.destination)},r.start()}}),visitEachAudioNodeOnce=(e,t)=>{let s=new Map;for(let t of e)for(let e of t){let t=s.get(e);s.set(e,void 0===t?1:t+1)}s.forEach((e,s)=>t(s,e))},isNativeAudioNode=e=>"context"in e,wrapAudioNodeDisconnectMethod=e=>{var t,s;let i=new Map;e.connect=(t=e.connect.bind(e),(e,s=0,n=0)=>{let o=isNativeAudioNode(e)?t(e,s,n):t(e,s),r=i.get(e);return void 0===r?i.set(e,[{input:n,output:s}]):r.every(e=>e.input!==n||e.output!==s)&&r.push({input:n,output:s}),o}),e.disconnect=(s=e.disconnect,(t,n,o)=>{if(s.apply(e),void 0===t)i.clear();else if("number"==typeof t)for(let[e,s]of i){let n=s.filter(e=>e.output!==t);0===n.length?i.delete(e):i.set(e,n)}else if(i.has(t)){if(void 0===n)i.delete(t);else{let e=i.get(t);if(void 0!==e){let s=e.filter(e=>e.output!==n&&(e.input!==o||void 0===o));0===s.length?i.delete(t):i.set(t,s)}}}for(let[t,s]of i)s.forEach(s=>{isNativeAudioNode(t)?e.connect(t,s.output,s.input):e.connect(t,s.output)})})},addConnectionToAudioParamOfAudioContext=(e,t,s,i)=>{let{activeInputs:n,passiveInputs:o}=getAudioParamConnections(t),{outputs:r}=getAudioNodeConnections(e),a=getEventListenersOfAudioNode(e),eventListener=r=>{let a=getNativeAudioNode(e),l=getNativeAudioParam(t);if(r){let t=deletePassiveInputConnectionToAudioParam(o,e,s);addActiveInputConnectionToAudioParam(n,e,t,!1),i||isPartOfACycle(e)||a.connect(l,s)}else{let t=deleteActiveInputConnectionToAudioParam(n,e,s);addPassiveInputConnectionToAudioParam(o,t,!1),i||isPartOfACycle(e)||a.disconnect(l,s)}};return!!insertElementInSet(r,[t,s],e=>e[0]===t&&e[1]===s,!0)&&(a.add(eventListener),isActiveAudioNode(e)?addActiveInputConnectionToAudioParam(n,e,[s,eventListener],!0):addPassiveInputConnectionToAudioParam(o,[e,s,eventListener],!0),!0)},deleteInputConnectionOfAudioNode=(e,t,s,i)=>{let{activeInputs:n,passiveInputs:o}=getAudioNodeConnections(t),r=deleteActiveInputConnection(n[i],e,s);if(null===r){let t=deletePassiveInputConnectionToAudioNode(o,e,s,i);return[t[2],!1]}return[r[2],!0]},deleteInputConnectionOfAudioParam=(e,t,s)=>{let{activeInputs:i,passiveInputs:n}=getAudioParamConnections(t),o=deleteActiveInputConnection(i,e,s);if(null===o){let t=deletePassiveInputConnectionToAudioParam(n,e,s);return[t[1],!1]}return[o[2],!0]},deleteInputsOfAudioNode=(e,t,s,i,n)=>{let[o,r]=deleteInputConnectionOfAudioNode(e,s,i,n);if(null===o||(deleteEventListenerOfAudioNode(e,o),!r||t||isPartOfACycle(e)||disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(e),getNativeAudioNode(s),i,n)),isActiveAudioNode(s)){let{activeInputs:e}=getAudioNodeConnections(s);setInternalStateToPassiveWhenNecessary(s,e)}},deleteInputsOfAudioParam=(e,t,s,i)=>{let[n,o]=deleteInputConnectionOfAudioParam(e,s,i);null===n||(deleteEventListenerOfAudioNode(e,n),!o||t||isPartOfACycle(e)||getNativeAudioNode(e).disconnect(getNativeAudioParam(s),i))},deleteAnyConnection=(e,t)=>{let s=getAudioNodeConnections(e),i=[];for(let n of s.outputs)isAudioNodeOutputConnection(n)?deleteInputsOfAudioNode(e,t,...n):deleteInputsOfAudioParam(e,t,...n),i.push(n[0]);return s.outputs.clear(),i},deleteConnectionAtOutput=(e,t,s)=>{let i=getAudioNodeConnections(e),n=[];for(let o of i.outputs)o[1]===s&&(isAudioNodeOutputConnection(o)?deleteInputsOfAudioNode(e,t,...o):deleteInputsOfAudioParam(e,t,...o),n.push(o[0]),i.outputs.delete(o));return n},deleteConnectionToDestination=(e,t,s,i,n)=>{let o=getAudioNodeConnections(e);return Array.from(o.outputs).filter(e=>e[0]===s&&(void 0===i||e[1]===i)&&(void 0===n||e[2]===n)).map(s=>(isAudioNodeOutputConnection(s)?deleteInputsOfAudioNode(e,t,...s):deleteInputsOfAudioParam(e,t,...s),o.outputs.delete(s),s[0]))};let ReadOnlyMap=class ReadOnlyMap{constructor(e){this._map=new Map(e)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(e,t=null){return this._map.forEach((s,i)=>e.call(t,s,i,this))}get(e){return this._map.get(e)}has(e){return this._map.has(e)}keys(){return this._map.keys()}values(){return this._map.values()}};let tl={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,parameterData:{},processorOptions:{}};function copyFromChannel(e,t,s,i,n){if("function"==typeof e.copyFromChannel)0===t[s].byteLength&&(t[s]=new Float32Array(128)),e.copyFromChannel(t[s],i,n);else{let o=e.getChannelData(i);if(0===t[s].byteLength)t[s]=o.slice(n,n+128);else{let e=new Float32Array(o.buffer,n*Float32Array.BYTES_PER_ELEMENT,128);t[s].set(e)}}}let copyToChannel=(e,t,s,i,n)=>{"function"==typeof e.copyToChannel?0!==t[s].byteLength&&e.copyToChannel(t[s],i,n):0!==t[s].byteLength&&e.getChannelData(i).set(t[s],n)},createNestedArrays=(e,t)=>{let s=[];for(let i=0;i<e;i+=1){let e=[],n="number"==typeof t?t:t[i];for(let t=0;t<n;t+=1)e.push(new Float32Array(128));s.push(e)}return s},getAudioWorkletProcessor=(e,t)=>{let s=getValueForKey(ts,e),i=getNativeAudioNode(t);return getValueForKey(s,i)},processBuffer=async(e,t,s,i,n,o,r)=>{let a=null===t?128*Math.ceil(e.context.length/128):t.length,l=i.channelCount*i.numberOfInputs,u=n.reduce((e,t)=>e+t,0),c=0===u?null:s.createBuffer(u,a,s.sampleRate);if(void 0===o)throw Error("Missing the processor constructor.");let h=getAudioNodeConnections(e),d=await getAudioWorkletProcessor(s,e),p=createNestedArrays(i.numberOfInputs,i.channelCount),f=createNestedArrays(i.numberOfOutputs,n),m=Array.from(e.parameters.keys()).reduce((e,t)=>({...e,[t]:new Float32Array(128)}),{});for(let u=0;u<a;u+=128){if(i.numberOfInputs>0&&null!==t)for(let e=0;e<i.numberOfInputs;e+=1)for(let s=0;s<i.channelCount;s+=1)copyFromChannel(t,p[e],s,s,u);void 0!==o.parameterDescriptors&&null!==t&&o.parameterDescriptors.forEach(({name:e},s)=>{copyFromChannel(t,m,e,l+s,u)});for(let e=0;e<i.numberOfInputs;e+=1)for(let t=0;t<n[e];t+=1)0===f[e][t].byteLength&&(f[e][t]=new Float32Array(128));try{let e=p.map((e,t)=>0===h.activeInputs[t].size?[]:e),t=r(u/s.sampleRate,s.sampleRate,()=>d.process(e,f,m));if(null!==c)for(let e=0,t=0;e<i.numberOfOutputs;e+=1){for(let s=0;s<n[e];s+=1)copyToChannel(c,f[e],s,t+s,u);t+=n[e]}if(!t)break}catch(t){e.dispatchEvent(new ErrorEvent("processorerror",{colno:t.colno,filename:t.filename,lineno:t.lineno,message:t.message}));break}}return c},tu={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},tc={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},th={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},td={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},tp={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},detachArrayBuffer=e=>{let{port1:t,port2:s}=new MessageChannel;return new Promise(i=>{let closeAndResolve=()=>{s.onmessage=null,t.close(),s.close(),i()};s.onmessage=()=>closeAndResolve();try{t.postMessage(e,[e])}catch{}finally{closeAndResolve()}})},tf={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},isDelayNode=e=>"delayTime"in e,getOutputAudioNodeAtIndex=(e,t,s)=>{let i=t[s];if(void 0===i)throw e();return i},tm={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},tg={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},createInvalidStateError=()=>new DOMException("","InvalidStateError"),createInvalidAccessError=()=>new DOMException("","InvalidAccessError"),wrapIIRFilterNodeGetFrequencyResponseMethod=e=>{var t;e.getFrequencyResponse=(t=e.getFrequencyResponse,(s,i,n)=>{if(s.length!==i.length||i.length!==n.length)throw createInvalidAccessError();return t.call(e,s,i,n)})},t_={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},filterBuffer=(e,t,s,i,n,o,r,a,l,u,c)=>{let h=u.length,d=a;for(let a=0;a<h;a+=1){let h=s[0]*u[a];for(let t=1;t<n;t+=1){let i=d-t&l-1;h+=s[t]*o[i],h-=e[t]*r[i]}for(let e=n;e<i;e+=1)h+=s[e]*o[d-e&l-1];for(let s=n;s<t;s+=1)h-=e[s]*r[d-s&l-1];o[d]=u[a],r[d]=h,d=d+1&l-1,c[a]=h}return d},filterFullBuffer=(e,t,s,i)=>{let n=s instanceof Float64Array?s:new Float64Array(s),o=i instanceof Float64Array?i:new Float64Array(i),r=n.length,a=o.length,l=Math.min(r,a);if(1!==n[0]){for(let e=0;e<r;e+=1)o[e]/=n[0];for(let e=1;e<a;e+=1)n[e]/=n[0]}let u=new Float32Array(32),c=new Float32Array(32),h=t.createBuffer(e.numberOfChannels,e.length,e.sampleRate),d=e.numberOfChannels;for(let t=0;t<d;t+=1){let s=e.getChannelData(t),i=h.getChannelData(t);u.fill(0),c.fill(0),filterBuffer(n,r,o,a,l,u,c,0,32,s,i)}return h},createIsSupportedPromise=async(e,t,s,i,n,o,r,a,l,u,c,h,d,p,f,m)=>{if(e(t,t)&&e(s,s)&&e(n,n)&&e(o,o)&&e(a,a)&&e(l,l)&&e(u,u)&&e(c,c)&&e(h,h)&&e(d,d)&&e(p,p)){let t=await Promise.all([e(i,i),e(r,r),e(f,f),e(m,m)]);return t.every(e=>e)}return!1},tv={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers"},testPromiseSupport=e=>{let t=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{let s=e.decodeAudioData(t.buffer,()=>{});if(void 0===s)return!1;return s.catch(()=>{}),!0}catch{}return!1},assignNativeAudioNodeOption=(e,t,s)=>{let i=t[s];void 0!==i&&i!==e[s]&&(e[s]=i)},assignNativeAudioNodeOptions=(e,t)=>{assignNativeAudioNodeOption(e,t,"channelCount"),assignNativeAudioNodeOption(e,t,"channelCountMode"),assignNativeAudioNodeOption(e,t,"channelInterpretation")},testAnalyserNodeGetFloatTimeDomainDataMethodSupport=e=>"function"==typeof e.getFloatTimeDomainData,wrapAnalyserNodeGetFloatTimeDomainDataMethod=e=>{e.getFloatTimeDomainData=t=>{let s=new Uint8Array(t.length);e.getByteTimeDomainData(s);let i=Math.max(s.length,e.fftSize);for(let e=0;e<i;e+=1)t[e]=(s[e]-128)*.0078125;return t}},assignNativeAudioNodeAudioParamValue=(e,t,s)=>{let i=t[s];void 0!==i&&i!==e[s].value&&(e[s].value=i)},wrapAudioBufferSourceNodeStartMethodConsecutiveCalls=e=>{var t;let s;e.start=(t=e.start,s=!1,(i=0,n=0,o)=>{if(s)throw createInvalidStateError();t.call(e,i,n,o),s=!0})},wrapAudioScheduledSourceNodeStartMethodNegativeParameters=e=>{var t;e.start=(t=e.start,(s=0,i=0,n)=>{if("number"==typeof n&&n<0||i<0||s<0)throw RangeError("The parameters can't be negative.");t.call(e,s,i,n)})},wrapAudioScheduledSourceNodeStopMethodNegativeParameters=e=>{var t;e.stop=(t=e.stop,(s=0)=>{if(s<0)throw RangeError("The parameter can't be negative.");t.call(e,s)})},testClonabilityOfAudioWorkletNodeOptions=e=>{let{port1:t}=new MessageChannel;try{t.postMessage(e)}finally{t.close()}},computeBufferSize=(e,t)=>null===e?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(e*t))))),cloneAudioWorkletNodeOptions=e=>new Promise((t,s)=>{let{port1:i,port2:n}=new MessageChannel;i.onmessage=({data:e})=>{i.close(),n.close(),t(e)},i.onmessageerror=({data:e})=>{i.close(),n.close(),s(e)},n.postMessage(e)}),createAudioWorkletProcessorPromise=async(e,t)=>{let s=await cloneAudioWorkletNodeOptions(t);return new e(s)},createAudioWorkletProcessor=(e,t,s,i)=>{let n=ts.get(e);void 0===n&&(n=new WeakMap,ts.set(e,n));let o=createAudioWorkletProcessorPromise(s,i);return n.set(t,o),o},createNativeBiquadFilterNode=(e,t)=>{let s=e.createBiquadFilter();return assignNativeAudioNodeOptions(s,t),assignNativeAudioNodeAudioParamValue(s,t,"Q"),assignNativeAudioNodeAudioParamValue(s,t,"detune"),assignNativeAudioNodeAudioParamValue(s,t,"frequency"),assignNativeAudioNodeAudioParamValue(s,t,"gain"),assignNativeAudioNodeOption(s,t,"type"),s},wrapChannelSplitterNode=e=>{let t=e.numberOfOutputs;Object.defineProperty(e,"channelCount",{get:()=>t,set:e=>{if(e!==t)throw createInvalidStateError()}}),Object.defineProperty(e,"channelCountMode",{get:()=>"explicit",set:e=>{if("explicit"!==e)throw createInvalidStateError()}}),Object.defineProperty(e,"channelInterpretation",{get:()=>"discrete",set:e=>{if("discrete"!==e)throw createInvalidStateError()}})},createNativeChannelSplitterNode=(e,t)=>{let s=e.createChannelSplitter(t.numberOfOutputs);return assignNativeAudioNodeOptions(s,t),wrapChannelSplitterNode(s),s},interceptConnections=(e,t)=>(e.connect=t.connect.bind(t),e.disconnect=t.disconnect.bind(t),e),createNativeDelayNode=(e,t)=>{let s=e.createDelay(t.maxDelayTime);return assignNativeAudioNodeOptions(s,t),assignNativeAudioNodeAudioParamValue(s,t,"delayTime"),s},createNativeGainNode=(e,t)=>{let s=e.createGain();return assignNativeAudioNodeOptions(s,t),assignNativeAudioNodeAudioParamValue(s,t,"gain"),s};function evaluatePolynomial(e,t){let s=[0,0];for(let n=e.length-1;n>=0;n-=1){var i;s=[(i=s)[0]*t[0]-i[1]*t[1],i[0]*t[1]+i[1]*t[0]],s[0]+=e[n]}return s}let createNativeScriptProcessorNode=(e,t,s,i)=>e.createScriptProcessor(t,s,i),createNotSupportedError=()=>new DOMException("","NotSupportedError"),ty={numberOfChannels:1},tA={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,periodicWave:void 0,type:"sine"},tx={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},tS={disableNormalization:!1},tT={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},createTestAudioBufferCopyChannelMethodsSubarraySupport=e=>()=>{if(null===e)return!1;let t=new e(1,1,44100),s=t.createBuffer(1,1,44100);if(void 0===s.copyToChannel)return!0;let i=new Float32Array(2);try{s.copyFromChannel(i,0,0)}catch{return!1}return!0},createTestAudioContextCloseMethodSupport=e=>()=>{if(null===e)return!1;if(void 0!==e.prototype&&void 0!==e.prototype.close)return!0;let t=new e,s=void 0!==t.close;try{t.close()}catch{}return s},createTestAudioContextDecodeAudioDataMethodTypeErrorSupport=e=>()=>{if(null===e)return Promise.resolve(!1);let t=new e(1,1,44100);return new Promise(e=>{let s,i=!0,resolvePromise=s=>{i&&(i=!1,t.startRendering(),e(s instanceof TypeError))};try{s=t.decodeAudioData(null,()=>{},resolvePromise)}catch(e){resolvePromise(e)}void 0!==s&&s.catch(resolvePromise)})},createTestAudioContextOptionsSupport=e=>()=>{let t;if(null===e)return!1;try{t=new e({latencyHint:"balanced"})}catch{return!1}return t.close(),!0},createTestAudioNodeConnectMethodSupport=e=>()=>{if(null===e)return!1;let t=new e(1,1,44100),s=t.createGain(),i=s.connect(s)===s;return s.disconnect(s),i},createTestAudioWorkletProcessorNoOutputsSupport=(e,t)=>async()=>{if(null===e)return!0;if(null===t)return!1;let s=new Blob(['let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),i=new MessageChannel,n=new t(1,128,44100),o=URL.createObjectURL(s),r=!1;try{await n.audioWorklet.addModule(o);let t=new e(n,"a",{numberOfOutputs:0}),s=n.createOscillator();await new Promise(e=>{t.port.onmessage=()=>e(),t.port.postMessage(i.port2,[i.port2])}),t.port.onmessage=()=>r=!0,s.connect(t),s.start(0),await n.startRendering(),r=await new Promise(e=>{i.port1.onmessage=({data:t})=>e(1===t),i.port1.postMessage(0)})}catch{}finally{i.port1.close(),URL.revokeObjectURL(o)}return r},createTestChannelMergerNodeChannelCountSupport=e=>()=>{if(null===e)return!1;let t=new e(1,1,44100),s=t.createChannelMerger();if("max"===s.channelCountMode)return!0;try{s.channelCount=2}catch{return!0}return!1},createTestConstantSourceNodeAccurateSchedulingSupport=e=>()=>{if(null===e)return!1;let t=new e(1,1,44100);if(void 0===t.createConstantSource)return!0;let s=t.createConstantSource();return s.offset.maxValue!==Number.POSITIVE_INFINITY},createTestConvolverNodeBufferReassignabilitySupport=e=>()=>{if(null===e)return!1;let t=new e(1,1,44100),s=t.createConvolver();s.buffer=t.createBuffer(1,1,t.sampleRate);try{s.buffer=t.createBuffer(1,1,t.sampleRate)}catch{return!1}return!0},createTestConvolverNodeChannelCountSupport=e=>()=>{if(null===e)return!1;let t=new e(1,1,44100),s=t.createConvolver();try{s.channelCount=1}catch{return!1}return!0},createTestIsSecureContextSupport=e=>()=>null!==e&&e.hasOwnProperty("isSecureContext"),createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport=e=>()=>{if(null===e)return!1;let t=new e;try{return t.createMediaStreamSource(new MediaStream),!1}catch(e){return!0}finally{t.close()}},createTestStereoPannerNodeDefaultValueSupport=e=>()=>{if(null===e)return Promise.resolve(!1);let t=new e(1,1,44100);if(void 0===t.createStereoPanner||void 0===t.createConstantSource)return Promise.resolve(!0);let s=t.createConstantSource(),i=t.createStereoPanner();return s.channelCount=1,s.offset.value=1,i.channelCount=1,s.start(),s.connect(i).connect(t.destination),t.startRendering().then(e=>1!==e.getChannelData(0)[0])},createUnknownError=()=>new DOMException("","UnknownError"),tb={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},getFirstSample=(e,t,s)=>void 0===e.copyFromChannel?e.getChannelData(s)[0]:(e.copyFromChannel(t,s),t[0]),isDCCurve=e=>{if(null===e)return!1;let t=e.length;return t%2!=0?0!==e[Math.floor(t/2)]:e[t/2-1]+e[t/2]!==0},overwriteAccessors=(e,t,s,i)=>{let n=e;for(;!n.hasOwnProperty(t);)n=Object.getPrototypeOf(n);let{get:o,set:r}=Object.getOwnPropertyDescriptor(n,t);Object.defineProperty(e,t,{get:s(o),set:i(r)})},setValueAtTimeUntilPossible=(e,t,s)=>{try{e.setValueAtTime(t,s)}catch(i){if(9!==i.code)throw i;setValueAtTimeUntilPossible(e,t,s+1e-7)}},testAudioScheduledSourceNodeStartMethodNegativeParametersSupport=e=>{let t=e.createOscillator();try{t.start(-1)}catch(e){return e instanceof RangeError}return!1},testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport=e=>{let t=e.createBuffer(1,1,44100),s=e.createBufferSource();s.buffer=t,s.start(),s.stop();try{return s.stop(),!0}catch{return!1}},testAudioScheduledSourceNodeStopMethodNegativeParametersSupport=e=>{let t=e.createOscillator();try{t.stop(-1)}catch(e){return e instanceof RangeError}return!1},testDomExceptionConstructorSupport=()=>{try{new DOMException}catch{return!1}return!0},testTransferablesSupport=()=>new Promise(e=>{let t=new ArrayBuffer(0),{port1:s,port2:i}=new MessageChannel;s.onmessage=({data:t})=>e(null!==t),i.postMessage(t,[t])}),wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls=(e,t)=>{var s,i;let n;let o=t.createGain();e.connect(o);let r=(s=e.disconnect,()=>{s.call(e,o),e.removeEventListener("ended",r)});e.addEventListener("ended",r),interceptConnections(e,o),e.stop=(i=e.stop,n=!1,(t=0)=>{if(n)try{i.call(e,t)}catch{o.gain.setValueAtTime(0,t)}else i.call(e,t),n=!0})},wrapEventListener=(e,t)=>s=>{let i={value:e};return(Object.defineProperties(s,{currentTarget:i,target:i}),"function"==typeof t)?t.call(e,s):t.handleEvent.call(e,s)},tw=new WeakMap,tC=(o=new Map,r=new WeakMap,(e,t)=>{let s=r.get(e);if(void 0!==s)return s;let i=o.get(e);if(void 0!==i)return i;try{let s=t();if(s instanceof Promise)return o.set(e,s),s.catch(()=>!1).then(t=>(o.delete(e),r.set(e,t),t));return r.set(e,s),s}catch{return r.set(e,!1),!1}}),tN="undefined"==typeof window?null:window,createNativeAnalyserNode=(e,t)=>{let s=e.createAnalyser();if(assignNativeAudioNodeOptions(s,t),!(t.maxDecibels>t.minDecibels))throw createIndexSizeError();return assignNativeAudioNodeOption(s,t,"fftSize"),assignNativeAudioNodeOption(s,t,"maxDecibels"),assignNativeAudioNodeOption(s,t,"minDecibels"),assignNativeAudioNodeOption(s,t,"smoothingTimeConstant"),tC(testAnalyserNodeGetFloatTimeDomainDataMethodSupport,()=>testAnalyserNodeGetFloatTimeDomainDataMethodSupport(s))||wrapAnalyserNodeGetFloatTimeDomainDataMethod(s),s},getAudioNodeRenderer=e=>{let t=getAudioNodeConnections(e);if(null===t.renderer)throw Error("Missing the renderer of the given AudioNode in the audio graph.");return t.renderer},renderInputsOfAudioNode=async(e,t,s)=>{let i=getAudioNodeConnections(e);await Promise.all(i.activeInputs.map((i,n)=>Array.from(i).map(async([i,o])=>{let r=getAudioNodeRenderer(i),a=await r.render(i,t),l=e.context.destination;isPartOfACycle(i)||e===l&&isPartOfACycle(e)||a.connect(s,o,n)})).reduce((e,t)=>[...e,...t],[]))},getNativeContext=e=>{let t=e9.get(e);if(void 0===t)throw createInvalidStateError();return t},tO=null===tN?null:tN.hasOwnProperty("OfflineAudioContext")?tN.OfflineAudioContext:tN.hasOwnProperty("webkitOfflineAudioContext")?tN.webkitOfflineAudioContext:null,isNativeOfflineAudioContext=e=>null!==tO&&e instanceof tO,tk=new WeakMap,tM=class{constructor(e){this._nativeEventTarget=e,this._listeners=new WeakMap}addEventListener(e,t,s){if(null!==t){let i=this._listeners.get(t);void 0===i&&(i=wrapEventListener(this,t),"function"==typeof t&&this._listeners.set(t,i)),this._nativeEventTarget.addEventListener(e,i,s)}}dispatchEvent(e){return this._nativeEventTarget.dispatchEvent(e)}removeEventListener(e,t,s){let i=null===t?void 0:this._listeners.get(t);this._nativeEventTarget.removeEventListener(e,void 0===i?null:i,s)}},tD=null===tN?null:tN.hasOwnProperty("AudioContext")?tN.AudioContext:tN.hasOwnProperty("webkitAudioContext")?tN.webkitAudioContext:null,isNativeAudioContext=e=>null!==tD&&e instanceof tD,module_isNativeAudioNode=e=>null!==tN&&"function"==typeof tN.AudioNode&&e instanceof tN.AudioNode,isNativeAudioParam=e=>null!==tN&&"function"==typeof tN.AudioParam&&e instanceof tN.AudioParam,tF=null===tN?null:tN.hasOwnProperty("AudioWorkletNode")?tN.AudioWorkletNode:null,tE=(a=(e,t,s)=>{let i=[];for(let e=0;e<s.numberOfInputs;e+=1)i.push(new Set);e8.set(e,{activeInputs:i,outputs:new Set,passiveInputs:new WeakMap,renderer:t})},l=((e,t,s,i,n,o,r,a,l,u,c,h,d)=>{let p=new WeakMap;return(f,m,g,v,y)=>{let{activeInputs:A,passiveInputs:x}=o(m),{outputs:S}=o(f),T=a(f),eventListener=o=>{let a=l(m),u=l(f);if(o){let t=deletePassiveInputConnectionToAudioNode(x,f,g,v);e(A,f,t,!1),y||h(f)||s(u,a,g,v),d(m)&&setInternalStateToActive(m)}else{let e=i(A,f,g,v);t(x,v,e,!1),y||h(f)||n(u,a,g,v);let s=r(m);if(0===s)c(m)&&setInternalStateToPassiveWhenNecessary(m,A);else{let e=p.get(m);void 0!==e&&clearTimeout(e),p.set(m,setTimeout(()=>{c(m)&&setInternalStateToPassiveWhenNecessary(m,A)},1e3*s))}}};return!!u(S,[m,g,v],e=>e[0]===m&&e[1]===g&&e[2]===v,!0)&&(T.add(eventListener),c(f)?e(A,f,[g,v,eventListener],!0):t(x,v,[f,g,eventListener],!0),!0)}})((e,t,[s,i,n],o)=>{insertElementInSet(e[i],[t,s,n],e=>e[0]===t&&e[1]===s,o)},(e,t,[s,i,n],o)=>{let r=e.get(s);void 0===r?e.set(s,new Set([[i,t,n]])):insertElementInSet(r,[i,t,n],e=>e[0]===i&&e[1]===t,o)},connectNativeAudioNodeToNativeAudioNode,(e,t,s,i)=>pickElementFromSet(e[i],e=>e[0]===t&&e[1]===s),disconnectNativeAudioNodeFromNativeAudioNode,getAudioNodeConnections,e=>{var t;return null!==(t=tw.get(e))&&void 0!==t?t:0},getEventListenersOfAudioNode,getNativeAudioNode,insertElementInSet,isActiveAudioNode,isPartOfACycle,isPassiveAudioNode),u=e=>(t,s)=>{let i=te.get(t);if(void 0===i){if(!e&&isActiveAudioNode(t)){let e=getNativeAudioNode(t),{outputs:s}=getAudioNodeConnections(t);for(let t of s)if(isAudioNodeOutputConnection(t)){let s=getNativeAudioNode(t[0]);disconnectNativeAudioNodeFromNativeAudioNode(e,s,t[1],t[2])}else{let s=getNativeAudioParam(t[0]);e.disconnect(s,t[1])}}te.set(t,s)}else te.set(t,i+s)},c=(e,t)=>{let s=te.get(e);if(void 0===s)throw Error("Missing the expected cycle count.");let i=getNativeContext(e.context),n=isNativeOfflineAudioContext(i);if(s===t){if(te.delete(e),!n&&isActiveAudioNode(e)){let t=getNativeAudioNode(e),{outputs:s}=getAudioNodeConnections(e);for(let e of s)if(isAudioNodeOutputConnection(e)){let s=getNativeAudioNode(e[0]);connectNativeAudioNodeToNativeAudioNode(t,s,e[1],e[2])}else{let s=getNativeAudioParam(e[0]);t.connect(s,e[1])}}}else te.set(e,s-t)},h=function detectCycles(e,t){let s=isAudioNode(t)?t:getValueForKey(tk,t);if(isDelayNode(s))return[];if(e[0]===s)return[e];if(e.includes(s))return[];let{outputs:i}=getAudioNodeConnections(s);return Array.from(i).map(t=>detectCycles([...e,s],t[0])).reduce((e,t)=>e.concat(t),[])},d=tM,class extends d{constructor(e,t,s,i){super(s),this._context=e,this._nativeAudioNode=s;let n=getNativeContext(e);isNativeAudioContext(n)&&!0!==tC(testAudioNodeDisconnectMethodSupport,()=>testAudioNodeDisconnectMethodSupport(n,tF))&&wrapAudioNodeDisconnectMethod(s),e4.set(this,s),e7.set(this,new Set),"closed"!==e.state&&t&&setInternalStateToActive(this),a(this,i,s)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(e){this._nativeAudioNode.channelCount=e}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(e){this._nativeAudioNode.channelCountMode=e}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(e){this._nativeAudioNode.channelInterpretation=e}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(e,t=0,s=0){if(t<0||t>=this._nativeAudioNode.numberOfOutputs)throw createIndexSizeError();let i=getNativeContext(this._context),n=isNativeOfflineAudioContext(i);if(module_isNativeAudioNode(e)||isNativeAudioParam(e))throw createInvalidAccessError();if(isAudioNode(e)){let i=getNativeAudioNode(e);try{let o=connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode,i,t,s),r=isPassiveAudioNode(this);(n||r)&&this._nativeAudioNode.disconnect(...o),"closed"!==this.context.state&&!r&&isPassiveAudioNode(e)&&setInternalStateToActive(e)}catch(e){if(12===e.code)throw createInvalidAccessError();throw e}let o=l(this,e,t,s,n);if(o){let t=h([this],e);visitEachAudioNodeOnce(t,u(n))}return e}let o=getNativeAudioParam(e);if("playbackRate"===o.name&&1024===o.maxValue)throw createNotSupportedError();try{this._nativeAudioNode.connect(o,t),(n||isPassiveAudioNode(this))&&this._nativeAudioNode.disconnect(o,t)}catch(e){if(12===e.code)throw createInvalidAccessError();throw e}let r=addConnectionToAudioParamOfAudioContext(this,e,t,n);if(r){let t=h([this],e);visitEachAudioNodeOnce(t,u(n))}}disconnect(e,t,s){let i;let n=getNativeContext(this._context),o=isNativeOfflineAudioContext(n);if(void 0===e)i=deleteAnyConnection(this,o);else if("number"==typeof e){if(e<0||e>=this.numberOfOutputs)throw createIndexSizeError();i=deleteConnectionAtOutput(this,o,e)}else{if(void 0!==t&&(t<0||t>=this.numberOfOutputs)||isAudioNode(e)&&void 0!==s&&(s<0||s>=e.numberOfInputs))throw createIndexSizeError();if(0===(i=deleteConnectionToDestination(this,o,e,t,s)).length)throw createInvalidAccessError()}for(let e of i){let t=h([this],e);visitEachAudioNodeOnce(t,c)}}}),tP=(p=tE,f=()=>{let e=new WeakMap,createAnalyserNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,fftSize:i.fftSize,maxDecibels:i.maxDecibels,minDecibels:i.minDecibels,smoothingTimeConstant:i.smoothingTimeConstant};i=createNativeAnalyserNode(s,e)}return e.set(s,i),await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createAnalyserNode(t,s)}}},class extends p{constructor(e,t){let s=getNativeContext(e),i={...to,...t},n=createNativeAnalyserNode(s,i),o=isNativeOfflineAudioContext(s)?f():null;super(e,!1,n,o),this._nativeAnalyserNode=n}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(e){this._nativeAnalyserNode.fftSize=e}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(e){let t=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=e,!(e>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=t,createIndexSizeError()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(e){let t=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=e,!(this._nativeAnalyserNode.maxDecibels>e))throw this._nativeAnalyserNode.minDecibels=t,createIndexSizeError()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(e){this._nativeAnalyserNode.smoothingTimeConstant=e}getByteFrequencyData(e){this._nativeAnalyserNode.getByteFrequencyData(e)}getByteTimeDomainData(e){this._nativeAnalyserNode.getByteTimeDomainData(e)}getFloatFrequencyData(e){this._nativeAnalyserNode.getFloatFrequencyData(e)}getFloatTimeDomainData(e){this._nativeAnalyserNode.getFloatTimeDomainData(e)}}),tR=new WeakSet,tI=null===tN?null:tN.hasOwnProperty("AudioBuffer")?tN.AudioBuffer:null,tq=(m=new Uint32Array(1),e=>(m[0]=e,m[0])),wrapAudioBufferCopyChannelMethods=e=>{e.copyFromChannel=(t,s,i=0)=>{let n=tq(i),o=tq(s);if(o>=e.numberOfChannels)throw createIndexSizeError();let r=e.length,a=e.getChannelData(o),l=t.length;for(let e=n<0?-n:0;e+n<r&&e<l;e+=1)t[e]=a[e+n]},e.copyToChannel=(t,s,i=0)=>{let n=tq(i),o=tq(s);if(o>=e.numberOfChannels)throw createIndexSizeError();let r=e.length,a=e.getChannelData(o),l=t.length;for(let e=n<0?-n:0;e+n<r&&e<l;e+=1)a[e+n]=t[e]}},wrapAudioBufferCopyChannelMethodsOutOfBounds=e=>{var t,s;e.copyFromChannel=(t=e.copyFromChannel,(s,i,n=0)=>{let o=tq(n),r=tq(i);if(o<e.length)return t.call(e,s,r,o)}),e.copyToChannel=(s=e.copyToChannel,(t,i,n=0)=>{let o=tq(n),r=tq(i);if(o<e.length)return s.call(e,t,r,o)})},tV=(g=()=>{if(null===tI)return!1;try{new tI({length:1,sampleRate:44100})}catch{return!1}return!0},i=null,class AudioBuffer{constructor(e){if(null===tO)throw Error("Missing the native OfflineAudioContext constructor.");let{length:t,numberOfChannels:s,sampleRate:n}={...tr,...e};null===i&&(i=new tO(1,1,44100));let o=null!==tI&&tC(g,g)?new tI({length:t,numberOfChannels:s,sampleRate:n}):i.createBuffer(s,t,n);if(0===o.numberOfChannels)throw createNotSupportedError();return"function"!=typeof o.copyFromChannel?(wrapAudioBufferCopyChannelMethods(o),wrapAudioBufferGetChannelDataMethod(o)):tC(testAudioBufferCopyChannelMethodsOutOfBoundsSupport,()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(o))||wrapAudioBufferCopyChannelMethodsOutOfBounds(o),tR.add(o),o}static[Symbol.hasInstance](e){return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===AudioBuffer.prototype||tR.has(e)}}),addSilentConnection=(e,t)=>{let s=createNativeGainNode(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});t.connect(s).connect(e.destination);let disconnect=()=>{t.removeEventListener("ended",disconnect),t.disconnect(s),s.disconnect()};t.addEventListener("ended",disconnect)},renderInputsOfAudioParam=async(e,t,s)=>{let i=getAudioParamConnections(e);await Promise.all(Array.from(i.activeInputs).map(async([e,i])=>{let n=getAudioNodeRenderer(e),o=await n.render(e,t);isPartOfACycle(e)||o.connect(s,i)}))},connectAudioParam=(e,t,s)=>renderInputsOfAudioParam(t,e,s),tB=(v=e=>{let t=e.createBufferSource();t.start();try{t.start()}catch{return!0}return!1},y=e=>{let t=e.createBufferSource(),s=e.createBuffer(1,1,44100);t.buffer=s;try{t.start(0,1)}catch{return!1}return!0},A=e=>{let t=e.createBufferSource();t.start();try{t.stop()}catch{return!1}return!0},x=e=>{var t;e.start=(t=e.start,(s=0,i=0,n)=>{let o=e.buffer,r=null===o?i:Math.min(o.duration,i);null!==o&&r>o.duration-.5/e.context.sampleRate?t.call(e,s,0,0):t.call(e,s,r,n)})},S=(e,t)=>{let s=t.createBuffer(1,1,44100);null===e.buffer&&(e.buffer=s),overwriteAccessors(e,"buffer",t=>()=>{let i=t.call(e);return i===s?null:i},t=>i=>t.call(e,null===i?s:i))},(e,t)=>{let s=e.createBufferSource();return assignNativeAudioNodeOptions(s,t),assignNativeAudioNodeAudioParamValue(s,t,"playbackRate"),assignNativeAudioNodeOption(s,t,"buffer"),assignNativeAudioNodeOption(s,t,"loop"),assignNativeAudioNodeOption(s,t,"loopEnd"),assignNativeAudioNodeOption(s,t,"loopStart"),tC(v,()=>v(e))||wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(s),tC(y,()=>y(e))||x(s),tC(A,()=>A(e))||S(s,e),tC(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(e))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(s),tC(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,()=>testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(e))||wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(s,e),tC(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(e))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(s),addSilentConnection(e,s),s}),tG=(T=e=>{let t=getAudioParamConnections(e);if(null===t.renderer)throw Error("Missing the renderer of the given AudioParam in the audio graph.");return t.renderer},(e,t,s)=>{let i=T(t);return i.replay(s),renderInputsOfAudioParam(t,e,s)}),tL=(b=(e,t)=>{e6.set(e,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:t})},w=e=>({replay(t){for(let s of e)if("exponentialRampToValue"===s.type){let{endTime:e,value:i}=s;t.exponentialRampToValueAtTime(i,e)}else if("linearRampToValue"===s.type){let{endTime:e,value:i}=s;t.linearRampToValueAtTime(i,e)}else if("setTarget"===s.type){let{startTime:e,target:i,timeConstant:n}=s;t.setTargetAtTime(i,e,n)}else if("setValue"===s.type){let{startTime:e,value:i}=s;t.setValueAtTime(i,e)}else if("setValueCurve"===s.type){let{duration:e,startTime:i,values:n}=s;t.setValueCurveAtTime(n,i,e)}else throw Error("Can't apply an unknown automation.")}}),C=e2.createCancelAndHoldAutomationEvent,N=e2.createCancelScheduledValuesAutomationEvent,O=e2.createExponentialRampToValueAutomationEvent,k=e2.createLinearRampToValueAutomationEvent,M=e2.createSetTargetAutomationEvent,D=e2.createSetValueAutomationEvent,F=e2.createSetValueCurveAutomationEvent,(e,t,s,i=null,n=null)=>{let o=s.value,r=new e2.AutomationEventList(o),a=t?w(r):null,l={get defaultValue(){return o},get maxValue(){return null===i?s.maxValue:i},get minValue(){return null===n?s.minValue:n},get value(){return s.value},set value(value){s.value=value,l.setValueAtTime(value,e.context.currentTime)},cancelAndHoldAtTime(t){if("function"==typeof s.cancelAndHoldAtTime)null===a&&r.flush(e.context.currentTime),r.add(C(t)),s.cancelAndHoldAtTime(t);else{let i=Array.from(r).pop();null===a&&r.flush(e.context.currentTime),r.add(C(t));let n=Array.from(r).pop();s.cancelScheduledValues(t),i!==n&&void 0!==n&&("exponentialRampToValue"===n.type?s.exponentialRampToValueAtTime(n.value,n.endTime):"linearRampToValue"===n.type?s.linearRampToValueAtTime(n.value,n.endTime):"setValue"===n.type?s.setValueAtTime(n.value,n.startTime):"setValueCurve"===n.type&&s.setValueCurveAtTime(n.values,n.startTime,n.duration))}return l},cancelScheduledValues:t=>(null===a&&r.flush(e.context.currentTime),r.add(N(t)),s.cancelScheduledValues(t),l),exponentialRampToValueAtTime(t,i){if(0===t||!Number.isFinite(i)||i<0)throw RangeError();let n=e.context.currentTime;return null===a&&r.flush(n),0===Array.from(r).length&&(r.add(D(o,n)),s.setValueAtTime(o,n)),r.add(O(t,i)),s.exponentialRampToValueAtTime(t,i),l},linearRampToValueAtTime(t,i){let n=e.context.currentTime;return null===a&&r.flush(n),0===Array.from(r).length&&(r.add(D(o,n)),s.setValueAtTime(o,n)),r.add(k(t,i)),s.linearRampToValueAtTime(t,i),l},setTargetAtTime:(t,i,n)=>(null===a&&r.flush(e.context.currentTime),r.add(M(t,i,n)),s.setTargetAtTime(t,i,n),l),setValueAtTime:(t,i)=>(null===a&&r.flush(e.context.currentTime),r.add(D(t,i)),s.setValueAtTime(t,i),l),setValueCurveAtTime(t,i,n){let o=t instanceof Float32Array?t:new Float32Array(t);if(null!==tD&&"webkitAudioContext"===tD.name){let t=i+n,u=e.context.sampleRate,c=Math.ceil(i*u),h=Math.floor(t*u),d=h-c,p=new Float32Array(d);for(let e=0;e<d;e+=1){let t=(o.length-1)/n*((c+e)/u-i),s=Math.floor(t),r=Math.ceil(t);p[e]=s===r?o[s]:(1-(t-s))*o[s]+(1-(r-t))*o[r]}null===a&&r.flush(e.context.currentTime),r.add(F(p,i,n)),s.setValueCurveAtTime(p,i,n);let f=h/u;f<t&&setValueAtTimeUntilPossible(l,p[p.length-1],f),setValueAtTimeUntilPossible(l,o[o.length-1],t)}else null===a&&r.flush(e.context.currentTime),r.add(F(o,i,n)),s.setValueCurveAtTime(o,i,n);return l}};return e5.set(l,s),tk.set(l,e),b(l,a),l}),tj=(E=tE,P=()=>{let e=new WeakMap,t=null,s=null,createAudioBufferSourceNode=async(i,n)=>{let o=getNativeAudioNode(i),r=isOwnedByContext(o,n);if(!r){let e={buffer:o.buffer,channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,loop:o.loop,loopEnd:o.loopEnd,loopStart:o.loopStart,playbackRate:o.playbackRate.value};o=tB(n,e),null!==t&&o.start(...t),null!==s&&o.stop(s)}return e.set(n,o),r?await connectAudioParam(n,i.playbackRate,o.playbackRate):await tG(n,i.playbackRate,o.playbackRate),await renderInputsOfAudioNode(i,n,o),o};return{set start(value){t=value},set stop(value){s=value},render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createAudioBufferSourceNode(t,s)}}},class extends E{constructor(e,t){let s=getNativeContext(e),i={...ta,...t},n=tB(s,i),o=isNativeOfflineAudioContext(s),r=o?P():null;super(e,!1,n,r),this._audioBufferSourceNodeRenderer=r,this._isBufferNullified=!1,this._isBufferSet=null!==i.buffer,this._nativeAudioBufferSourceNode=n,this._onended=null,this._playbackRate=tL(this,o,n.playbackRate,34028234663852886e22,-34028234663852886e22)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(e){if(this._nativeAudioBufferSourceNode.buffer=e,null!==e){if(this._isBufferSet)throw createInvalidStateError();this._isBufferSet=!0}}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(e){this._nativeAudioBufferSourceNode.loop=e}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(e){this._nativeAudioBufferSourceNode.loopEnd=e}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(e){this._nativeAudioBufferSourceNode.loopStart=e}get onended(){return this._onended}set onended(e){let t="function"==typeof e?wrapEventListener(this,e):null;this._nativeAudioBufferSourceNode.onended=t;let s=this._nativeAudioBufferSourceNode.onended;this._onended=null!==s&&s===t?e:s}get playbackRate(){return this._playbackRate}start(e=0,t=0,s){if(this._nativeAudioBufferSourceNode.start(e,t,s),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.start=void 0===s?[e,t]:[e,t,s]),"closed"!==this.context.state){setInternalStateToActive(this);let resetInternalStateToPassive=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeAudioBufferSourceNode.addEventListener("ended",resetInternalStateToPassive)}}stop(e=0){this._nativeAudioBufferSourceNode.stop(e),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.stop=e)}}),tW=(R=tE,I=e=>{let t=new WeakMap,createAudioDestinationNode=async(s,i)=>{let n=i.destination;return t.set(i,n),await e(s,i,n),n};return{render(e,s){let i=t.get(s);return void 0!==i?Promise.resolve(i):createAudioDestinationNode(e,s)}}},q=(e,t,s)=>{let i=e.destination;if(i.channelCount!==t)try{i.channelCount=t}catch{}s&&"explicit"!==i.channelCountMode&&(i.channelCountMode="explicit"),0===i.maxChannelCount&&Object.defineProperty(i,"maxChannelCount",{value:t});let n=createNativeGainNode(e,{channelCount:t,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,gain:1});return overwriteAccessors(n,"channelCount",e=>()=>e.call(n),e=>t=>{e.call(n,t);try{i.channelCount=t}catch(e){if(t>i.maxChannelCount)throw e}}),overwriteAccessors(n,"channelCountMode",e=>()=>e.call(n),e=>t=>{e.call(n,t),i.channelCountMode=t}),overwriteAccessors(n,"channelInterpretation",e=>()=>e.call(n),e=>t=>{e.call(n,t),i.channelInterpretation=t}),Object.defineProperty(n,"maxChannelCount",{get:()=>i.maxChannelCount}),n.connect(i),n},class extends R{constructor(e,t){let s=getNativeContext(e),i=isNativeOfflineAudioContext(s),n=q(s,t,i),o=i?I(renderInputsOfAudioNode):null;super(e,!1,n,o),this._isNodeOfNativeOfflineAudioContext=i,this._nativeAudioDestinationNode=n}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(e){if(this._isNodeOfNativeOfflineAudioContext)throw createInvalidStateError();if(e>this._nativeAudioDestinationNode.maxChannelCount)throw createIndexSizeError();this._nativeAudioDestinationNode.channelCount=e}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(e){if(this._isNodeOfNativeOfflineAudioContext)throw createInvalidStateError();this._nativeAudioDestinationNode.channelCountMode=e}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}}),setAudioNodeTailTime=(e,t)=>tw.set(e,t),tz=(V=tE,B=()=>{let e=new WeakMap,createBiquadFilterNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={Q:i.Q.value,channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,detune:i.detune.value,frequency:i.frequency.value,gain:i.gain.value,type:i.type};i=createNativeBiquadFilterNode(s,e)}return e.set(s,i),n?(await connectAudioParam(s,t.Q,i.Q),await connectAudioParam(s,t.detune,i.detune),await connectAudioParam(s,t.frequency,i.frequency),await connectAudioParam(s,t.gain,i.gain)):(await tG(s,t.Q,i.Q),await tG(s,t.detune,i.detune),await tG(s,t.frequency,i.frequency),await tG(s,t.gain,i.gain)),await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createBiquadFilterNode(t,s)}}},class extends V{constructor(e,t){let s=getNativeContext(e),i={...tu,...t},n=createNativeBiquadFilterNode(s,i),o=isNativeOfflineAudioContext(s),r=o?B():null;super(e,!1,n,r),this._Q=tL(this,o,n.Q,34028234663852886e22,-34028234663852886e22),this._detune=tL(this,o,n.detune,1200*Math.log2(34028234663852886e22),-1200*Math.log2(34028234663852886e22)),this._frequency=tL(this,o,n.frequency,e.sampleRate/2,0),this._gain=tL(this,o,n.gain,40*Math.log10(34028234663852886e22),-34028234663852886e22),this._nativeBiquadFilterNode=n,setAudioNodeTailTime(this,1)}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get Q(){return this._Q}get type(){return this._nativeBiquadFilterNode.type}set type(e){this._nativeBiquadFilterNode.type=e}getFrequencyResponse(e,t,s){try{this._nativeBiquadFilterNode.getFrequencyResponse(e,t,s)}catch(e){if(11===e.code)throw createInvalidAccessError();throw e}if(e.length!==t.length||t.length!==s.length)throw createInvalidAccessError()}}),monitorConnections=(e,t,s)=>{var i,n;let o=new Set;return e.connect=(i=e.connect,(s,n=0,r=0)=>{let a=0===o.size;if(module_isNativeAudioNode(s))return i.call(e,s,n,r),insertElementInSet(o,[s,n,r],e=>e[0]===s&&e[1]===n&&e[2]===r,!0),a&&t(),s;i.call(e,s,n),insertElementInSet(o,[s,n],e=>e[0]===s&&e[1]===n,!0),a&&t()}),e.disconnect=(n=e.disconnect,(t,i,r)=>{let a=o.size>0;if(void 0===t)n.apply(e),o.clear();else if("number"==typeof t)for(let s of(n.call(e,t),o))s[1]===t&&o.delete(s);else for(let s of(module_isNativeAudioNode(t)?n.call(e,t,i,r):n.call(e,t,i),o))s[0]===t&&(void 0===i||s[1]===i)&&(void 0===r||s[2]===r)&&o.delete(s);let l=0===o.size;a&&l&&s()}),e},tU=(G=(e,t)=>{t.channelCount=1,t.channelCountMode="explicit",Object.defineProperty(t,"channelCount",{get:()=>1,set:()=>{throw createInvalidStateError()}}),Object.defineProperty(t,"channelCountMode",{get:()=>"explicit",set:()=>{throw createInvalidStateError()}});let s=e.createBufferSource();monitorConnections(t,()=>{let e=t.numberOfInputs;for(let i=0;i<e;i+=1)s.connect(t,0,i)},()=>s.disconnect(t))},(e,t)=>{let s=e.createChannelMerger(t.numberOfInputs);return null!==tD&&"webkitAudioContext"===tD.name&&G(e,s),assignNativeAudioNodeOptions(s,t),s}),tQ=(L=tE,j=()=>{let e=new WeakMap,createAudioNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,numberOfInputs:i.numberOfInputs};i=tU(s,e)}return e.set(s,i),await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createAudioNode(t,s)}}},class extends L{constructor(e,t){let s=getNativeContext(e),i={...tc,...t},n=tU(s,i),o=isNativeOfflineAudioContext(s)?j():null;super(e,!1,n,o)}}),tZ=(W=tE,z=()=>{let e=new WeakMap,createAudioNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,numberOfOutputs:i.numberOfOutputs};i=createNativeChannelSplitterNode(s,e)}return e.set(s,i),await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createAudioNode(t,s)}}},U=e=>({...e,channelCount:e.numberOfOutputs}),class extends W{constructor(e,t){let s=getNativeContext(e),i=U({...th,...t}),n=createNativeChannelSplitterNode(s,i),o=isNativeOfflineAudioContext(s)?z():null;super(e,!1,n,o)}}),tX=(Q=(e,{offset:t,...s})=>{let i=e.createBuffer(1,2,44100),n=tB(e,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),o=createNativeGainNode(e,{...s,gain:t}),r=i.getChannelData(0);return r[0]=1,r[1]=1,n.buffer=i,n.loop=!0,addSilentConnection(e,n),monitorConnections(interceptConnections({get bufferSize(){return},get channelCount(){return o.channelCount},set channelCount(value){o.channelCount=value},get channelCountMode(){return o.channelCountMode},set channelCountMode(value){o.channelCountMode=value},get channelInterpretation(){return o.channelInterpretation},set channelInterpretation(value){o.channelInterpretation=value},get context(){return o.context},get inputs(){return[]},get numberOfInputs(){return n.numberOfInputs},get numberOfOutputs(){return o.numberOfOutputs},get offset(){return o.gain},get onended(){return n.onended},set onended(value){n.onended=value},addEventListener:(...e)=>n.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>n.dispatchEvent(e[0]),removeEventListener:(...e)=>n.removeEventListener(e[0],e[1],e[2]),start(e=0){n.start.call(n,e)},stop(e=0){n.stop.call(n,e)}},o),()=>n.connect(o),()=>n.disconnect(o))},(e,t)=>{if(void 0===e.createConstantSource)return Q(e,t);let s=e.createConstantSource();return assignNativeAudioNodeOptions(s,t),assignNativeAudioNodeAudioParamValue(s,t,"offset"),tC(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(e))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(s),tC(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(e))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(s),addSilentConnection(e,s),s}),tY=(Z=tE,X=()=>{let e=new WeakMap,t=null,s=null,createConstantSourceNode=async(i,n)=>{let o=getNativeAudioNode(i),r=isOwnedByContext(o,n);if(!r){let e={channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,offset:o.offset.value};o=tX(n,e),null!==t&&o.start(t),null!==s&&o.stop(s)}return e.set(n,o),r?await connectAudioParam(n,i.offset,o.offset):await tG(n,i.offset,o.offset),await renderInputsOfAudioNode(i,n,o),o};return{set start(value){t=value},set stop(value){s=value},render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createConstantSourceNode(t,s)}}},class extends Z{constructor(e,t){let s=getNativeContext(e),i={...td,...t},n=tX(s,i),o=isNativeOfflineAudioContext(s),r=o?X():null;super(e,!1,n,r),this._constantSourceNodeRenderer=r,this._nativeConstantSourceNode=n,this._offset=tL(this,o,n.offset,34028234663852886e22,-34028234663852886e22),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(e){let t="function"==typeof e?wrapEventListener(this,e):null;this._nativeConstantSourceNode.onended=t;let s=this._nativeConstantSourceNode.onended;this._onended=null!==s&&s===t?e:s}start(e=0){if(this._nativeConstantSourceNode.start(e),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.start=e),"closed"!==this.context.state){setInternalStateToActive(this);let resetInternalStateToPassive=()=>{this._nativeConstantSourceNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeConstantSourceNode.addEventListener("ended",resetInternalStateToPassive)}}stop(e=0){this._nativeConstantSourceNode.stop(e),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.stop=e)}}),createNativeConvolverNode=(e,t)=>{let s=e.createConvolver();if(assignNativeAudioNodeOptions(s,t),t.disableNormalization===s.normalize&&(s.normalize=!t.disableNormalization),assignNativeAudioNodeOption(s,t,"buffer"),t.channelCount>2||(overwriteAccessors(s,"channelCount",e=>()=>e.call(s),e=>t=>{if(t>2)throw createNotSupportedError();return e.call(s,t)}),"max"===t.channelCountMode))throw createNotSupportedError();return overwriteAccessors(s,"channelCountMode",e=>()=>e.call(s),e=>t=>{if("max"===t)throw createNotSupportedError();return e.call(s,t)}),s},t$=(Y=tE,$=()=>{let e=new WeakMap,createConvolverNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={buffer:i.buffer,channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,disableNormalization:!i.normalize};i=createNativeConvolverNode(s,e)}return e.set(s,i),isNativeAudioNodeFaker(i)?await renderInputsOfAudioNode(t,s,i.inputs[0]):await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createConvolverNode(t,s)}}},class extends Y{constructor(e,t){let s=getNativeContext(e),i={...tp,...t},n=createNativeConvolverNode(s,i),o=isNativeOfflineAudioContext(s),r=o?$():null;super(e,!1,n,r),this._isBufferNullified=!1,this._nativeConvolverNode=n,null!==i.buffer&&setAudioNodeTailTime(this,i.buffer.duration)}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(e){if(this._nativeConvolverNode.buffer=e,null===e&&null!==this._nativeConvolverNode.buffer){let e=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=e.createBuffer(1,1,e.sampleRate),this._isBufferNullified=!0,setAudioNodeTailTime(this,0)}else this._isBufferNullified=!1,setAudioNodeTailTime(this,null===this._nativeConvolverNode.buffer?0:this._nativeConvolverNode.buffer.duration)}get normalize(){return this._nativeConvolverNode.normalize}set normalize(e){this._nativeConvolverNode.normalize=e}}),tH=(H=tE,J=e=>{let t=new WeakMap,createDelayNode=async(s,i)=>{let n=getNativeAudioNode(s),o=isOwnedByContext(n,i);if(!o){let t={channelCount:n.channelCount,channelCountMode:n.channelCountMode,channelInterpretation:n.channelInterpretation,delayTime:n.delayTime.value,maxDelayTime:e};n=createNativeDelayNode(i,t)}return t.set(i,n),o?await connectAudioParam(i,s.delayTime,n.delayTime):await tG(i,s.delayTime,n.delayTime),await renderInputsOfAudioNode(s,i,n),n};return{render(e,s){let i=t.get(s);return void 0!==i?Promise.resolve(i):createDelayNode(e,s)}}},class extends H{constructor(e,t){let s=getNativeContext(e),i={...tf,...t},n=createNativeDelayNode(s,i),o=isNativeOfflineAudioContext(s),r=o?J(i.maxDelayTime):null;super(e,!1,n,r),this._delayTime=tL(this,o,n.delayTime),setAudioNodeTailTime(this,i.maxDelayTime)}get delayTime(){return this._delayTime}}),createNativeDynamicsCompressorNode=(e,t)=>{let s=e.createDynamicsCompressor();if(assignNativeAudioNodeOptions(s,t),t.channelCount>2||"max"===t.channelCountMode)throw createNotSupportedError();return assignNativeAudioNodeAudioParamValue(s,t,"attack"),assignNativeAudioNodeAudioParamValue(s,t,"knee"),assignNativeAudioNodeAudioParamValue(s,t,"ratio"),assignNativeAudioNodeAudioParamValue(s,t,"release"),assignNativeAudioNodeAudioParamValue(s,t,"threshold"),s},tJ=(K=tE,ee=()=>{let e=new WeakMap,createDynamicsCompressorNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={attack:i.attack.value,channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,knee:i.knee.value,ratio:i.ratio.value,release:i.release.value,threshold:i.threshold.value};i=createNativeDynamicsCompressorNode(s,e)}return e.set(s,i),n?(await connectAudioParam(s,t.attack,i.attack),await connectAudioParam(s,t.knee,i.knee),await connectAudioParam(s,t.ratio,i.ratio),await connectAudioParam(s,t.release,i.release),await connectAudioParam(s,t.threshold,i.threshold)):(await tG(s,t.attack,i.attack),await tG(s,t.knee,i.knee),await tG(s,t.ratio,i.ratio),await tG(s,t.release,i.release),await tG(s,t.threshold,i.threshold)),await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createDynamicsCompressorNode(t,s)}}},class extends K{constructor(e,t){let s=getNativeContext(e),i={...tm,...t},n=createNativeDynamicsCompressorNode(s,i),o=isNativeOfflineAudioContext(s),r=o?ee():null;super(e,!1,n,r),this._attack=tL(this,o,n.attack),this._knee=tL(this,o,n.knee),this._nativeDynamicsCompressorNode=n,this._ratio=tL(this,o,n.ratio),this._release=tL(this,o,n.release),this._threshold=tL(this,o,n.threshold),setAudioNodeTailTime(this,.006)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(e){let t=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=e,e>2)throw this._nativeDynamicsCompressorNode.channelCount=t,createNotSupportedError()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(e){let t=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=e,"max"===e)throw this._nativeDynamicsCompressorNode.channelCountMode=t,createNotSupportedError()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return"number"==typeof this._nativeDynamicsCompressorNode.reduction.value?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}}),tK=(et=tE,es=()=>{let e=new WeakMap,createGainNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,gain:i.gain.value};i=createNativeGainNode(s,e)}return e.set(s,i),n?await connectAudioParam(s,t.gain,i.gain):await tG(s,t.gain,i.gain),await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createGainNode(t,s)}}},class extends et{constructor(e,t){let s=getNativeContext(e),i={...tg,...t},n=createNativeGainNode(s,i),o=isNativeOfflineAudioContext(s),r=o?es():null;super(e,!1,n,r),this._gain=tL(this,o,n.gain,34028234663852886e22,-34028234663852886e22)}get gain(){return this._gain}}),t0=(ei=()=>{if(null===tO)return Promise.resolve(!1);let e=new tO(1,1,44100),t=createNativeGainNode(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise(s=>{e.oncomplete=()=>{t.disconnect(),s(0!==e.currentTime)},e.startRendering()})},e=>tC(testPromiseSupport,()=>testPromiseSupport(e))?Promise.resolve(tC(ei,ei)).then(t=>{if(!t){let t=createNativeScriptProcessorNode(e,512,0,1);e.oncomplete=()=>{t.onaudioprocess=null,t.disconnect()},t.onaudioprocess=()=>e.currentTime,t.connect(e.destination)}return e.startRendering()}):new Promise(t=>{let s=createNativeGainNode(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});e.oncomplete=e=>{s.disconnect(),t(e.renderedBuffer)},s.connect(e.destination),e.startRendering()})),t1=(en=(e,t,{channelCount:s,channelCountMode:i,channelInterpretation:n,feedback:o,feedforward:r})=>{let a=computeBufferSize(t,e.sampleRate),l=o instanceof Float64Array?o:new Float64Array(o),u=r instanceof Float64Array?r:new Float64Array(r),c=l.length,h=u.length,d=Math.min(c,h);if(0===c||c>20)throw createNotSupportedError();if(0===l[0])throw createInvalidStateError();if(0===h||h>20)throw createNotSupportedError();if(0===u[0])throw createInvalidStateError();if(1!==l[0]){for(let e=0;e<h;e+=1)u[e]/=l[0];for(let e=1;e<c;e+=1)l[e]/=l[0]}let p=createNativeScriptProcessorNode(e,a,s,s);p.channelCount=s,p.channelCountMode=i,p.channelInterpretation=n;let f=[],m=[],g=[];for(let e=0;e<s;e+=1){f.push(0);let e=new Float32Array(32),t=new Float32Array(32);e.fill(0),t.fill(0),m.push(e),g.push(t)}p.onaudioprocess=e=>{let t=e.inputBuffer,s=e.outputBuffer,i=t.numberOfChannels;for(let e=0;e<i;e+=1){let i=t.getChannelData(e),n=s.getChannelData(e);f[e]=filterBuffer(l,c,u,h,d,m[e],g[e],f[e],32,i,n)}};let v=e.sampleRate/2;return interceptConnections({get bufferSize(){return a},get channelCount(){return p.channelCount},set channelCount(value){p.channelCount=value},get channelCountMode(){return p.channelCountMode},set channelCountMode(value){p.channelCountMode=value},get channelInterpretation(){return p.channelInterpretation},set channelInterpretation(value){p.channelInterpretation=value},get context(){return p.context},get inputs(){return[p]},get numberOfInputs(){return p.numberOfInputs},get numberOfOutputs(){return p.numberOfOutputs},addEventListener:(...e)=>p.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>p.dispatchEvent(e[0]),getFrequencyResponse(e,t,s){if(e.length!==t.length||t.length!==s.length)throw createInvalidAccessError();let i=e.length;for(let n=0;n<i;n+=1){let i=-Math.PI*(e[n]/v),o=[Math.cos(i),Math.sin(i)],r=evaluatePolynomial(u,o),a=evaluatePolynomial(l,o),c=function(e,t){let s=t[0]*t[0]+t[1]*t[1];return[(e[0]*t[0]+e[1]*t[1])/s,(e[1]*t[0]-e[0]*t[1])/s]}(r,a);t[n]=Math.sqrt(c[0]*c[0]+c[1]*c[1]),s[n]=Math.atan2(c[1],c[0])}},removeEventListener:(...e)=>p.removeEventListener(e[0],e[1],e[2])},p)},(e,t,s)=>{if(void 0===e.createIIRFilter)return en(e,t,s);let i=e.createIIRFilter(s.feedforward,s.feedback);return assignNativeAudioNodeOptions(i,s),i}),t2=(eo=tE,er=(e,t)=>{let s=new WeakMap,i=null,createAudioNode=async(n,o)=>{let r=null,a=getNativeAudioNode(n),l=isOwnedByContext(a,o);if(void 0===o.createIIRFilter?r=tB(o,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}):l||(a=o.createIIRFilter(t,e)),s.set(o,null===r?a:r),null!==r){if(null===i){if(null===tO)throw Error("Missing the native OfflineAudioContext constructor.");let s=new tO(n.context.destination.channelCount,n.context.length,o.sampleRate);i=(async()=>{await renderInputsOfAudioNode(n,s,s.destination);let i=await t0(s);return filterFullBuffer(i,o,e,t)})()}let s=await i;return r.buffer=s,r.start(0),r}return await renderInputsOfAudioNode(n,o,a),a};return{render(e,t){let i=s.get(t);return void 0!==i?Promise.resolve(i):createAudioNode(e,t)}}},class extends eo{constructor(e,t){let s=getNativeContext(e),i=isNativeOfflineAudioContext(s),n={...t_,...t},o=t1(s,i?null:e.baseLatency,n),r=i?er(n.feedback,n.feedforward):null;super(e,!1,o,r),wrapIIRFilterNodeGetFrequencyResponseMethod(o),this._nativeIIRFilterNode=o,setAudioNodeTailTime(this,1)}getFrequencyResponse(e,t,s){return this._nativeIIRFilterNode.getFrequencyResponse(e,t,s)}}),t3=new WeakMap,t8=(ea=(e,t)=>{let s=t.listener,{forwardX:i,forwardY:n,forwardZ:o,positionX:r,positionY:a,positionZ:l,upX:u,upY:c,upZ:h}=void 0===s.forwardX?(()=>{let i=new Float32Array(1),n=tU(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),o=isNativeOfflineAudioContext(t),r=!1,a=[0,0,-1,0,1,0],l=[0,0,0],createScriptProcessorNode=()=>{if(r)return;r=!0;let e=createNativeScriptProcessorNode(t,256,9,0);e.onaudioprocess=({inputBuffer:e})=>{let t=[getFirstSample(e,i,0),getFirstSample(e,i,1),getFirstSample(e,i,2),getFirstSample(e,i,3),getFirstSample(e,i,4),getFirstSample(e,i,5)];t.some((e,t)=>e!==a[t])&&(s.setOrientation(...t),a=t);let n=[getFirstSample(e,i,6),getFirstSample(e,i,7),getFirstSample(e,i,8)];n.some((e,t)=>e!==l[t])&&(s.setPosition(...n),l=n)},n.connect(e)},createSetOrientation=e=>t=>{t!==a[e]&&(a[e]=t,s.setOrientation(...a))},createSetPosition=e=>t=>{t!==l[e]&&(l[e]=t,s.setPosition(...l))},createFakeAudioParam=(s,i,r)=>{var a,l,u,c,h,d,p;let f=tX(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:i});f.connect(n,0,s),f.start(),Object.defineProperty(f.offset,"defaultValue",{get:()=>i});let m=tL({context:e},o,f.offset,34028234663852886e22,-34028234663852886e22);return overwriteAccessors(m,"value",e=>()=>e.call(m),e=>t=>{try{e.call(m,t)}catch(e){if(9!==e.code)throw e}createScriptProcessorNode(),o&&r(t)}),m.cancelAndHoldAtTime=(a=m.cancelAndHoldAtTime,o?()=>{throw createNotSupportedError()}:(...e)=>{let t=a.apply(m,e);return createScriptProcessorNode(),t}),m.cancelScheduledValues=(l=m.cancelScheduledValues,o?()=>{throw createNotSupportedError()}:(...e)=>{let t=l.apply(m,e);return createScriptProcessorNode(),t}),m.exponentialRampToValueAtTime=(u=m.exponentialRampToValueAtTime,o?()=>{throw createNotSupportedError()}:(...e)=>{let t=u.apply(m,e);return createScriptProcessorNode(),t}),m.linearRampToValueAtTime=(c=m.linearRampToValueAtTime,o?()=>{throw createNotSupportedError()}:(...e)=>{let t=c.apply(m,e);return createScriptProcessorNode(),t}),m.setTargetAtTime=(h=m.setTargetAtTime,o?()=>{throw createNotSupportedError()}:(...e)=>{let t=h.apply(m,e);return createScriptProcessorNode(),t}),m.setValueAtTime=(d=m.setValueAtTime,o?()=>{throw createNotSupportedError()}:(...e)=>{let t=d.apply(m,e);return createScriptProcessorNode(),t}),m.setValueCurveAtTime=(p=m.setValueCurveAtTime,o?()=>{throw createNotSupportedError()}:(...e)=>{let t=p.apply(m,e);return createScriptProcessorNode(),t}),m};return{forwardX:createFakeAudioParam(0,0,createSetOrientation(0)),forwardY:createFakeAudioParam(1,0,createSetOrientation(1)),forwardZ:createFakeAudioParam(2,-1,createSetOrientation(2)),positionX:createFakeAudioParam(6,0,createSetPosition(0)),positionY:createFakeAudioParam(7,0,createSetPosition(1)),positionZ:createFakeAudioParam(8,0,createSetPosition(2)),upX:createFakeAudioParam(3,0,createSetOrientation(3)),upY:createFakeAudioParam(4,1,createSetOrientation(4)),upZ:createFakeAudioParam(5,0,createSetOrientation(5))}})():s;return{get forwardX(){return i},get forwardY(){return n},get forwardZ(){return o},get positionX(){return r},get positionY(){return a},get positionZ(){return l},get upX(){return u},get upY(){return c},get upZ(){return h}}},el=tM,class extends el{constructor(e,t){super(e),this._nativeContext=e,e9.set(this,e),isNativeOfflineAudioContext(e)&&t3.set(e,new Set),this._destination=new tW(this,t),this._listener=ea(this,e),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(e){let t="function"==typeof e?wrapEventListener(this,e):null;this._nativeContext.onstatechange=t;let s=this._nativeContext.onstatechange;this._onstatechange=null!==s&&s===t?e:s}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}}),createNativeOscillatorNode=(e,t)=>{let s=e.createOscillator();return assignNativeAudioNodeOptions(s,t),assignNativeAudioNodeAudioParamValue(s,t,"detune"),assignNativeAudioNodeAudioParamValue(s,t,"frequency"),void 0!==t.periodicWave?s.setPeriodicWave(t.periodicWave):assignNativeAudioNodeOption(s,t,"type"),tC(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport,()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(e))||wrapAudioScheduledSourceNodeStartMethodNegativeParameters(s),tC(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport,()=>testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(e))||wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(s,e),tC(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport,()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(e))||wrapAudioScheduledSourceNodeStopMethodNegativeParameters(s),addSilentConnection(e,s),s},t4=(eu=tE,ec=()=>{let e=new WeakMap,t=null,s=null,i=null,createOscillatorNode=async(n,o)=>{let r=getNativeAudioNode(n),a=isOwnedByContext(r,o);if(!a){let e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,detune:r.detune.value,frequency:r.frequency.value,periodicWave:null===t?void 0:t,type:r.type};r=createNativeOscillatorNode(o,e),null!==s&&r.start(s),null!==i&&r.stop(i)}return e.set(o,r),a?(await connectAudioParam(o,n.detune,r.detune),await connectAudioParam(o,n.frequency,r.frequency)):(await tG(o,n.detune,r.detune),await tG(o,n.frequency,r.frequency)),await renderInputsOfAudioNode(n,o,r),r};return{set periodicWave(value){t=value},set start(value){s=value},set stop(value){i=value},render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createOscillatorNode(t,s)}}},class extends eu{constructor(e,t){let s=getNativeContext(e),i={...tA,...t},n=createNativeOscillatorNode(s,i),o=isNativeOfflineAudioContext(s),r=o?ec():null,a=e.sampleRate/2;super(e,!1,n,r),this._detune=tL(this,o,n.detune,153600,-153600),this._frequency=tL(this,o,n.frequency,a,-a),this._nativeOscillatorNode=n,this._onended=null,this._oscillatorNodeRenderer=r,null!==this._oscillatorNodeRenderer&&void 0!==i.periodicWave&&(this._oscillatorNodeRenderer.periodicWave=i.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(e){let t="function"==typeof e?wrapEventListener(this,e):null;this._nativeOscillatorNode.onended=t;let s=this._nativeOscillatorNode.onended;this._onended=null!==s&&s===t?e:s}get type(){return this._nativeOscillatorNode.type}set type(e){this._nativeOscillatorNode.type=e,null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(e){this._nativeOscillatorNode.setPeriodicWave(e),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=e)}start(e=0){if(this._nativeOscillatorNode.start(e),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.start=e),"closed"!==this.context.state){setInternalStateToActive(this);let resetInternalStateToPassive=()=>{this._nativeOscillatorNode.removeEventListener("ended",resetInternalStateToPassive),isActiveAudioNode(this)&&setInternalStateToPassive(this)};this._nativeOscillatorNode.addEventListener("ended",resetInternalStateToPassive)}}stop(e=0){this._nativeOscillatorNode.stop(e),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.stop=e)}}),createConnectedNativeAudioBufferSourceNode=(e,t)=>{let s=tB(e,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),i=e.createBuffer(1,2,44100);return s.buffer=i,s.loop=!0,s.connect(t),s.start(),()=>{s.stop(),s.disconnect(t)}},t6=(eh=(e,{curve:t,oversample:s,...i})=>{let n=e.createWaveShaper(),o=e.createWaveShaper();assignNativeAudioNodeOptions(n,i),assignNativeAudioNodeOptions(o,i);let r=createNativeGainNode(e,{...i,gain:1}),a=createNativeGainNode(e,{...i,gain:-1}),l=createNativeGainNode(e,{...i,gain:1}),u=createNativeGainNode(e,{...i,gain:-1}),c=null,h=!1,d=null,p={get bufferSize(){return},get channelCount(){return n.channelCount},set channelCount(value){r.channelCount=value,a.channelCount=value,n.channelCount=value,l.channelCount=value,o.channelCount=value,u.channelCount=value},get channelCountMode(){return n.channelCountMode},set channelCountMode(value){r.channelCountMode=value,a.channelCountMode=value,n.channelCountMode=value,l.channelCountMode=value,o.channelCountMode=value,u.channelCountMode=value},get channelInterpretation(){return n.channelInterpretation},set channelInterpretation(value){r.channelInterpretation=value,a.channelInterpretation=value,n.channelInterpretation=value,l.channelInterpretation=value,o.channelInterpretation=value,u.channelInterpretation=value},get context(){return n.context},get curve(){return d},set curve(value){if(null!==value&&value.length<2)throw createInvalidStateError();if(null===value)n.curve=value,o.curve=value;else{let e=value.length,t=new Float32Array(e+2-e%2),s=new Float32Array(e+2-e%2);t[0]=value[0],s[0]=-value[e-1];let i=Math.ceil((e+1)/2),r=(e+1)/2-1;for(let n=1;n<i;n+=1){let o=n/i*r,a=Math.floor(o),l=Math.ceil(o);t[n]=a===l?value[a]:(1-(o-a))*value[a]+(1-(l-o))*value[l],s[n]=a===l?-value[e-1-a]:-((1-(o-a))*value[e-1-a])-(1-(l-o))*value[e-1-l]}t[i]=e%2==1?value[i-1]:(value[i-2]+value[i-1])/2,n.curve=t,o.curve=s}d=value,h&&(isDCCurve(d)&&null===c?c=createConnectedNativeAudioBufferSourceNode(e,r):null!==c&&(c(),c=null))},get inputs(){return[r]},get numberOfInputs(){return n.numberOfInputs},get numberOfOutputs(){return n.numberOfOutputs},get oversample(){return n.oversample},set oversample(value){n.oversample=value,o.oversample=value},addEventListener:(...e)=>r.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>r.dispatchEvent(e[0]),removeEventListener:(...e)=>r.removeEventListener(e[0],e[1],e[2])};return null!==t&&(p.curve=t instanceof Float32Array?t:new Float32Array(t)),s!==p.oversample&&(p.oversample=s),monitorConnections(interceptConnections(p,l),()=>{r.connect(n).connect(l),r.connect(a).connect(o).connect(u).connect(l),h=!0,isDCCurve(d)&&(c=createConnectedNativeAudioBufferSourceNode(e,r))},()=>{r.disconnect(n),n.disconnect(l),r.disconnect(a),a.disconnect(o),o.disconnect(u),u.disconnect(l),h=!1,null!==c&&(c(),c=null)})},(e,t)=>{let s=e.createWaveShaper();if(null!==tD&&"webkitAudioContext"===tD.name&&void 0===e.createGain().gain.automationRate)return eh(e,t);assignNativeAudioNodeOptions(s,t);let i=null===t.curve||t.curve instanceof Float32Array?t.curve:new Float32Array(t.curve);if(null!==i&&i.length<2)throw createInvalidStateError();assignNativeAudioNodeOption(s,{curve:i},"curve"),assignNativeAudioNodeOption(s,t,"oversample");let n=null,o=!1;return overwriteAccessors(s,"curve",e=>()=>e.call(s),t=>i=>(t.call(s,i),o&&(isDCCurve(i)&&null===n?n=createConnectedNativeAudioBufferSourceNode(e,s):isDCCurve(i)||null===n||(n(),n=null)),i)),monitorConnections(s,()=>{o=!0,isDCCurve(s.curve)&&(n=createConnectedNativeAudioBufferSourceNode(e,s))},()=>{o=!1,null!==n&&(n(),n=null)})}),t5=(ed=(e,{coneInnerAngle:t,coneOuterAngle:s,coneOuterGain:i,distanceModel:n,maxDistance:o,orientationX:r,orientationY:a,orientationZ:l,panningModel:u,positionX:c,positionY:h,positionZ:d,refDistance:p,rolloffFactor:f,...m})=>{let g=e.createPanner();if(m.channelCount>2||"max"===m.channelCountMode)throw createNotSupportedError();assignNativeAudioNodeOptions(g,m);let v={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},y=tU(e,{...v,channelInterpretation:"speakers",numberOfInputs:6}),A=createNativeGainNode(e,{...m,gain:1}),x=createNativeGainNode(e,{...v,gain:1}),S=createNativeGainNode(e,{...v,gain:0}),T=createNativeGainNode(e,{...v,gain:0}),b=createNativeGainNode(e,{...v,gain:0}),w=createNativeGainNode(e,{...v,gain:0}),C=createNativeGainNode(e,{...v,gain:0}),N=createNativeScriptProcessorNode(e,256,6,1),O=t6(e,{...v,curve:new Float32Array([1,1]),oversample:"none"}),k=[r,a,l],M=[c,h,d],D=new Float32Array(1);N.onaudioprocess=({inputBuffer:e})=>{let t=[getFirstSample(e,D,0),getFirstSample(e,D,1),getFirstSample(e,D,2)];t.some((e,t)=>e!==k[t])&&(g.setOrientation(...t),k=t);let s=[getFirstSample(e,D,3),getFirstSample(e,D,4),getFirstSample(e,D,5)];s.some((e,t)=>e!==M[t])&&(g.setPosition(...s),M=s)},Object.defineProperty(S.gain,"defaultValue",{get:()=>0}),Object.defineProperty(T.gain,"defaultValue",{get:()=>0}),Object.defineProperty(b.gain,"defaultValue",{get:()=>0}),Object.defineProperty(w.gain,"defaultValue",{get:()=>0}),Object.defineProperty(C.gain,"defaultValue",{get:()=>0});let F={get bufferSize(){return},get channelCount(){return g.channelCount},set channelCount(value){if(value>2)throw createNotSupportedError();A.channelCount=value,g.channelCount=value},get channelCountMode(){return g.channelCountMode},set channelCountMode(value){if("max"===value)throw createNotSupportedError();A.channelCountMode=value,g.channelCountMode=value},get channelInterpretation(){return g.channelInterpretation},set channelInterpretation(value){A.channelInterpretation=value,g.channelInterpretation=value},get coneInnerAngle(){return g.coneInnerAngle},set coneInnerAngle(value){g.coneInnerAngle=value},get coneOuterAngle(){return g.coneOuterAngle},set coneOuterAngle(value){g.coneOuterAngle=value},get coneOuterGain(){return g.coneOuterGain},set coneOuterGain(value){if(value<0||value>1)throw createInvalidStateError();g.coneOuterGain=value},get context(){return g.context},get distanceModel(){return g.distanceModel},set distanceModel(value){g.distanceModel=value},get inputs(){return[A]},get maxDistance(){return g.maxDistance},set maxDistance(value){if(value<0)throw RangeError();g.maxDistance=value},get numberOfInputs(){return g.numberOfInputs},get numberOfOutputs(){return g.numberOfOutputs},get orientationX(){return x.gain},get orientationY(){return S.gain},get orientationZ(){return T.gain},get panningModel(){return g.panningModel},set panningModel(value){g.panningModel=value},get positionX(){return b.gain},get positionY(){return w.gain},get positionZ(){return C.gain},get refDistance(){return g.refDistance},set refDistance(value){if(value<0)throw RangeError();g.refDistance=value},get rolloffFactor(){return g.rolloffFactor},set rolloffFactor(value){if(value<0)throw RangeError();g.rolloffFactor=value},addEventListener:(...e)=>A.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>A.dispatchEvent(e[0]),removeEventListener:(...e)=>A.removeEventListener(e[0],e[1],e[2])};return t!==F.coneInnerAngle&&(F.coneInnerAngle=t),s!==F.coneOuterAngle&&(F.coneOuterAngle=s),i!==F.coneOuterGain&&(F.coneOuterGain=i),n!==F.distanceModel&&(F.distanceModel=n),o!==F.maxDistance&&(F.maxDistance=o),r!==F.orientationX.value&&(F.orientationX.value=r),a!==F.orientationY.value&&(F.orientationY.value=a),l!==F.orientationZ.value&&(F.orientationZ.value=l),u!==F.panningModel&&(F.panningModel=u),c!==F.positionX.value&&(F.positionX.value=c),h!==F.positionY.value&&(F.positionY.value=h),d!==F.positionZ.value&&(F.positionZ.value=d),p!==F.refDistance&&(F.refDistance=p),f!==F.rolloffFactor&&(F.rolloffFactor=f),(1!==k[0]||0!==k[1]||0!==k[2])&&g.setOrientation(...k),(0!==M[0]||0!==M[1]||0!==M[2])&&g.setPosition(...M),monitorConnections(interceptConnections(F,g),()=>{A.connect(g),connectNativeAudioNodeToNativeAudioNode(A,O,0,0),O.connect(x).connect(y,0,0),O.connect(S).connect(y,0,1),O.connect(T).connect(y,0,2),O.connect(b).connect(y,0,3),O.connect(w).connect(y,0,4),O.connect(C).connect(y,0,5),y.connect(N).connect(e.destination)},()=>{A.disconnect(g),disconnectNativeAudioNodeFromNativeAudioNode(A,O,0,0),O.disconnect(x),x.disconnect(y),O.disconnect(S),S.disconnect(y),O.disconnect(T),T.disconnect(y),O.disconnect(b),b.disconnect(y),O.disconnect(w),w.disconnect(y),O.disconnect(C),C.disconnect(y),y.disconnect(N),N.disconnect(e.destination)})},(e,t)=>{let s=e.createPanner();return void 0===s.orientationX?ed(e,t):(assignNativeAudioNodeOptions(s,t),assignNativeAudioNodeAudioParamValue(s,t,"orientationX"),assignNativeAudioNodeAudioParamValue(s,t,"orientationY"),assignNativeAudioNodeAudioParamValue(s,t,"orientationZ"),assignNativeAudioNodeAudioParamValue(s,t,"positionX"),assignNativeAudioNodeAudioParamValue(s,t,"positionY"),assignNativeAudioNodeAudioParamValue(s,t,"positionZ"),assignNativeAudioNodeOption(s,t,"coneInnerAngle"),assignNativeAudioNodeOption(s,t,"coneOuterAngle"),assignNativeAudioNodeOption(s,t,"coneOuterGain"),assignNativeAudioNodeOption(s,t,"distanceModel"),assignNativeAudioNodeOption(s,t,"maxDistance"),assignNativeAudioNodeOption(s,t,"panningModel"),assignNativeAudioNodeOption(s,t,"refDistance"),assignNativeAudioNodeOption(s,t,"rolloffFactor"),s)}),t9=(ep=tE,ef=()=>{let e=new WeakMap,t=null,createAudioNode=async(s,i)=>{let n=null,o=getNativeAudioNode(s),r={channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation},a={...r,coneInnerAngle:o.coneInnerAngle,coneOuterAngle:o.coneOuterAngle,coneOuterGain:o.coneOuterGain,distanceModel:o.distanceModel,maxDistance:o.maxDistance,panningModel:o.panningModel,refDistance:o.refDistance,rolloffFactor:o.rolloffFactor},l=isOwnedByContext(o,i);if("bufferSize"in o)n=createNativeGainNode(i,{...r,gain:1});else if(!l){let e={...a,orientationX:o.orientationX.value,orientationY:o.orientationY.value,orientationZ:o.orientationZ.value,positionX:o.positionX.value,positionY:o.positionY.value,positionZ:o.positionZ.value};o=t5(i,e)}if(e.set(i,null===n?o:n),null!==n){if(null===t){if(null===tO)throw Error("Missing the native OfflineAudioContext constructor.");let e=new tO(6,s.context.length,i.sampleRate),n=tU(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6});n.connect(e.destination),t=(async()=>{let t=await Promise.all([s.orientationX,s.orientationY,s.orientationZ,s.positionX,s.positionY,s.positionZ].map(async(t,s)=>{let i=tX(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:0===s?1:0});return await tG(e,t,i.offset),i}));for(let e=0;e<6;e+=1)t[e].connect(n,0,e),t[e].start(0);return t0(e)})()}let e=await t,o=createNativeGainNode(i,{...r,gain:1});await renderInputsOfAudioNode(s,i,o);let l=[];for(let t=0;t<e.numberOfChannels;t+=1)l.push(e.getChannelData(t));let u=[l[0][0],l[1][0],l[2][0]],c=[l[3][0],l[4][0],l[5][0]],h=createNativeGainNode(i,{...r,gain:1}),d=t5(i,{...a,orientationX:u[0],orientationY:u[1],orientationZ:u[2],positionX:c[0],positionY:c[1],positionZ:c[2]});o.connect(h).connect(d.inputs[0]),d.connect(n);for(let t=128;t<e.length;t+=128){let e=[l[0][t],l[1][t],l[2][t]],s=[l[3][t],l[4][t],l[5][t]];if(e.some((e,t)=>e!==u[t])||s.some((e,t)=>e!==c[t])){u=e,c=s;let l=t/i.sampleRate;h.gain.setValueAtTime(0,l),h=createNativeGainNode(i,{...r,gain:0}),d=t5(i,{...a,orientationX:u[0],orientationY:u[1],orientationZ:u[2],positionX:c[0],positionY:c[1],positionZ:c[2]}),h.gain.setValueAtTime(1,l),o.connect(h).connect(d.inputs[0]),d.connect(n)}}return n}return l?(await connectAudioParam(i,s.orientationX,o.orientationX),await connectAudioParam(i,s.orientationY,o.orientationY),await connectAudioParam(i,s.orientationZ,o.orientationZ),await connectAudioParam(i,s.positionX,o.positionX),await connectAudioParam(i,s.positionY,o.positionY),await connectAudioParam(i,s.positionZ,o.positionZ)):(await tG(i,s.orientationX,o.orientationX),await tG(i,s.orientationY,o.orientationY),await tG(i,s.orientationZ,o.orientationZ),await tG(i,s.positionX,o.positionX),await tG(i,s.positionY,o.positionY),await tG(i,s.positionZ,o.positionZ)),isNativeAudioNodeFaker(o)?await renderInputsOfAudioNode(s,i,o.inputs[0]):await renderInputsOfAudioNode(s,i,o),o};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createAudioNode(t,s)}}},class extends ep{constructor(e,t){let s=getNativeContext(e),i={...tx,...t},n=t5(s,i),o=isNativeOfflineAudioContext(s),r=o?ef():null;super(e,!1,n,r),this._nativePannerNode=n,this._orientationX=tL(this,o,n.orientationX,34028234663852886e22,-34028234663852886e22),this._orientationY=tL(this,o,n.orientationY,34028234663852886e22,-34028234663852886e22),this._orientationZ=tL(this,o,n.orientationZ,34028234663852886e22,-34028234663852886e22),this._positionX=tL(this,o,n.positionX,34028234663852886e22,-34028234663852886e22),this._positionY=tL(this,o,n.positionY,34028234663852886e22,-34028234663852886e22),this._positionZ=tL(this,o,n.positionZ,34028234663852886e22,-34028234663852886e22),setAudioNodeTailTime(this,1)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(e){this._nativePannerNode.coneInnerAngle=e}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(e){this._nativePannerNode.coneOuterAngle=e}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(e){this._nativePannerNode.coneOuterGain=e}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(e){this._nativePannerNode.distanceModel=e}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(e){this._nativePannerNode.maxDistance=e}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(e){this._nativePannerNode.panningModel=e}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(e){this._nativePannerNode.refDistance=e}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(e){this._nativePannerNode.rolloffFactor=e}}),t7=(em=(e,{disableNormalization:t,imag:s,real:i})=>{let n=s instanceof Float32Array?s:new Float32Array(s),o=i instanceof Float32Array?i:new Float32Array(i),r=e.createPeriodicWave(o,n,{disableNormalization:t});if(Array.from(s).length<2)throw createIndexSizeError();return r},eg=new WeakSet,e_=e=>{let{imag:t,real:s}=e;return void 0===t?void 0===s?{...e,imag:[0,0],real:[0,0]}:{...e,imag:Array.from(s,()=>0),real:s}:void 0===s?{...e,imag:t,real:Array.from(t,()=>0)}:{...e,imag:t,real:s}},class PeriodicWave{constructor(e,t){let s=getNativeContext(e),i=e_({...tS,...t}),n=em(s,i);return eg.add(n),n}static[Symbol.hasInstance](e){return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===PeriodicWave.prototype||eg.has(e)}}),se=((e,t,s,i,n,o)=>{let r=new Float32Array([1,1]),a=Math.PI/2,l={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},u={...l,oversample:"none"},buildInternalGraphForMono=(e,t,n,o)=>{let c=new Float32Array(16385),h=new Float32Array(16385);for(let e=0;e<16385;e+=1){let t=e/16384*a;c[e]=Math.cos(t),h[e]=Math.sin(t)}let d=s(e,{...l,gain:0}),p=i(e,{...u,curve:c}),f=i(e,{...u,curve:r}),m=s(e,{...l,gain:0}),g=i(e,{...u,curve:h});return{connectGraph(){t.connect(d),t.connect(void 0===f.inputs?f:f.inputs[0]),t.connect(m),f.connect(n),n.connect(void 0===p.inputs?p:p.inputs[0]),n.connect(void 0===g.inputs?g:g.inputs[0]),p.connect(d.gain),g.connect(m.gain),d.connect(o,0,0),m.connect(o,0,1)},disconnectGraph(){t.disconnect(d),t.disconnect(void 0===f.inputs?f:f.inputs[0]),t.disconnect(m),f.disconnect(n),n.disconnect(void 0===p.inputs?p:p.inputs[0]),n.disconnect(void 0===g.inputs?g:g.inputs[0]),p.disconnect(d.gain),g.disconnect(m.gain),d.disconnect(o,0,0),m.disconnect(o,0,1)}}},buildInternalGraphForStereo=(e,n,o,c)=>{let h=new Float32Array(16385),d=new Float32Array(16385),p=new Float32Array(16385),f=new Float32Array(16385),m=Math.floor(8192.5);for(let e=0;e<16385;e+=1)if(e>m){let t=(e-m)/(16384-m)*a;h[e]=Math.cos(t),d[e]=Math.sin(t),p[e]=0,f[e]=1}else{let t=e/(16384-m)*a;h[e]=1,d[e]=0,p[e]=Math.cos(t),f[e]=Math.sin(t)}let g=t(e,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),v=s(e,{...l,gain:0}),y=i(e,{...u,curve:h}),A=s(e,{...l,gain:0}),x=i(e,{...u,curve:d}),S=i(e,{...u,curve:r}),T=s(e,{...l,gain:0}),b=i(e,{...u,curve:p}),w=s(e,{...l,gain:0}),C=i(e,{...u,curve:f});return{connectGraph(){n.connect(g),n.connect(void 0===S.inputs?S:S.inputs[0]),g.connect(v,0),g.connect(A,0),g.connect(T,1),g.connect(w,1),S.connect(o),o.connect(void 0===y.inputs?y:y.inputs[0]),o.connect(void 0===x.inputs?x:x.inputs[0]),o.connect(void 0===b.inputs?b:b.inputs[0]),o.connect(void 0===C.inputs?C:C.inputs[0]),y.connect(v.gain),x.connect(A.gain),b.connect(T.gain),C.connect(w.gain),v.connect(c,0,0),T.connect(c,0,0),A.connect(c,0,1),w.connect(c,0,1)},disconnectGraph(){n.disconnect(g),n.disconnect(void 0===S.inputs?S:S.inputs[0]),g.disconnect(v,0),g.disconnect(A,0),g.disconnect(T,1),g.disconnect(w,1),S.disconnect(o),o.disconnect(void 0===y.inputs?y:y.inputs[0]),o.disconnect(void 0===x.inputs?x:x.inputs[0]),o.disconnect(void 0===b.inputs?b:b.inputs[0]),o.disconnect(void 0===C.inputs?C:C.inputs[0]),y.disconnect(v.gain),x.disconnect(A.gain),b.disconnect(T.gain),C.disconnect(w.gain),v.disconnect(c,0,0),T.disconnect(c,0,0),A.disconnect(c,0,1),w.disconnect(c,0,1)}}},buildInternalGraph=(e,t,s,i,o)=>{if(1===t)return buildInternalGraphForMono(e,s,i,o);if(2===t)return buildInternalGraphForStereo(e,s,i,o);throw n()};return(t,{channelCount:i,channelCountMode:r,pan:a,...l})=>{if("max"===r)throw n();let u=e(t,{...l,channelCount:1,channelCountMode:r,numberOfInputs:2}),c=s(t,{...l,channelCount:i,channelCountMode:r,gain:1}),h=s(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:a}),{connectGraph:d,disconnectGraph:p}=buildInternalGraph(t,i,c,h,u);Object.defineProperty(h.gain,"defaultValue",{get:()=>0}),Object.defineProperty(h.gain,"maxValue",{get:()=>1}),Object.defineProperty(h.gain,"minValue",{get:()=>-1});let f=!1;return o(interceptConnections({get bufferSize(){return},get channelCount(){return c.channelCount},set channelCount(value){c.channelCount!==value&&(f&&p(),{connectGraph:d,disconnectGraph:p}=buildInternalGraph(t,value,c,h,u),f&&d()),c.channelCount=value},get channelCountMode(){return c.channelCountMode},set channelCountMode(value){if("clamped-max"===value||"max"===value)throw n();c.channelCountMode=value},get channelInterpretation(){return c.channelInterpretation},set channelInterpretation(value){c.channelInterpretation=value},get context(){return c.context},get inputs(){return[c]},get numberOfInputs(){return c.numberOfInputs},get numberOfOutputs(){return c.numberOfOutputs},get pan(){return h.gain},addEventListener:(...e)=>c.addEventListener(e[0],e[1],e[2]),dispatchEvent:(...e)=>c.dispatchEvent(e[0]),removeEventListener:(...e)=>c.removeEventListener(e[0],e[1],e[2])},u),()=>{d(),f=!0},()=>{p(),f=!1})}})(tU,createNativeChannelSplitterNode,createNativeGainNode,t6,createNotSupportedError,monitorConnections),createNativeStereoPannerNode=(e,t)=>{let s=t.channelCountMode;if("clamped-max"===s)throw createNotSupportedError();if(void 0===e.createStereoPanner)return se(e,t);let i=e.createStereoPanner();return assignNativeAudioNodeOptions(i,t),assignNativeAudioNodeAudioParamValue(i,t,"pan"),Object.defineProperty(i,"channelCountMode",{get:()=>s,set:e=>{if(e!==s)throw createNotSupportedError()}}),i},st=(ev=tE,ey=()=>{let e=new WeakMap,createStereoPannerNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,pan:i.pan.value};i=createNativeStereoPannerNode(s,e)}return e.set(s,i),n?await connectAudioParam(s,t.pan,i.pan):await tG(s,t.pan,i.pan),isNativeAudioNodeFaker(i)?await renderInputsOfAudioNode(t,s,i.inputs[0]):await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createStereoPannerNode(t,s)}}},class extends ev{constructor(e,t){let s=getNativeContext(e),i={...tT,...t},n=createNativeStereoPannerNode(s,i),o=isNativeOfflineAudioContext(s),r=o?ey():null;super(e,!1,n,r),this._pan=tL(this,o,n.pan)}get pan(){return this._pan}}),ss=(eA=tE,ex=()=>{let e=new WeakMap,createWaveShaperNode=async(t,s)=>{let i=getNativeAudioNode(t),n=isOwnedByContext(i,s);if(!n){let e={channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,curve:i.curve,oversample:i.oversample};i=t6(s,e)}return e.set(s,i),isNativeAudioNodeFaker(i)?await renderInputsOfAudioNode(t,s,i.inputs[0]):await renderInputsOfAudioNode(t,s,i),i};return{render(t,s){let i=e.get(s);return void 0!==i?Promise.resolve(i):createWaveShaperNode(t,s)}}},class extends eA{constructor(e,t){let s=getNativeContext(e),i={...tb,...t},n=t6(s,i),o=isNativeOfflineAudioContext(s),r=o?ex():null;super(e,!0,n,r),this._isCurveNullified=!1,this._nativeWaveShaperNode=n,setAudioNodeTailTime(this,1)}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(e){if(null===e)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(e.length<2)throw createInvalidStateError();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=e}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(e){this._nativeWaveShaperNode.oversample=e}}),si=null!==tN&&tN.isSecureContext,exposeCurrentFrameAndCurrentTime=(e,t,s)=>{Object.defineProperties(tN,{currentFrame:{configurable:!0,get:()=>Math.round(e*t)},currentTime:{configurable:!0,get:()=>e}});try{return s()}finally{null!==tN&&(delete tN.currentFrame,delete tN.currentTime)}},sn=new WeakMap,so=si?(eT=e=>new Promise((t,s)=>{if(null===tN){s(SyntaxError());return}let i=tN.document.head;if(null===i)s(SyntaxError());else{let n=tN.document.createElement("script"),o=new Blob([e],{type:"application/javascript"}),r=URL.createObjectURL(o),a=tN.onerror,removeErrorEventListenerAndRevokeUrl=()=>{tN.onerror=a,URL.revokeObjectURL(r)};tN.onerror=(e,t,i,n,o)=>t===r||t===tN.location.href&&1===i&&1===n?(removeErrorEventListenerAndRevokeUrl(),s(o),!1):null!==a?a(e,t,i,n,o):void 0,n.onerror=()=>{removeErrorEventListenerAndRevokeUrl(),s(SyntaxError())},n.onload=()=>{removeErrorEventListenerAndRevokeUrl(),t()},n.src=r,n.type="module",i.appendChild(n)}}),eS=()=>new DOMException("","AbortError"),eb=async e=>{try{let t=await fetch(e);if(t.ok)return[await t.text(),t.url]}catch{}throw eS()},ew=e=>{let t=sn.get(e);if(void 0!==t)return t;if(null===tO)throw Error("Missing the native OfflineAudioContext constructor.");return t=new tO(1,1,44100),sn.set(e,t),t},eC=new WeakMap,eN=new WeakMap,eO=async()=>{if(null===tF)return!0;if(null===tO)return!1;let e=new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),t=new tO(1,128,44100),s=URL.createObjectURL(e),i=!1,n=!1;try{await t.audioWorklet.addModule(s);let e=new tF(t,"a",{numberOfOutputs:0}),o=t.createOscillator();e.port.onmessage=()=>i=!0,e.onprocessorerror=()=>n=!0,o.connect(e),o.start(0),await t.startRendering(),await new Promise(e=>setTimeout(e))}catch{}finally{URL.revokeObjectURL(s)}return i&&!n},n=0,(e,t,s={credentials:"omit"})=>{let i=eN.get(e);if(void 0!==i&&i.has(t))return Promise.resolve();let o=eC.get(e);if(void 0!==o){let e=o.get(t);if(void 0!==e)return e}let r=getNativeContext(e),a=void 0===r.audioWorklet?eb(t).then(([e,t])=>{let[s,i]=splitImportStatements(e,t),n=`${s};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${i}
})})(window,'_AWGS')`;return eT(n)}).then(()=>{let e=tN._AWGS.pop();if(void 0===e)throw SyntaxError();exposeCurrentFrameAndCurrentTime(r.currentTime,r.sampleRate,()=>e(class{},void 0,(e,t)=>{if(""===e.trim())throw createNotSupportedError();let s=tt.get(r);if(void 0!==s){if(s.has(e))throw createNotSupportedError();verifyProcessorCtor(t),verifyParameterDescriptors(t.parameterDescriptors),s.set(e,t)}else verifyProcessorCtor(t),verifyParameterDescriptors(t.parameterDescriptors),tt.set(r,new Map([[e,t]]))},r.sampleRate,void 0,void 0))}):Promise.all([eb(t),Promise.resolve(tC(eO,eO))]).then(([[e,t],i])=>{let o=n+1;n=o;let[a,l]=splitImportStatements(e,t),u=`${a};((AudioWorkletProcessor,registerProcessor)=>{${l}
})(${i?"AudioWorkletProcessor":"class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}"},(n,p)=>registerProcessor(n,class extends p{${i?"":"__c = (a) => a.forEach(e=>this.__b.add(e.buffer));"}process(i,o,p){${i?"":"i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));"}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${o}',class extends AudioWorkletProcessor{process(){return !1}})`,c=new Blob([u],{type:"application/javascript; charset=utf-8"}),h=URL.createObjectURL(c);return r.audioWorklet.addModule(h,s).then(()=>{if(isNativeOfflineAudioContext(r))return r;let e=ew(r);return e.audioWorklet.addModule(h,s).then(()=>e)}).then(e=>{if(null===tF)throw SyntaxError();try{new tF(e,`__sac${o}`)}catch{throw SyntaxError()}}).finally(()=>URL.revokeObjectURL(h))});return void 0===o?eC.set(e,new Map([[t,a]])):o.set(t,a),a.then(()=>{let s=eN.get(e);void 0===s?eN.set(e,new Set([t])):s.add(t)}).finally(()=>{let s=eC.get(e);void 0!==s&&s.delete(t)}),a}):void 0,sr=(ek=()=>new DOMException("","DataCloneError"),eM=()=>new DOMException("","EncodingError"),eD=new WeakSet,eF=e=>isNativeAudioContext(e)||isNativeOfflineAudioContext(e),(e,t)=>{let s=eF(e)?e:getNativeContext(e);if(eD.has(t)){let e=ek();return Promise.reject(e)}try{eD.add(t)}catch{}return tC(testPromiseSupport,()=>testPromiseSupport(s))?s.decodeAudioData(t).then(e=>(detachArrayBuffer(t).catch(()=>{}),tC(testAudioBufferCopyChannelMethodsOutOfBoundsSupport,()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(e))||wrapAudioBufferCopyChannelMethodsOutOfBounds(e),tR.add(e),e)):new Promise((e,i)=>{let complete=async()=>{try{await detachArrayBuffer(t)}catch{}},fail=e=>{i(e),complete()};try{s.decodeAudioData(t,t=>{"function"!=typeof t.copyFromChannel&&(wrapAudioBufferCopyChannelMethods(t),wrapAudioBufferGetChannelDataMethod(t)),tR.add(t),complete().then(()=>e(t))},e=>{null===e?fail(eM()):fail(e)})}catch(e){fail(e)}})}),sa=(eE=t8,class extends eE{constructor(e,t){super(e,t),this._nativeContext=e,this._audioWorklet=void 0===so?void 0:{addModule:(e,t)=>so(this,e,t)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new tP(this)}createBiquadFilter(){return new tz(this)}createBuffer(e,t,s){return new tV({length:t,numberOfChannels:e,sampleRate:s})}createBufferSource(){return new tj(this)}createChannelMerger(e=6){return new tQ(this,{numberOfInputs:e})}createChannelSplitter(e=6){return new tZ(this,{numberOfOutputs:e})}createConstantSource(){return new tY(this)}createConvolver(){return new t$(this)}createDelay(e=1){return new tH(this,{maxDelayTime:e})}createDynamicsCompressor(){return new tJ(this)}createGain(){return new tK(this)}createIIRFilter(e,t){return new t2(this,{feedback:t,feedforward:e})}createOscillator(){return new t4(this)}createPanner(){return new t9(this)}createPeriodicWave(e,t,s={disableNormalization:!1}){return new t7(this,{...s,imag:t,real:e})}createStereoPanner(){return new st(this)}createWaveShaper(){return new ss(this)}decodeAudioData(e,t,s){return sr(this._nativeContext,e).then(e=>("function"==typeof t&&t(e),e),e=>{throw"function"==typeof s&&s(e),e})}}),sl=(eP=tE,eR=(e,t)=>e.createMediaElementSource(t.mediaElement),class extends eP{constructor(e,t){let s=getNativeContext(e),i=eR(s,t);if(isNativeOfflineAudioContext(s))throw TypeError();super(e,!0,i,null),this._nativeMediaElementAudioSourceNode=i}get mediaElement(){return this._nativeMediaElementAudioSourceNode.mediaElement}}),su=(eI=tE,eq=(e,t)=>{let s=e.createMediaStreamDestination();return assignNativeAudioNodeOptions(s,t),1===s.numberOfOutputs&&Object.defineProperty(s,"numberOfOutputs",{get:()=>0}),s},class extends eI{constructor(e,t){let s=getNativeContext(e);if(isNativeOfflineAudioContext(s))throw TypeError();let i={...tv,...t},n=eq(s,i);super(e,!1,n,null),this._nativeMediaStreamAudioDestinationNode=n}get stream(){return this._nativeMediaStreamAudioDestinationNode.stream}}),sc=(eV=tE,eB=(e,{mediaStream:t})=>{let s=t.getAudioTracks();s.sort((e,t)=>e.id<t.id?-1:e.id>t.id?1:0);let i=s.slice(0,1),n=e.createMediaStreamSource(new MediaStream(i));return Object.defineProperty(n,"mediaStream",{value:t}),n},class extends eV{constructor(e,t){let s=getNativeContext(e),i=eB(s,t);if(isNativeOfflineAudioContext(s))throw TypeError();super(e,!0,i,null),this._nativeMediaStreamAudioSourceNode=i}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}}),sh=(eG=tE,eL=(e,{mediaStreamTrack:t})=>{if("function"==typeof e.createMediaStreamTrackSource)return e.createMediaStreamTrackSource(t);let s=new MediaStream([t]),i=e.createMediaStreamSource(s);if("audio"!==t.kind)throw createInvalidStateError();if(isNativeOfflineAudioContext(e))throw TypeError();return i},class extends eG{constructor(e,t){let s=getNativeContext(e),i=eL(s,t);super(e,!0,i,null)}}),sd=(ej=sa,class extends ej{constructor(e={}){let t;if(null===tD)throw Error("Missing the native AudioContext constructor.");try{t=new tD(e)}catch(e){if(12===e.code&&"sampleRate is not in range"===e.message)throw createNotSupportedError();throw e}if(null===t)throw createUnknownError();if(!isValidLatencyHint(e.latencyHint))throw TypeError(`The provided value '${e.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==e.sampleRate&&t.sampleRate!==e.sampleRate)throw createNotSupportedError();super(t,2);let{latencyHint:s}=e,{sampleRate:i}=t;if(this._baseLatency="number"==typeof t.baseLatency?t.baseLatency:"balanced"===s?512/i:"interactive"===s||void 0===s?256/i:"playback"===s?1024/i:128*Math.max(2,Math.min(128,Math.round(s*i/128)))/i,this._nativeAudioContext=t,"webkitAudioContext"===tD.name?(this._nativeGainNode=t.createGain(),this._nativeOscillatorNode=t.createOscillator(),this._nativeGainNode.gain.value=1e-37,this._nativeOscillatorNode.connect(this._nativeGainNode).connect(t.destination),this._nativeOscillatorNode.start()):(this._nativeGainNode=null,this._nativeOscillatorNode=null),this._state=null,"running"===t.state){this._state="suspended";let revokeState=()=>{"suspended"===this._state&&(this._state=null),t.removeEventListener("statechange",revokeState)};t.addEventListener("statechange",revokeState)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then(()=>{throw createInvalidStateError()}):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close().then(()=>{null!==this._nativeGainNode&&null!==this._nativeOscillatorNode&&(this._nativeOscillatorNode.stop(),this._nativeGainNode.disconnect(),this._nativeOscillatorNode.disconnect()),deactivateAudioGraph(this)}))}createMediaElementSource(e){return new sl(this,{mediaElement:e})}createMediaStreamDestination(){return new su(this)}createMediaStreamSource(e){return new sc(this,{mediaStream:e})}createMediaStreamTrackSource(e){return new sh(this,{mediaStreamTrack:e})}resume(){return"suspended"===this._state?new Promise((e,t)=>{let resolvePromise=()=>{this._nativeAudioContext.removeEventListener("statechange",resolvePromise),"running"===this._nativeAudioContext.state?e():this.resume().then(e,t)};this._nativeAudioContext.addEventListener("statechange",resolvePromise)}):this._nativeAudioContext.resume().catch(e=>{if(void 0===e||15===e.code)throw createInvalidStateError();throw e})}suspend(){return this._nativeAudioContext.suspend().catch(e=>{if(void 0===e)throw createInvalidStateError();throw e})}}),getUnrenderedAudioWorkletNodes=e=>{let t=t3.get(e);if(void 0===t)throw Error("The context has no set of AudioWorkletNodes.");return t},connectMultipleOutputs=(e,t,s=0,i=0)=>{let n=e[s];if(void 0===n)throw createIndexSizeError();return isNativeAudioNode(t)?n.connect(t,0,i):n.connect(t,0)},disconnectMultipleOutputs=(e,t,s,i=0)=>void 0===t?e.forEach(e=>e.disconnect()):"number"==typeof t?getOutputAudioNodeAtIndex(createIndexSizeError,e,t).disconnect():isNativeAudioNode(t)?void 0===s?e.forEach(e=>e.disconnect(t)):void 0===i?getOutputAudioNodeAtIndex(createIndexSizeError,e,s).disconnect(t,0):getOutputAudioNodeAtIndex(createIndexSizeError,e,s).disconnect(t,0,i):void 0===s?e.forEach(e=>e.disconnect(t)):getOutputAudioNodeAtIndex(createIndexSizeError,e,s).disconnect(t,0),sp=new WeakMap,sf=(eW=e=>getValueForKey(sp,e),(e,t,s,i)=>{var n,o;if(0===i.numberOfInputs&&0===i.numberOfOutputs)throw createNotSupportedError();let r=Array.isArray(i.outputChannelCount)?i.outputChannelCount:Array.from(i.outputChannelCount);if(r.some(e=>e<1))throw createNotSupportedError();if(r.length!==i.numberOfOutputs)throw createIndexSizeError();if("explicit"!==i.channelCountMode)throw createNotSupportedError();let a=i.channelCount*i.numberOfInputs,l=r.reduce((e,t)=>e+t,0),u=void 0===s.parameterDescriptors?0:s.parameterDescriptors.length;if(a+u>6||l>6)throw createNotSupportedError();let c=new MessageChannel,h=[],d=[];for(let t=0;t<i.numberOfInputs;t+=1)h.push(createNativeGainNode(e,{channelCount:i.channelCount,channelCountMode:i.channelCountMode,channelInterpretation:i.channelInterpretation,gain:1})),d.push(createNativeChannelSplitterNode(e,{channelCount:i.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:i.channelCount}));let p=[];if(void 0!==s.parameterDescriptors)for(let{defaultValue:t,maxValue:n,minValue:o,name:r}of s.parameterDescriptors){let s=tX(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:void 0!==i.parameterData[r]?i.parameterData[r]:void 0===t?0:t});Object.defineProperties(s.offset,{defaultValue:{get:()=>void 0===t?0:t},maxValue:{get:()=>void 0===n?34028234663852886e22:n},minValue:{get:()=>void 0===o?-34028234663852886e22:o}}),p.push(s)}let f=tU(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,a+u)}),m=computeBufferSize(t,e.sampleRate),g=createNativeScriptProcessorNode(e,m,a+u,Math.max(1,l)),v=createNativeChannelSplitterNode(e,{channelCount:Math.max(1,l),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,l)}),y=[];for(let t=0;t<i.numberOfOutputs;t+=1)y.push(tU(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:r[t]}));for(let e=0;e<i.numberOfInputs;e+=1){h[e].connect(d[e]);for(let t=0;t<i.channelCount;t+=1)d[e].connect(f,t,e*i.channelCount+t)}let A=new ReadOnlyMap(void 0===s.parameterDescriptors?[]:s.parameterDescriptors.map(({name:e},t)=>{let s=p[t];return s.connect(f,0,a+t),s.start(0),[e,s.offset]}));f.connect(g);let x=i.channelInterpretation,S=null,T=0===i.numberOfOutputs?[g]:y,b={get bufferSize(){return m},get channelCount(){return i.channelCount},set channelCount(_){throw createInvalidStateError()},get channelCountMode(){return i.channelCountMode},set channelCountMode(_){throw createInvalidStateError()},get channelInterpretation(){return x},set channelInterpretation(value){for(let e of h)e.channelInterpretation=value;x=value},get context(){return g.context},get inputs(){return h},get numberOfInputs(){return i.numberOfInputs},get numberOfOutputs(){return i.numberOfOutputs},get onprocessorerror(){return S},set onprocessorerror(value){"function"==typeof S&&b.removeEventListener("processorerror",S),"function"==typeof(S="function"==typeof value?value:null)&&b.addEventListener("processorerror",S)},get parameters(){return A},get port(){return c.port2},addEventListener:(...e)=>g.addEventListener(e[0],e[1],e[2]),connect:connectMultipleOutputs.bind(null,T),disconnect:disconnectMultipleOutputs.bind(null,T),dispatchEvent:(...e)=>g.dispatchEvent(e[0]),removeEventListener:(...e)=>g.removeEventListener(e[0],e[1],e[2])},w=new Map;c.port1.addEventListener=(n=c.port1.addEventListener,(...t)=>{if("message"===t[0]){let s="function"==typeof t[1]?t[1]:"object"==typeof t[1]&&null!==t[1]&&"function"==typeof t[1].handleEvent?t[1].handleEvent:null;if(null!==s){let i=w.get(t[1]);void 0!==i?t[1]=i:(t[1]=t=>{exposeCurrentFrameAndCurrentTime(e.currentTime,e.sampleRate,()=>s(t))},w.set(s,t[1]))}}return n.call(c.port1,t[0],t[1],t[2])}),c.port1.removeEventListener=(o=c.port1.removeEventListener,(...e)=>{if("message"===e[0]){let t=w.get(e[1]);void 0!==t&&(w.delete(e[1]),e[1]=t)}return o.call(c.port1,e[0],e[1],e[2])});let C=null;Object.defineProperty(c.port1,"onmessage",{get:()=>C,set:e=>{"function"==typeof C&&c.port1.removeEventListener("message",C),"function"==typeof(C="function"==typeof e?e:null)&&(c.port1.addEventListener("message",C),c.port1.start())}}),s.prototype.port=c.port1;let N=null,O=createAudioWorkletProcessor(e,b,s,i);O.then(e=>N=e);let k=createNestedArrays(i.numberOfInputs,i.channelCount),M=createNestedArrays(i.numberOfOutputs,r),D=void 0===s.parameterDescriptors?[]:s.parameterDescriptors.reduce((e,{name:t})=>({...e,[t]:new Float32Array(128)}),{}),F=!0,disconnectOutputsGraph=()=>{i.numberOfOutputs>0&&g.disconnect(v);for(let e=0,t=0;e<i.numberOfOutputs;e+=1){let s=y[e];for(let i=0;i<r[e];i+=1)v.disconnect(s,t+i,i);t+=r[e]}},E=new Map;g.onaudioprocess=({inputBuffer:t,outputBuffer:n})=>{if(null!==N){let o=eW(b);for(let l=0;l<m;l+=128){for(let e=0;e<i.numberOfInputs;e+=1)for(let s=0;s<i.channelCount;s+=1)copyFromChannel(t,k[e],s,s,l);void 0!==s.parameterDescriptors&&s.parameterDescriptors.forEach(({name:e},s)=>{copyFromChannel(t,D,e,a+s,l)});for(let e=0;e<i.numberOfInputs;e+=1)for(let t=0;t<r[e];t+=1)0===M[e][t].byteLength&&(M[e][t]=new Float32Array(128));try{let t=k.map((e,t)=>{let s=o[t];if(s.size>0)return E.set(t,m/128),e;let i=E.get(t);return void 0===i?[]:(e.every(e=>e.every(e=>0===e))&&(1===i?E.delete(t):E.set(t,i-1)),e)}),s=exposeCurrentFrameAndCurrentTime(e.currentTime+l/e.sampleRate,e.sampleRate,()=>N.process(t,M,D));F=s;for(let e=0,t=0;e<i.numberOfOutputs;e+=1){for(let s=0;s<r[e];s+=1)copyToChannel(n,M[e],s,t+s,l);t+=r[e]}}catch(e){F=!1,b.dispatchEvent(new ErrorEvent("processorerror",{colno:e.colno,filename:e.filename,lineno:e.lineno,message:e.message}))}if(!F){for(let e=0;e<i.numberOfInputs;e+=1){h[e].disconnect(d[e]);for(let t=0;t<i.channelCount;t+=1)d[l].disconnect(f,t,e*i.channelCount+t)}if(void 0!==s.parameterDescriptors){let e=s.parameterDescriptors.length;for(let t=0;t<e;t+=1){let e=p[t];e.disconnect(f,0,a+t),e.stop()}}f.disconnect(g),g.onaudioprocess=null,P?disconnectOutputsGraph():disconnectFakeGraph();break}}}};let P=!1,R=createNativeGainNode(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0}),connectFakeGraph=()=>g.connect(R).connect(e.destination),disconnectFakeGraph=()=>{g.disconnect(R),R.disconnect()};return connectFakeGraph(),monitorConnections(b,()=>{if(F){disconnectFakeGraph(),i.numberOfOutputs>0&&g.connect(v);for(let e=0,t=0;e<i.numberOfOutputs;e+=1){let s=y[e];for(let i=0;i<r[e];i+=1)v.connect(s,t+i,i);t+=r[e]}}P=!0},()=>{F&&(connectFakeGraph(),disconnectOutputsGraph()),P=!1})}),sm=(ez=(e,t)=>{getUnrenderedAudioWorkletNodes(e).delete(t)},(e,t,s)=>{let i=new WeakMap,n=null,createAudioNode=async(o,r)=>{let a=getNativeAudioNode(o),l=null,u=isOwnedByContext(a,r),c=Array.isArray(t.outputChannelCount)?t.outputChannelCount:Array.from(t.outputChannelCount);if(null===tF){let e=c.reduce((e,t)=>e+t,0),s=createNativeChannelSplitterNode(r,{channelCount:Math.max(1,e),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,e)}),i=[];for(let e=0;e<o.numberOfOutputs;e+=1)i.push(tU(r,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:c[e]}));let n=createNativeGainNode(r,{channelCount:t.channelCount,channelCountMode:t.channelCountMode,channelInterpretation:t.channelInterpretation,gain:1});n.connect=connectMultipleOutputs.bind(null,i),n.disconnect=disconnectMultipleOutputs.bind(null,i),l=[s,i,n]}else u||(a=new tF(r,e));if(i.set(r,null===l?a:l[2]),null!==l){if(null===n){if(void 0===s)throw Error("Missing the processor constructor.");if(null===tO)throw Error("Missing the native OfflineAudioContext constructor.");let e=o.channelCount*o.numberOfInputs,i=void 0===s.parameterDescriptors?0:s.parameterDescriptors.length,a=e+i,renderBuffer=async()=>{let s=new tO(a,128*Math.ceil(o.context.length/128),r.sampleRate),n=[],l=[];for(let e=0;e<t.numberOfInputs;e+=1)n.push(createNativeGainNode(s,{channelCount:t.channelCount,channelCountMode:t.channelCountMode,channelInterpretation:t.channelInterpretation,gain:1})),l.push(createNativeChannelSplitterNode(s,{channelCount:t.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:t.channelCount}));let u=await Promise.all(Array.from(o.parameters.values()).map(async e=>{let t=tX(s,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:e.value});return await tG(s,e,t.offset),t})),c=tU(s,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,e+i)});for(let e=0;e<t.numberOfInputs;e+=1){n[e].connect(l[e]);for(let s=0;s<t.channelCount;s+=1)l[e].connect(c,s,e*t.channelCount+s)}for(let[t,s]of u.entries())s.connect(c,0,e+t),s.start(0);return c.connect(s.destination),await Promise.all(n.map(e=>renderInputsOfAudioNode(o,s,e))),t0(s)};n=processBuffer(o,0===a?null:await renderBuffer(),r,t,c,s,exposeCurrentFrameAndCurrentTime)}let e=await n,i=tB(r,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),[a,u,h]=l;null!==e&&(i.buffer=e,i.start(0)),i.connect(a);for(let e=0,t=0;e<o.numberOfOutputs;e+=1){let s=u[e];for(let i=0;i<c[e];i+=1)a.connect(s,t+i,i);t+=c[e]}return h}if(u)for(let[e,t]of o.parameters.entries())await connectAudioParam(r,t,a.parameters.get(e));else for(let[e,t]of o.parameters.entries())await tG(r,t,a.parameters.get(e));return await renderInputsOfAudioNode(o,r,a),a};return{render(e,t){ez(t,e);let s=i.get(t);return void 0!==s?Promise.resolve(s):createAudioNode(e,t)}}}),sg=si?(eU=(e,t)=>{getUnrenderedAudioWorkletNodes(e).add(t)},eQ=tE,eZ=(e,t,s,i,n,o)=>{if(null!==s)try{var r,a;let t=new s(e,i,o),n=new Map,l=null;if(Object.defineProperties(t,{channelCount:{get:()=>o.channelCount,set:()=>{throw createInvalidStateError()}},channelCountMode:{get:()=>"explicit",set:()=>{throw createInvalidStateError()}},onprocessorerror:{get:()=>l,set:e=>{"function"==typeof l&&t.removeEventListener("processorerror",l),l="function"==typeof e?e:null,"function"==typeof l&&t.addEventListener("processorerror",l)}}}),t.addEventListener=(r=t.addEventListener,(...e)=>{if("processorerror"===e[0]){let t="function"==typeof e[1]?e[1]:"object"==typeof e[1]&&null!==e[1]&&"function"==typeof e[1].handleEvent?e[1].handleEvent:null;if(null!==t){let s=n.get(e[1]);void 0!==s?e[1]=s:(e[1]=s=>{"error"===s.type?(Object.defineProperties(s,{type:{value:"processorerror"}}),t(s)):t(new ErrorEvent(e[0],{...s}))},n.set(t,e[1]))}}return r.call(t,"error",e[1],e[2]),r.call(t,...e)}),t.removeEventListener=(a=t.removeEventListener,(...e)=>{if("processorerror"===e[0]){let t=n.get(e[1]);void 0!==t&&(n.delete(e[1]),e[1]=t)}return a.call(t,"error",e[1],e[2]),a.call(t,e[0],e[1],e[2])}),0!==o.numberOfOutputs){let s=createNativeGainNode(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return t.connect(s).connect(e.destination),monitorConnections(t,()=>s.disconnect(),()=>s.connect(e.destination))}return t}catch(e){if(11===e.code)throw createNotSupportedError();throw e}if(void 0===n)throw createNotSupportedError();return testClonabilityOfAudioWorkletNodeOptions(o),sf(e,t,n,o)},eX=e=>sn.get(e),eY=e=>({...e,outputChannelCount:void 0!==e.outputChannelCount?e.outputChannelCount:1===e.numberOfInputs&&1===e.numberOfOutputs?[e.channelCount]:Array.from({length:e.numberOfOutputs},()=>1)}),e$=(e,t)=>{sp.set(e,t)},eH=e=>{let{port1:t,port2:s}=new MessageChannel;try{t.postMessage(e)}finally{t.close(),s.close()}},class extends eQ{constructor(e,t,s){var i;let n=getNativeContext(e),o=isNativeOfflineAudioContext(n),r=eY({...tl,...s});eH(r);let a=tt.get(n),l=null==a?void 0:a.get(t),u=o||"closed"!==n.state?n:null!==(i=eX(n))&&void 0!==i?i:n,c=eZ(u,o?null:e.baseLatency,tF,t,l,r),h=o?sm(t,r,l):null;super(e,!0,c,h);let d=[];c.parameters.forEach((e,t)=>{let s=tL(this,o,e);d.push([t,s])}),this._nativeAudioWorkletNode=c,this._onprocessorerror=null,this._parameters=new ReadOnlyMap(d),o&&eU(n,this);let{activeInputs:p}=getAudioNodeConnections(this);e$(c,p)}get onprocessorerror(){return this._onprocessorerror}set onprocessorerror(e){let t="function"==typeof e?wrapEventListener(this,e):null;this._nativeAudioWorkletNode.onprocessorerror=t;let s=this._nativeAudioWorkletNode.onprocessorerror;this._onprocessorerror=null!==s&&s===t?e:s}get parameters(){return null===this._parameters?this._nativeAudioWorkletNode.parameters:this._parameters}get port(){return this._nativeAudioWorkletNode.port}}):void 0,createNativeOfflineAudioContext=(e,t,s)=>{if(null===tO)throw Error("Missing the native OfflineAudioContext constructor.");try{return new tO(e,t,s)}catch(e){if("SyntaxError"===e.name)throw createNotSupportedError();throw e}},startRendering=(e,t)=>getAudioNodeRenderer(e).render(e,t).then(()=>Promise.all(Array.from(getUnrenderedAudioWorkletNodes(t)).map(e=>getAudioNodeRenderer(e).render(e,t)))).then(()=>t0(t)).then(e=>("function"!=typeof e.copyFromChannel?(wrapAudioBufferCopyChannelMethods(e),wrapAudioBufferGetChannelDataMethod(e)):tC(testAudioBufferCopyChannelMethodsOutOfBoundsSupport,()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(e))||wrapAudioBufferCopyChannelMethodsOutOfBounds(e),tR.add(e),e)),s_=(eJ=sa,class extends eJ{constructor(e,t,s){let i;if("number"==typeof e&&void 0!==t&&void 0!==s)i={length:t,numberOfChannels:e,sampleRate:s};else if("object"==typeof e)i=e;else throw Error("The given parameters are not valid.");let{length:n,numberOfChannels:o,sampleRate:r}={...ty,...i},a=createNativeOfflineAudioContext(o,n,r);tC(testPromiseSupport,()=>testPromiseSupport(a))||a.addEventListener("statechange",(()=>{let e=0,delayStateChangeEvent=t=>{"running"===this._state&&(e>0?(a.removeEventListener("statechange",delayStateChangeEvent),t.stopImmediatePropagation(),this._waitForThePromiseToSettle(t)):e+=1)};return delayStateChangeEvent})()),super(a,o),this._length=n,this._nativeOfflineAudioContext=a,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(createInvalidStateError()):(this._state="running",startRendering(this.destination,this._nativeOfflineAudioContext).finally(()=>{this._state=null,deactivateAudioGraph(this)}))}_waitForThePromiseToSettle(e){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(e):setTimeout(()=>this._waitForThePromiseToSettle(e))}}),isAnyAudioContext=e=>{let t=e9.get(e);return isNativeAudioContext(t)||isNativeAudioContext(e)},isAnyAudioNode=e=>e4.has(e)||module_isNativeAudioNode(e),isAnyAudioParam=e=>e5.has(e)||isNativeAudioParam(e),isAnyOfflineAudioContext=e=>{let t=e9.get(e);return isNativeOfflineAudioContext(t)||isNativeOfflineAudioContext(e)},isSupported=()=>createIsSupportedPromise(tC,createTestAudioBufferCopyChannelMethodsSubarraySupport(tO),createTestAudioContextCloseMethodSupport(tD),createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(tO),createTestAudioContextOptionsSupport(tD),createTestAudioNodeConnectMethodSupport(tO),createTestAudioWorkletProcessorNoOutputsSupport(tF,tO),createTestChannelMergerNodeChannelCountSupport(tO),createTestConstantSourceNodeAccurateSchedulingSupport(tO),createTestConvolverNodeBufferReassignabilitySupport(tO),createTestConvolverNodeChannelCountSupport(tO),testDomExceptionConstructorSupport,createTestIsSecureContextSupport(tN),createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(tD),createTestStereoPannerNodeDefaultValueSupport(tO),testTransferablesSupport);function assert(e,t){if(!e)throw Error(t)}function assertRange(e,t,s=1/0){if(!(t<=e&&e<=s))throw RangeError(`Value must be within [${t}, ${s}], got: ${e}`)}function assertContextRunning(e){e.isOffline||"running"===e.state||warn('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.')}let sv=console;function setLogger(e){sv=e}function log(...e){sv.log(...e)}function warn(...e){sv.warn(...e)}function isUndef(e){return void 0===e}function isDefined(e){return!isUndef(e)}function isFunction(e){return"function"==typeof e}function isNumber(e){return"number"==typeof e}function isObject(e){return"[object Object]"===Object.prototype.toString.call(e)&&e.constructor===Object}function isBoolean(e){return"boolean"==typeof e}function isArray(e){return Array.isArray(e)}function isString(e){return"string"==typeof e}function isNote(e){return isString(e)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(e)}let sy="object"==typeof self?self:null,sA=sy&&(sy.hasOwnProperty("AudioContext")||sy.hasOwnProperty("webkitAudioContext"));var sx=s(7582);let Ticker=class Ticker{constructor(e,t,s){this._callback=e,this._type=t,this._updateInterval=s,this._createClock()}_createWorker(){let e=new Blob([`
			// the initial timeout time
			let timeoutTime =  ${(1e3*this._updateInterval).toFixed(1)};
			// onmessage callback
			self.onmessage = function(msg){
				timeoutTime = parseInt(msg.data);
			};
			// the tick function which posts a message
			// and schedules a new tick
			function tick(){
				setTimeout(tick, timeoutTime);
				self.postMessage('tick');
			}
			// call tick initially
			tick();
			`],{type:"text/javascript"}),t=URL.createObjectURL(e),s=new Worker(t);s.onmessage=this._callback.bind(this),this._worker=s}_createTimeout(){this._timeout=setTimeout(()=>{this._createTimeout(),this._callback()},1e3*this._updateInterval)}_createClock(){if("worker"===this._type)try{this._createWorker()}catch(e){this._type="timeout",this._createClock()}else"timeout"===this._type&&this._createTimeout()}_disposeClock(){this._timeout&&(clearTimeout(this._timeout),this._timeout=0),this._worker&&(this._worker.terminate(),this._worker.onmessage=null)}get updateInterval(){return this._updateInterval}set updateInterval(e){this._updateInterval=Math.max(e,128/44100),"worker"===this._type&&this._worker.postMessage(Math.max(1e3*e,1))}get type(){return this._type}set type(e){this._disposeClock(),this._type=e,this._createClock()}dispose(){this._disposeClock()}};function isAudioBuffer(e){return e instanceof AudioBuffer}function deepMerge(e,...t){if(!t.length)return e;let s=t.shift();if(isObject(e)&&isObject(s))for(let t in s){var i;(i=s[t],"value"===t||isAnyAudioParam(i)||isAnyAudioNode(i)||isAudioBuffer(i))?e[t]=s[t]:isObject(s[t])?(e[t]||Object.assign(e,{[t]:{}}),deepMerge(e[t],s[t])):Object.assign(e,{[t]:s[t]})}return deepMerge(e,...t)}function optionsFromArguments(e,t,s=[],i){let n={},o=Array.from(t);if(isObject(o[0])&&i&&!Reflect.has(o[0],i)){let t=Object.keys(o[0]).some(t=>Reflect.has(e,t));t||(deepMerge(n,{[i]:o[0]}),s.splice(s.indexOf(i),1),o.shift())}if(1===o.length&&isObject(o[0]))deepMerge(n,o[0]);else for(let e=0;e<s.length;e++)isDefined(o[e])&&(n[s[e]]=o[e]);return deepMerge(e,n)}function defaultArg(e,t){return isUndef(e)?t:e}function omitFromObject(e,t){return t.forEach(t=>{Reflect.has(e,t)&&delete e[t]}),e}/**
 * Tone.js
 * @author Yotam Mann
 * @license http://opensource.org/licenses/MIT MIT License
 * @copyright 2014-2019 Yotam Mann
 */let Tone=class Tone{constructor(){this.debug=!1,this._wasDisposed=!1}static getDefaults(){return{}}log(...e){(this.debug||sy&&this.toString()===sy.TONE_DEBUG_CLASS)&&log(this,...e)}dispose(){return this._wasDisposed=!0,this}get disposed(){return this._wasDisposed}toString(){return this.name}};function GT(e,t){return e>t+1e-6}function GTE(e,t){return GT(e,t)||EQ(e,t)}function EQ(e,t){return 1e-6>Math.abs(e-t)}function clamp(e,t,s){return Math.max(Math.min(e,s),t)}Tone.version=e1;let Timeline=class Timeline extends Tone{constructor(){super(),this.name="Timeline",this._timeline=[];let e=optionsFromArguments(Timeline.getDefaults(),arguments,["memory"]);this.memory=e.memory,this.increasing=e.increasing}static getDefaults(){return{memory:1/0,increasing:!1}}get length(){return this._timeline.length}add(e){if(assert(Reflect.has(e,"time"),"Timeline: events must have a time attribute"),e.time=e.time.valueOf(),this.increasing&&this.length){let t=this._timeline[this.length-1];assert(GTE(e.time,t.time),"The time must be greater than or equal to the last scheduled time"),this._timeline.push(e)}else{let t=this._search(e.time);this._timeline.splice(t+1,0,e)}if(this.length>this.memory){let e=this.length-this.memory;this._timeline.splice(0,e)}return this}remove(e){let t=this._timeline.indexOf(e);return -1!==t&&this._timeline.splice(t,1),this}get(e,t="time"){let s=this._search(e,t);return -1!==s?this._timeline[s]:null}peek(){return this._timeline[0]}shift(){return this._timeline.shift()}getAfter(e,t="time"){let s=this._search(e,t);return s+1<this._timeline.length?this._timeline[s+1]:null}getBefore(e){let t=this._timeline.length;if(t>0&&this._timeline[t-1].time<e)return this._timeline[t-1];let s=this._search(e);return s-1>=0?this._timeline[s-1]:null}cancel(e){if(this._timeline.length>1){let t=this._search(e);if(t>=0){if(EQ(this._timeline[t].time,e)){for(let s=t;s>=0;s--)if(EQ(this._timeline[s].time,e))t=s;else break;this._timeline=this._timeline.slice(0,t)}else this._timeline=this._timeline.slice(0,t+1)}else this._timeline=[]}else 1===this._timeline.length&&GTE(this._timeline[0].time,e)&&(this._timeline=[]);return this}cancelBefore(e){let t=this._search(e);return t>=0&&(this._timeline=this._timeline.slice(t+1)),this}previousEvent(e){let t=this._timeline.indexOf(e);return t>0?this._timeline[t-1]:null}_search(e,t="time"){if(0===this._timeline.length)return -1;let s=0,i=this._timeline.length,n=i;if(i>0&&this._timeline[i-1][t]<=e)return i-1;for(;s<n;){let i=Math.floor(s+(n-s)/2),o=this._timeline[i],r=this._timeline[i+1];if(EQ(o[t],e)){for(let s=i;s<this._timeline.length;s++){let n=this._timeline[s];if(EQ(n[t],e))i=s;else break}return i}if(o[t]+1e-6<e&&GT(r[t],e))return i;GT(o[t],e)?n=i:s=i+1}return -1}_iterate(e,t=0,s=this._timeline.length-1){this._timeline.slice(t,s+1).forEach(e)}forEach(e){return this._iterate(e),this}forEachBefore(e,t){let s=this._search(e);return -1!==s&&this._iterate(t,0,s),this}forEachAfter(e,t){let s=this._search(e);return this._iterate(t,s+1),this}forEachBetween(e,t,s){let i=this._search(e),n=this._search(t);return -1!==i&&-1!==n?(this._timeline[i].time!==e&&(i+=1),this._timeline[n].time===t&&(n-=1),this._iterate(s,i,n)):-1===i&&this._iterate(s,0,n),this}forEachFrom(e,t){let s=this._search(e);for(;s>=0&&this._timeline[s].time>=e;)s--;return this._iterate(t,s+1),this}forEachAtTime(e,t){let s=this._search(e);if(-1!==s&&EQ(this._timeline[s].time,e)){let i=s;for(let t=s;t>=0;t--)if(EQ(this._timeline[t].time,e))i=t;else break;this._iterate(e=>{t(e)},i,s)}return this}dispose(){return super.dispose(),this._timeline=[],this}};let sS=[];function onContextInit(e){sS.push(e)}let sT=[];function onContextClose(e){sT.push(e)}let Emitter=class Emitter extends Tone{constructor(){super(...arguments),this.name="Emitter"}on(e,t){let s=e.split(/\W+/);return s.forEach(e=>{isUndef(this._events)&&(this._events={}),this._events.hasOwnProperty(e)||(this._events[e]=[]),this._events[e].push(t)}),this}once(e,t){let boundCallback=(...s)=>{t(...s),this.off(e,boundCallback)};return this.on(e,boundCallback),this}off(e,t){let s=e.split(/\W+/);return s.forEach(s=>{if(isUndef(this._events)&&(this._events={}),this._events.hasOwnProperty(e)){if(isUndef(t))this._events[e]=[];else{let s=this._events[e];for(let e=s.length-1;e>=0;e--)s[e]===t&&s.splice(e,1)}}}),this}emit(e,...t){if(this._events&&this._events.hasOwnProperty(e)){let s=this._events[e].slice(0);for(let e=0,i=s.length;e<i;e++)s[e].apply(this,t)}return this}static mixin(e){["on","once","off","emit"].forEach(t=>{let s=Object.getOwnPropertyDescriptor(Emitter.prototype,t);Object.defineProperty(e.prototype,t,s)})}dispose(){return super.dispose(),this._events=void 0,this}};let BaseContext=class BaseContext extends Emitter{constructor(){super(...arguments),this.isOffline=!1}toJSON(){return{}}};let Context=class Context extends BaseContext{constructor(){super(),this.name="Context",this._constants=new Map,this._timeouts=new Timeline,this._timeoutIds=0,this._initialized=!1,this.isOffline=!1,this._workletModules=new Map;let e=optionsFromArguments(Context.getDefaults(),arguments,["context"]);if(e.context)this._context=e.context;else{var t;this._context=(t={latencyHint:e.latencyHint},new sd(t))}this._ticker=new Ticker(this.emit.bind(this,"tick"),e.clockSource,e.updateInterval),this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=()=>{this.emit("statechange",this.state)},this._setLatencyHint(e.latencyHint),this.lookAhead=e.lookAhead}static getDefaults(){return{clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.05}}initialize(){if(!this._initialized){var e;e=this,sS.forEach(t=>t(e)),this._initialized=!0}return this}createAnalyser(){return this._context.createAnalyser()}createOscillator(){return this._context.createOscillator()}createBufferSource(){return this._context.createBufferSource()}createBiquadFilter(){return this._context.createBiquadFilter()}createBuffer(e,t,s){return this._context.createBuffer(e,t,s)}createChannelMerger(e){return this._context.createChannelMerger(e)}createChannelSplitter(e){return this._context.createChannelSplitter(e)}createConstantSource(){return this._context.createConstantSource()}createConvolver(){return this._context.createConvolver()}createDelay(e){return this._context.createDelay(e)}createDynamicsCompressor(){return this._context.createDynamicsCompressor()}createGain(){return this._context.createGain()}createIIRFilter(e,t){return this._context.createIIRFilter(e,t)}createPanner(){return this._context.createPanner()}createPeriodicWave(e,t,s){return this._context.createPeriodicWave(e,t,s)}createStereoPanner(){return this._context.createStereoPanner()}createWaveShaper(){return this._context.createWaveShaper()}createMediaStreamSource(e){assert(isAnyAudioContext(this._context),"Not available if OfflineAudioContext");let t=this._context;return t.createMediaStreamSource(e)}createMediaElementSource(e){assert(isAnyAudioContext(this._context),"Not available if OfflineAudioContext");let t=this._context;return t.createMediaElementSource(e)}createMediaStreamDestination(){assert(isAnyAudioContext(this._context),"Not available if OfflineAudioContext");let e=this._context;return e.createMediaStreamDestination()}decodeAudioData(e){return this._context.decodeAudioData(e)}get currentTime(){return this._context.currentTime}get state(){return this._context.state}get sampleRate(){return this._context.sampleRate}get listener(){return this.initialize(),this._listener}set listener(e){assert(!this._initialized,"The listener cannot be set after initialization."),this._listener=e}get transport(){return this.initialize(),this._transport}set transport(e){assert(!this._initialized,"The transport cannot be set after initialization."),this._transport=e}get draw(){return this.initialize(),this._draw}set draw(e){assert(!this._initialized,"Draw cannot be set after initialization."),this._draw=e}get destination(){return this.initialize(),this._destination}set destination(e){assert(!this._initialized,"The destination cannot be set after initialization."),this._destination=e}createAudioWorkletNode(e,t){var s;return s=this.rawContext,assert(isDefined(sg),"This node only works in a secure context (https or localhost)"),new sg(s,e,t)}addAudioWorkletModule(e,t){return(0,sx.mG)(this,void 0,void 0,function*(){assert(isDefined(this.rawContext.audioWorklet),"AudioWorkletNode is only available in a secure context (https or localhost)"),this._workletModules.has(t)||this._workletModules.set(t,this.rawContext.audioWorklet.addModule(e)),yield this._workletModules.get(t)})}workletsAreReady(){return(0,sx.mG)(this,void 0,void 0,function*(){let e=[];this._workletModules.forEach(t=>e.push(t)),yield Promise.all(e)})}get updateInterval(){return this._ticker.updateInterval}set updateInterval(e){this._ticker.updateInterval=e}get clockSource(){return this._ticker.type}set clockSource(e){this._ticker.type=e}get latencyHint(){return this._latencyHint}_setLatencyHint(e){let t=0;if(this._latencyHint=e,isString(e))switch(e){case"interactive":t=.1;break;case"playback":t=.5;break;case"balanced":t=.25}this.lookAhead=t,this.updateInterval=t/2}get rawContext(){return this._context}now(){return this._context.currentTime+this.lookAhead}immediate(){return this._context.currentTime}resume(){return isAnyAudioContext(this._context)?this._context.resume():Promise.resolve()}close(){return(0,sx.mG)(this,void 0,void 0,function*(){if(isAnyAudioContext(this._context)&&(yield this._context.close()),this._initialized){var e;e=this,sT.forEach(t=>t(e))}})}getConstant(e){if(this._constants.has(e))return this._constants.get(e);{let t=this._context.createBuffer(1,128,this._context.sampleRate),s=t.getChannelData(0);for(let t=0;t<s.length;t++)s[t]=e;let i=this._context.createBufferSource();return i.channelCount=1,i.channelCountMode="explicit",i.buffer=t,i.loop=!0,i.start(0),this._constants.set(e,i),i}}dispose(){return super.dispose(),this._ticker.dispose(),this._timeouts.dispose(),Object.keys(this._constants).map(e=>this._constants[e].disconnect()),this}_timeoutLoop(){let e=this.now(),t=this._timeouts.peek();for(;this._timeouts.length&&t&&t.time<=e;)t.callback(),this._timeouts.shift(),t=this._timeouts.peek()}setTimeout(e,t){this._timeoutIds++;let s=this.now();return this._timeouts.add({callback:e,id:this._timeoutIds,time:s+t}),this._timeoutIds}clearTimeout(e){return this._timeouts.forEach(t=>{t.id===e&&this._timeouts.remove(t)}),this}clearInterval(e){return this.clearTimeout(e)}setInterval(e,t){let s=++this._timeoutIds,intervalFn=()=>{let i=this.now();this._timeouts.add({callback:()=>{e(),intervalFn()},id:s,time:i+t})};return intervalFn(),s}};function readOnly(e,t){isArray(t)?t.forEach(t=>readOnly(e,t)):Object.defineProperty(e,t,{enumerable:!0,writable:!1})}function writable(e,t){isArray(t)?t.forEach(t=>writable(e,t)):Object.defineProperty(e,t,{writable:!0})}let noOp=()=>{};let ToneAudioBuffer=class ToneAudioBuffer extends Tone{constructor(){super(),this.name="ToneAudioBuffer",this.onload=noOp;let e=optionsFromArguments(ToneAudioBuffer.getDefaults(),arguments,["url","onload","onerror"]);this.reverse=e.reverse,this.onload=e.onload,e.url&&isAudioBuffer(e.url)||e.url instanceof ToneAudioBuffer?this.set(e.url):isString(e.url)&&this.load(e.url).catch(e.onerror)}static getDefaults(){return{onerror:noOp,onload:noOp,reverse:!1}}get sampleRate(){return this._buffer?this._buffer.sampleRate:getContext().sampleRate}set(e){return e instanceof ToneAudioBuffer?e.loaded?this._buffer=e.get():e.onload=()=>{this.set(e),this.onload(this)}:this._buffer=e,this._reversed&&this._reverse(),this}get(){return this._buffer}load(e){return(0,sx.mG)(this,void 0,void 0,function*(){let t=ToneAudioBuffer.load(e).then(e=>{this.set(e),this.onload(this)});ToneAudioBuffer.downloads.push(t);try{yield t}finally{let e=ToneAudioBuffer.downloads.indexOf(t);ToneAudioBuffer.downloads.splice(e,1)}return this})}dispose(){return super.dispose(),this._buffer=void 0,this}fromArray(e){let t=isArray(e)&&e[0].length>0,s=t?e.length:1,i=t?e[0].length:e.length,n=getContext(),o=n.createBuffer(s,i,n.sampleRate),r=t||1!==s?e:[e];for(let e=0;e<s;e++)o.copyToChannel(r[e],e);return this._buffer=o,this}toMono(e){if(isNumber(e))this.fromArray(this.toArray(e));else{let e=new Float32Array(this.length),t=this.numberOfChannels;for(let s=0;s<t;s++){let t=this.toArray(s);for(let s=0;s<t.length;s++)e[s]+=t[s]}e=e.map(e=>e/t),this.fromArray(e)}return this}toArray(e){if(isNumber(e))return this.getChannelData(e);if(1===this.numberOfChannels)return this.toArray(0);{let e=[];for(let t=0;t<this.numberOfChannels;t++)e[t]=this.getChannelData(t);return e}}getChannelData(e){return this._buffer?this._buffer.getChannelData(e):new Float32Array(0)}slice(e,t=this.duration){let s=Math.floor(e*this.sampleRate),i=Math.floor(t*this.sampleRate);assert(s<i,"The start time must be less than the end time");let n=i-s,o=getContext().createBuffer(this.numberOfChannels,n,this.sampleRate);for(let e=0;e<this.numberOfChannels;e++)o.copyToChannel(this.getChannelData(e).subarray(s,i),e);return new ToneAudioBuffer(o)}_reverse(){if(this.loaded)for(let e=0;e<this.numberOfChannels;e++)this.getChannelData(e).reverse();return this}get loaded(){return this.length>0}get duration(){return this._buffer?this._buffer.duration:0}get length(){return this._buffer?this._buffer.length:0}get numberOfChannels(){return this._buffer?this._buffer.numberOfChannels:0}get reverse(){return this._reversed}set reverse(e){this._reversed!==e&&(this._reversed=e,this._reverse())}static fromArray(e){return new ToneAudioBuffer().fromArray(e)}static fromUrl(e){return(0,sx.mG)(this,void 0,void 0,function*(){let t=new ToneAudioBuffer;return yield t.load(e)})}static load(e){return(0,sx.mG)(this,void 0,void 0,function*(){let t=e.match(/\[([^\]\[]+\|.+)\]$/);if(t){let s=t[1].split("|"),i=s[0];for(let e of s)if(ToneAudioBuffer.supportsType(e)){i=e;break}e=e.replace(t[0],i)}let s=""===ToneAudioBuffer.baseUrl||ToneAudioBuffer.baseUrl.endsWith("/")?ToneAudioBuffer.baseUrl:ToneAudioBuffer.baseUrl+"/",i=yield fetch(s+e);if(!i.ok)throw Error(`could not load url: ${e}`);let n=yield i.arrayBuffer(),o=yield getContext().decodeAudioData(n);return o})}static supportsType(e){let t=e.split("."),s=t[t.length-1],i=document.createElement("audio").canPlayType("audio/"+s);return""!==i}static loaded(){return(0,sx.mG)(this,void 0,void 0,function*(){for(yield Promise.resolve();ToneAudioBuffer.downloads.length;)yield ToneAudioBuffer.downloads[0]})}};ToneAudioBuffer.baseUrl="",ToneAudioBuffer.downloads=[];let OfflineContext=class OfflineContext extends Context{constructor(){var e,t,s,i,n,o;super({clockSource:"offline",context:(e=arguments[0],isAnyOfflineAudioContext(e))?arguments[0]:(t=arguments[0],s=arguments[1]*arguments[2],i=arguments[2],new s_(t,s,i)),lookAhead:0,updateInterval:(n=arguments[0],isAnyOfflineAudioContext(n))?128/arguments[0].sampleRate:128/arguments[2]}),this.name="OfflineContext",this._currentTime=0,this.isOffline=!0,o=arguments[0],this._duration=isAnyOfflineAudioContext(o)?arguments[0].length/arguments[0].sampleRate:arguments[1]}now(){return this._currentTime}get currentTime(){return this._currentTime}_renderClock(e){return(0,sx.mG)(this,void 0,void 0,function*(){let t=0;for(;this._duration-this._currentTime>=0;){this.emit("tick"),this._currentTime+=128/this.sampleRate,t++;let s=Math.floor(this.sampleRate/128);e&&t%s==0&&(yield new Promise(e=>setTimeout(e,1)))}})}render(e=!0){return(0,sx.mG)(this,void 0,void 0,function*(){yield this.workletsAreReady(),yield this._renderClock(e);let t=yield this._context.startRendering();return new ToneAudioBuffer(t)})}close(){return Promise.resolve()}};let sb=new class extends BaseContext{constructor(){super(...arguments),this.lookAhead=0,this.latencyHint=0,this.isOffline=!1}createAnalyser(){return{}}createOscillator(){return{}}createBufferSource(){return{}}createBiquadFilter(){return{}}createBuffer(e,t,s){return{}}createChannelMerger(e){return{}}createChannelSplitter(e){return{}}createConstantSource(){return{}}createConvolver(){return{}}createDelay(e){return{}}createDynamicsCompressor(){return{}}createGain(){return{}}createIIRFilter(e,t){return{}}createPanner(){return{}}createPeriodicWave(e,t,s){return{}}createStereoPanner(){return{}}createWaveShaper(){return{}}createMediaStreamSource(e){return{}}createMediaElementSource(e){return{}}createMediaStreamDestination(){return{}}decodeAudioData(e){return Promise.resolve({})}createAudioWorkletNode(e,t){return{}}get rawContext(){return{}}addAudioWorkletModule(e,t){return(0,sx.mG)(this,void 0,void 0,function*(){return Promise.resolve()})}resume(){return Promise.resolve()}setTimeout(e,t){return 0}clearTimeout(e){return this}setInterval(e,t){return 0}clearInterval(e){return this}getConstant(e){return{}}get currentTime(){return 0}get state(){return{}}get sampleRate(){return 0}get listener(){return{}}get transport(){return{}}get draw(){return{}}set draw(e){}get destination(){return{}}set destination(e){}now(){return 0}immediate(){return 0}},sw=sb;function getContext(){return sw===sb&&sA&&setContext(new Context),sw}function setContext(e){sw=isAnyAudioContext(e)?new Context(e):isAnyOfflineAudioContext(e)?new OfflineContext(e):e}function start(){return sw.resume()}if(sy&&!sy.TONE_SILENCE_LOGGING){let e="v";"dev"===e1&&(e="");let t=` * Tone.js ${e}${e1} * `;console.log(`%c${t}`,"background: #000; color: #fff")}function dbToGain(e){return Math.pow(10,e/20)}function gainToDb(e){return 20*(Math.log(e)/Math.LN10)}function intervalToFrequencyRatio(e){return Math.pow(2,e/12)}let sC=440;function ftom(e){return Math.round(ftomf(e))}function ftomf(e){return 69+12*Math.log2(e/sC)}function mtof(e){return sC*Math.pow(2,(e-69)/12)}let TimeBaseClass=class TimeBaseClass extends Tone{constructor(e,t,s){super(),this.defaultUnits="s",this._val=t,this._units=s,this.context=e,this._expressions=this._getExpressions()}_getExpressions(){return{hz:{method:e=>this._frequencyToUnits(parseFloat(e)),regexp:/^(\d+(?:\.\d+)?)hz$/i},i:{method:e=>this._ticksToUnits(parseInt(e,10)),regexp:/^(\d+)i$/i},m:{method:e=>this._beatsToUnits(parseInt(e,10)*this._getTimeSignature()),regexp:/^(\d+)m$/i},n:{method:(e,t)=>{let s=parseInt(e,10),i="."===t?1.5:1;return 1===s?this._beatsToUnits(this._getTimeSignature())*i:this._beatsToUnits(4/s)*i},regexp:/^(\d+)n(\.?)$/i},number:{method:e=>this._expressions[this.defaultUnits].method.call(this,e),regexp:/^(\d+(?:\.\d+)?)$/},s:{method:e=>this._secondsToUnits(parseFloat(e)),regexp:/^(\d+(?:\.\d+)?)s$/},samples:{method:e=>parseInt(e,10)/this.context.sampleRate,regexp:/^(\d+)samples$/},t:{method:e=>{let t=parseInt(e,10);return this._beatsToUnits(8/(3*Math.floor(t)))},regexp:/^(\d+)t$/i},tr:{method:(e,t,s)=>{let i=0;return e&&"0"!==e&&(i+=this._beatsToUnits(this._getTimeSignature()*parseFloat(e))),t&&"0"!==t&&(i+=this._beatsToUnits(parseFloat(t))),s&&"0"!==s&&(i+=this._beatsToUnits(parseFloat(s)/4)),i},regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/}}}valueOf(){if(this._val instanceof TimeBaseClass&&this.fromType(this._val),isUndef(this._val))return this._noArg();if(isString(this._val)&&isUndef(this._units)){for(let e in this._expressions)if(this._expressions[e].regexp.test(this._val.trim())){this._units=e;break}}else if(isObject(this._val)){let e=0;for(let t in this._val)if(isDefined(this._val[t])){let s=this._val[t],i=new this.constructor(this.context,t).valueOf()*s;e+=i}return e}if(isDefined(this._units)){let e=this._expressions[this._units],t=this._val.toString().trim().match(e.regexp);return t?e.method.apply(this,t.slice(1)):e.method.call(this,this._val)}return isString(this._val)?parseFloat(this._val):this._val}_frequencyToUnits(e){return 1/e}_beatsToUnits(e){return 60/this._getBpm()*e}_secondsToUnits(e){return e}_ticksToUnits(e){return e*this._beatsToUnits(1)/this._getPPQ()}_noArg(){return this._now()}_getBpm(){return this.context.transport.bpm.value}_getTimeSignature(){return this.context.transport.timeSignature}_getPPQ(){return this.context.transport.PPQ}fromType(e){switch(this._units=void 0,this.defaultUnits){case"s":this._val=e.toSeconds();break;case"i":this._val=e.toTicks();break;case"hz":this._val=e.toFrequency();break;case"midi":this._val=e.toMidi()}return this}toFrequency(){return 1/this.toSeconds()}toSamples(){return this.toSeconds()*this.context.sampleRate}toMilliseconds(){return 1e3*this.toSeconds()}};let TimeClass=class TimeClass extends TimeBaseClass{constructor(){super(...arguments),this.name="TimeClass"}_getExpressions(){return Object.assign(super._getExpressions(),{now:{method:e=>this._now()+new this.constructor(this.context,e).valueOf(),regexp:/^\+(.+)/},quantize:{method:e=>{let t=new TimeClass(this.context,e).valueOf();return this._secondsToUnits(this.context.transport.nextSubdivision(t))},regexp:/^@(.+)/}})}quantize(e,t=1){let s=new this.constructor(this.context,e).valueOf(),i=this.valueOf();return i+(Math.round(i/s)*s-i)*t}toNotation(){let e=this.toSeconds(),t=["1m"];for(let e=1;e<9;e++){let s=Math.pow(2,e);t.push(s+"n."),t.push(s+"n"),t.push(s+"t")}t.push("0");let s=t[0],i=new TimeClass(this.context,t[0]).toSeconds();return t.forEach(t=>{let n=new TimeClass(this.context,t).toSeconds();Math.abs(n-e)<Math.abs(i-e)&&(s=t,i=n)}),s}toBarsBeatsSixteenths(){let e=this._beatsToUnits(1),t=this.valueOf()/e;t=parseFloat(t.toFixed(4));let s=Math.floor(t/this._getTimeSignature()),i=t%1*4;t=Math.floor(t)%this._getTimeSignature();let n=i.toString();n.length>3&&(i=parseFloat(parseFloat(n).toFixed(3)));let o=[s,t,i];return o.join(":")}toTicks(){let e=this._beatsToUnits(1),t=this.valueOf()/e;return Math.round(t*this._getPPQ())}toSeconds(){return this.valueOf()}toMidi(){return ftom(this.toFrequency())}_now(){return this.context.now()}};function Time(e,t){return new TimeClass(getContext(),e,t)}let FrequencyClass=class FrequencyClass extends TimeClass{constructor(){super(...arguments),this.name="Frequency",this.defaultUnits="hz"}static get A4(){return sC}static set A4(e){sC=e}_getExpressions(){return Object.assign({},super._getExpressions(),{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method(e){return"midi"===this.defaultUnits?e:FrequencyClass.mtof(e)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method(e,t){let s=sN[e.toLowerCase()],i=s+(parseInt(t,10)+1)*12;return"midi"===this.defaultUnits?i:FrequencyClass.mtof(i)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method(e,t,s){let i=1;return e&&"0"!==e&&(i*=this._beatsToUnits(this._getTimeSignature()*parseFloat(e))),t&&"0"!==t&&(i*=this._beatsToUnits(parseFloat(t))),s&&"0"!==s&&(i*=this._beatsToUnits(parseFloat(s)/4)),i}}})}transpose(e){return new FrequencyClass(this.context,this.valueOf()*intervalToFrequencyRatio(e))}harmonize(e){return e.map(e=>this.transpose(e))}toMidi(){return ftom(this.valueOf())}toNote(){let e=this.toFrequency(),t=Math.log2(e/FrequencyClass.A4),s=Math.round(12*t)+57,i=Math.floor(s/12);i<0&&(s+=-12*i);let n=sO[s%12];return n+i.toString()}toSeconds(){return 1/super.toSeconds()}toTicks(){let e=this._beatsToUnits(1),t=this.valueOf()/e;return Math.floor(t*this._getPPQ())}_noArg(){return 0}_frequencyToUnits(e){return e}_ticksToUnits(e){return 1/(60*e/(this._getBpm()*this._getPPQ()))}_beatsToUnits(e){return 1/super._beatsToUnits(e)}_secondsToUnits(e){return 1/e}static mtof(e){return mtof(e)}static ftom(e){return ftom(e)}};let sN={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},sO=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];function Frequency(e,t){return new FrequencyClass(getContext(),e,t)}let TransportTimeClass=class TransportTimeClass extends TimeClass{constructor(){super(...arguments),this.name="TransportTime"}_now(){return this.context.transport.seconds}};function TransportTime(e,t){return new TransportTimeClass(getContext(),e,t)}let ToneWithContext=class ToneWithContext extends Tone{constructor(){super();let e=optionsFromArguments(ToneWithContext.getDefaults(),arguments,["context"]);this.defaultContext?this.context=this.defaultContext:this.context=e.context}static getDefaults(){return{context:getContext()}}now(){return this.context.currentTime+this.context.lookAhead}immediate(){return this.context.currentTime}get sampleTime(){return 1/this.context.sampleRate}get blockTime(){return 128/this.context.sampleRate}toSeconds(e){return new TimeClass(this.context,e).toSeconds()}toFrequency(e){return new FrequencyClass(this.context,e).toFrequency()}toTicks(e){return new TransportTimeClass(this.context,e).toTicks()}_getPartialProperties(e){let t=this.get();return Object.keys(t).forEach(s=>{isUndef(e[s])&&delete t[s]}),t}get(){let e=this.constructor.getDefaults();return Object.keys(e).forEach(t=>{if(Reflect.has(this,t)){let s=this[t];isDefined(s)&&isDefined(s.value)&&isDefined(s.setValueAtTime)?e[t]=s.value:s instanceof ToneWithContext?e[t]=s._getPartialProperties(e[t]):isArray(s)||isNumber(s)||isString(s)||isBoolean(s)?e[t]=s:delete e[t]}}),e}set(e){return Object.keys(e).forEach(t=>{Reflect.has(this,t)&&isDefined(this[t])&&(this[t]&&isDefined(this[t].value)&&isDefined(this[t].setValueAtTime)?this[t].value!==e[t]&&(this[t].value=e[t]):this[t]instanceof ToneWithContext?this[t].set(e[t]):this[t]=e[t])}),this}};let StateTimeline=class StateTimeline extends Timeline{constructor(e="stopped"){super(),this.name="StateTimeline",this._initial=e,this.setStateAtTime(this._initial,0)}getValueAtTime(e){let t=this.get(e);return null!==t?t.state:this._initial}setStateAtTime(e,t,s){return assertRange(t,0),this.add(Object.assign({},s,{state:e,time:t})),this}getLastState(e,t){let s=this._search(t);for(let t=s;t>=0;t--){let s=this._timeline[t];if(s.state===e)return s}}getNextState(e,t){let s=this._search(t);if(-1!==s)for(let t=s;t<this._timeline.length;t++){let s=this._timeline[t];if(s.state===e)return s}}};let Param=class Param extends ToneWithContext{constructor(){super(optionsFromArguments(Param.getDefaults(),arguments,["param","units","convert"])),this.name="Param",this.overridden=!1,this._minOutput=1e-7;let e=optionsFromArguments(Param.getDefaults(),arguments,["param","units","convert"]);for(assert(isDefined(e.param)&&(isAnyAudioParam(e.param)||e.param instanceof Param),"param must be an AudioParam");!isAnyAudioParam(e.param);)e.param=e.param._param;this._swappable=!!isDefined(e.swappable)&&e.swappable,this._swappable?(this.input=this.context.createGain(),this._param=e.param,this.input.connect(this._param)):this._param=this.input=e.param,this._events=new Timeline(1e3),this._initialValue=this._param.defaultValue,this.units=e.units,this.convert=e.convert,this._minValue=e.minValue,this._maxValue=e.maxValue,isDefined(e.value)&&e.value!==this._toType(this._initialValue)&&this.setValueAtTime(e.value,0)}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{convert:!0,units:"number"})}get value(){let e=this.now();return this.getValueAtTime(e)}set value(e){this.cancelScheduledValues(this.now()),this.setValueAtTime(e,this.now())}get minValue(){return isDefined(this._minValue)?this._minValue:"time"===this.units||"frequency"===this.units||"normalRange"===this.units||"positive"===this.units||"transportTime"===this.units||"ticks"===this.units||"bpm"===this.units||"hertz"===this.units||"samples"===this.units?0:"audioRange"===this.units?-1:"decibels"===this.units?-1/0:this._param.minValue}get maxValue(){return isDefined(this._maxValue)?this._maxValue:"normalRange"===this.units||"audioRange"===this.units?1:this._param.maxValue}_is(e,t){return this.units===t}_assertRange(e){return isDefined(this.maxValue)&&isDefined(this.minValue)&&assertRange(e,this._fromType(this.minValue),this._fromType(this.maxValue)),e}_fromType(e){return this.convert&&!this.overridden?this._is(e,"time")?this.toSeconds(e):this._is(e,"decibels")?dbToGain(e):this._is(e,"frequency")?this.toFrequency(e):e:this.overridden?0:e}_toType(e){return this.convert&&"decibels"===this.units?gainToDb(e):e}setValueAtTime(e,t){let s=this.toSeconds(t),i=this._fromType(e);return assert(isFinite(i)&&isFinite(s),`Invalid argument(s) to setValueAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._assertRange(i),this.log(this.units,"setValueAtTime",e,s),this._events.add({time:s,type:"setValueAtTime",value:i}),this._param.setValueAtTime(i,s),this}getValueAtTime(e){let t=Math.max(this.toSeconds(e),0),s=this._events.getAfter(t),i=this._events.get(t),n=this._initialValue;if(null===i)n=this._initialValue;else if("setTargetAtTime"===i.type&&(null===s||"setValueAtTime"===s.type)){let e;let s=this._events.getBefore(i.time);e=null===s?this._initialValue:s.value,"setTargetAtTime"===i.type&&(n=this._exponentialApproach(i.time,e,i.value,i.constant,t))}else if(null===s)n=i.value;else if("linearRampToValueAtTime"===s.type||"exponentialRampToValueAtTime"===s.type){let e=i.value;if("setTargetAtTime"===i.type){let t=this._events.getBefore(i.time);e=null===t?this._initialValue:t.value}n="linearRampToValueAtTime"===s.type?this._linearInterpolate(i.time,e,s.time,s.value,t):this._exponentialInterpolate(i.time,e,s.time,s.value,t)}else n=i.value;return this._toType(n)}setRampPoint(e){e=this.toSeconds(e);let t=this.getValueAtTime(e);return this.cancelAndHoldAtTime(e),0===this._fromType(t)&&(t=this._toType(this._minOutput)),this.setValueAtTime(t,e),this}linearRampToValueAtTime(e,t){let s=this._fromType(e),i=this.toSeconds(t);return assert(isFinite(s)&&isFinite(i),`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._assertRange(s),this._events.add({time:i,type:"linearRampToValueAtTime",value:s}),this.log(this.units,"linearRampToValueAtTime",e,i),this._param.linearRampToValueAtTime(s,i),this}exponentialRampToValueAtTime(e,t){let s=this._fromType(e);s=EQ(s,0)?this._minOutput:s,this._assertRange(s);let i=this.toSeconds(t);return assert(isFinite(s)&&isFinite(i),`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._events.add({time:i,type:"exponentialRampToValueAtTime",value:s}),this.log(this.units,"exponentialRampToValueAtTime",e,i),this._param.exponentialRampToValueAtTime(s,i),this}exponentialRampTo(e,t,s){return s=this.toSeconds(s),this.setRampPoint(s),this.exponentialRampToValueAtTime(e,s+this.toSeconds(t)),this}linearRampTo(e,t,s){return s=this.toSeconds(s),this.setRampPoint(s),this.linearRampToValueAtTime(e,s+this.toSeconds(t)),this}targetRampTo(e,t,s){return s=this.toSeconds(s),this.setRampPoint(s),this.exponentialApproachValueAtTime(e,s,t),this}exponentialApproachValueAtTime(e,t,s){t=this.toSeconds(t),s=this.toSeconds(s);let i=Math.log(s+1)/Math.log(200);return this.setTargetAtTime(e,t,i),this.cancelAndHoldAtTime(t+.9*s),this.linearRampToValueAtTime(e,t+s),this}setTargetAtTime(e,t,s){let i=this._fromType(e);assert(isFinite(s)&&s>0,"timeConstant must be a number greater than 0");let n=this.toSeconds(t);return this._assertRange(i),assert(isFinite(i)&&isFinite(n),`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(e)}, ${JSON.stringify(t)}`),this._events.add({constant:s,time:n,type:"setTargetAtTime",value:i}),this.log(this.units,"setTargetAtTime",e,n,s),this._param.setTargetAtTime(i,n,s),this}setValueCurveAtTime(e,t,s,i=1){s=this.toSeconds(s),t=this.toSeconds(t);let n=this._fromType(e[0])*i;this.setValueAtTime(this._toType(n),t);let o=s/(e.length-1);for(let s=1;s<e.length;s++){let n=this._fromType(e[s])*i;this.linearRampToValueAtTime(this._toType(n),t+s*o)}return this}cancelScheduledValues(e){let t=this.toSeconds(e);return assert(isFinite(t),`Invalid argument to cancelScheduledValues: ${JSON.stringify(e)}`),this._events.cancel(t),this._param.cancelScheduledValues(t),this.log(this.units,"cancelScheduledValues",t),this}cancelAndHoldAtTime(e){let t=this.toSeconds(e),s=this._fromType(this.getValueAtTime(t));assert(isFinite(t),`Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(e)}`),this.log(this.units,"cancelAndHoldAtTime",t,"value="+s);let i=this._events.get(t),n=this._events.getAfter(t);return i&&EQ(i.time,t)?n?(this._param.cancelScheduledValues(n.time),this._events.cancel(n.time)):(this._param.cancelAndHoldAtTime(t),this._events.cancel(t+this.sampleTime)):n&&(this._param.cancelScheduledValues(n.time),this._events.cancel(n.time),"linearRampToValueAtTime"===n.type?this.linearRampToValueAtTime(this._toType(s),t):"exponentialRampToValueAtTime"===n.type&&this.exponentialRampToValueAtTime(this._toType(s),t)),this._events.add({time:t,type:"setValueAtTime",value:s}),this._param.setValueAtTime(s,t),this}rampTo(e,t=.1,s){return"frequency"===this.units||"bpm"===this.units||"decibels"===this.units?this.exponentialRampTo(e,t,s):this.linearRampTo(e,t,s),this}apply(e){let t=this.context.currentTime;e.setValueAtTime(this.getValueAtTime(t),t);let s=this._events.get(t);if(s&&"setTargetAtTime"===s.type){let i=this._events.getAfter(s.time),n=i?i.time:t+2,o=(n-t)/10;for(let s=t;s<n;s+=o)e.linearRampToValueAtTime(this.getValueAtTime(s),s)}return this._events.forEachAfter(this.context.currentTime,t=>{"cancelScheduledValues"===t.type?e.cancelScheduledValues(t.time):"setTargetAtTime"===t.type?e.setTargetAtTime(t.value,t.time,t.constant):e[t.type](t.value,t.time)}),this}setParam(e){assert(this._swappable,"The Param must be assigned as 'swappable' in the constructor");let t=this.input;return t.disconnect(this._param),this.apply(e),this._param=e,t.connect(this._param),this}dispose(){return super.dispose(),this._events.dispose(),this}get defaultValue(){return this._toType(this._param.defaultValue)}_exponentialApproach(e,t,s,i,n){return s+(t-s)*Math.exp(-(n-e)/i)}_linearInterpolate(e,t,s,i,n){return t+(i-t)*((n-e)/(s-e))}_exponentialInterpolate(e,t,s,i,n){return t*Math.pow(i/t,(n-e)/(s-e))}};let ToneAudioNode=class ToneAudioNode extends ToneWithContext{constructor(){super(...arguments),this.name="ToneAudioNode",this._internalChannels=[]}get numberOfInputs(){return isDefined(this.input)?isAnyAudioParam(this.input)||this.input instanceof Param?1:this.input.numberOfInputs:0}get numberOfOutputs(){return isDefined(this.output)?this.output.numberOfOutputs:0}_isAudioNode(e){return isDefined(e)&&(e instanceof ToneAudioNode||isAnyAudioNode(e))}_getInternalNodes(){let e=this._internalChannels.slice(0);return this._isAudioNode(this.input)&&e.push(this.input),this._isAudioNode(this.output)&&this.input!==this.output&&e.push(this.output),e}_setChannelProperties(e){let t=this._getInternalNodes();t.forEach(t=>{t.channelCount=e.channelCount,t.channelCountMode=e.channelCountMode,t.channelInterpretation=e.channelInterpretation})}_getChannelProperties(){let e=this._getInternalNodes();assert(e.length>0,"ToneAudioNode does not have any internal nodes");let t=e[0];return{channelCount:t.channelCount,channelCountMode:t.channelCountMode,channelInterpretation:t.channelInterpretation}}get channelCount(){return this._getChannelProperties().channelCount}set channelCount(e){let t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelCount:e}))}get channelCountMode(){return this._getChannelProperties().channelCountMode}set channelCountMode(e){let t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelCountMode:e}))}get channelInterpretation(){return this._getChannelProperties().channelInterpretation}set channelInterpretation(e){let t=this._getChannelProperties();this._setChannelProperties(Object.assign(t,{channelInterpretation:e}))}connect(e,t=0,s=0){return connect(this,e,t,s),this}toDestination(){return this.connect(this.context.destination),this}toMaster(){return warn("toMaster() has been renamed toDestination()"),this.toDestination()}disconnect(e,t=0,s=0){return disconnect(this,e,t,s),this}chain(...e){return connectSeries(this,...e),this}fan(...e){return e.forEach(e=>this.connect(e)),this}dispose(){return super.dispose(),isDefined(this.input)&&(this.input instanceof ToneAudioNode?this.input.dispose():isAnyAudioNode(this.input)&&this.input.disconnect()),isDefined(this.output)&&(this.output instanceof ToneAudioNode?this.output.dispose():isAnyAudioNode(this.output)&&this.output.disconnect()),this._internalChannels=[],this}};function connectSeries(...e){let t=e.shift();e.reduce((e,t)=>(e instanceof ToneAudioNode?e.connect(t):isAnyAudioNode(e)&&connect(e,t),t),t)}function connect(e,t,s=0,i=0){for(assert(isDefined(e),"Cannot connect from undefined node"),assert(isDefined(t),"Cannot connect to undefined node"),(t instanceof ToneAudioNode||isAnyAudioNode(t))&&assert(t.numberOfInputs>0,"Cannot connect to node with no inputs"),assert(e.numberOfOutputs>0,"Cannot connect from node with no outputs");t instanceof ToneAudioNode||t instanceof Param;)isDefined(t.input)&&(t=t.input);for(;e instanceof ToneAudioNode;)isDefined(e.output)&&(e=e.output);isAnyAudioParam(t)?e.connect(t,s):e.connect(t,s,i)}function disconnect(e,t,s=0,i=0){if(isDefined(t))for(;t instanceof ToneAudioNode;)t=t.input;for(;!isAnyAudioNode(e);)isDefined(e.output)&&(e=e.output);isAnyAudioParam(t)?e.disconnect(t,s):isAnyAudioNode(t)?e.disconnect(t,s,i):e.disconnect()}let Gain=class Gain extends ToneAudioNode{constructor(){super(optionsFromArguments(Gain.getDefaults(),arguments,["gain","units"])),this.name="Gain",this._gainNode=this.context.createGain(),this.input=this._gainNode,this.output=this._gainNode;let e=optionsFromArguments(Gain.getDefaults(),arguments,["gain","units"]);this.gain=new Param({context:this.context,convert:e.convert,param:this._gainNode.gain,units:e.units,value:e.gain,minValue:e.minValue,maxValue:e.maxValue}),readOnly(this,"gain")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{convert:!0,gain:1,units:"gain"})}dispose(){return super.dispose(),this._gainNode.disconnect(),this.gain.dispose(),this}};let OneShotSource=class OneShotSource extends ToneAudioNode{constructor(e){super(e),this.onended=noOp,this._startTime=-1,this._stopTime=-1,this._timeout=-1,this.output=new Gain({context:this.context,gain:0}),this._gainNode=this.output,this.getStateAtTime=function(e){let t=this.toSeconds(e);return -1!==this._startTime&&t>=this._startTime&&(-1===this._stopTime||t<=this._stopTime)?"started":"stopped"},this._fadeIn=e.fadeIn,this._fadeOut=e.fadeOut,this._curve=e.curve,this.onended=e.onended}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{curve:"linear",fadeIn:0,fadeOut:0,onended:noOp})}_startGain(e,t=1){assert(-1===this._startTime,"Source cannot be started more than once");let s=this.toSeconds(this._fadeIn);return this._startTime=e+s,this._startTime=Math.max(this._startTime,this.context.currentTime),s>0?(this._gainNode.gain.setValueAtTime(0,e),"linear"===this._curve?this._gainNode.gain.linearRampToValueAtTime(t,e+s):this._gainNode.gain.exponentialApproachValueAtTime(t,e,s)):this._gainNode.gain.setValueAtTime(t,e),this}stop(e){return this.log("stop",e),this._stopGain(this.toSeconds(e)),this}_stopGain(e){assert(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop();let t=this.toSeconds(this._fadeOut);return this._stopTime=this.toSeconds(e)+t,this._stopTime=Math.max(this._stopTime,this.context.currentTime),t>0?"linear"===this._curve?this._gainNode.gain.linearRampTo(0,t,e):this._gainNode.gain.targetRampTo(0,t,e):(this._gainNode.gain.cancelAndHoldAtTime(e),this._gainNode.gain.setValueAtTime(0,e)),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout(()=>{let e="exponential"===this._curve?2*t:0;this._stopSource(this.now()+e),this._onended()},this._stopTime-this.context.currentTime),this}_onended(){if(this.onended!==noOp&&(this.onended(this),this.onended=noOp,!this.context.isOffline)){let disposeCallback=()=>this.dispose();void 0!==window.requestIdleCallback?window.requestIdleCallback(disposeCallback):setTimeout(disposeCallback,1e3)}}get state(){return this.getStateAtTime(this.now())}cancelStop(){return this.log("cancelStop"),assert(-1!==this._startTime,"Source is not started"),this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1,this}dispose(){return super.dispose(),this._gainNode.disconnect(),this}};let ToneConstantSource=class ToneConstantSource extends OneShotSource{constructor(){super(optionsFromArguments(ToneConstantSource.getDefaults(),arguments,["offset"])),this.name="ToneConstantSource",this._source=this.context.createConstantSource();let e=optionsFromArguments(ToneConstantSource.getDefaults(),arguments,["offset"]);connect(this._source,this._gainNode),this.offset=new Param({context:this.context,convert:e.convert,param:this._source.offset,units:e.units,value:e.offset,minValue:e.minValue,maxValue:e.maxValue})}static getDefaults(){return Object.assign(OneShotSource.getDefaults(),{convert:!0,offset:1,units:"number"})}start(e){let t=this.toSeconds(e);return this.log("start",t),this._startGain(t),this._source.start(t),this}_stopSource(e){this._source.stop(e)}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._source.disconnect(),this.offset.dispose(),this}};let Signal=class Signal extends ToneAudioNode{constructor(){super(optionsFromArguments(Signal.getDefaults(),arguments,["value","units"])),this.name="Signal",this.override=!0;let e=optionsFromArguments(Signal.getDefaults(),arguments,["value","units"]);this.output=this._constantSource=new ToneConstantSource({context:this.context,convert:e.convert,offset:e.value,units:e.units,minValue:e.minValue,maxValue:e.maxValue}),this._constantSource.start(0),this.input=this._param=this._constantSource.offset}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{convert:!0,units:"number",value:0})}connect(e,t=0,s=0){return connectSignal(this,e,t,s),this}dispose(){return super.dispose(),this._param.dispose(),this._constantSource.dispose(),this}setValueAtTime(e,t){return this._param.setValueAtTime(e,t),this}getValueAtTime(e){return this._param.getValueAtTime(e)}setRampPoint(e){return this._param.setRampPoint(e),this}linearRampToValueAtTime(e,t){return this._param.linearRampToValueAtTime(e,t),this}exponentialRampToValueAtTime(e,t){return this._param.exponentialRampToValueAtTime(e,t),this}exponentialRampTo(e,t,s){return this._param.exponentialRampTo(e,t,s),this}linearRampTo(e,t,s){return this._param.linearRampTo(e,t,s),this}targetRampTo(e,t,s){return this._param.targetRampTo(e,t,s),this}exponentialApproachValueAtTime(e,t,s){return this._param.exponentialApproachValueAtTime(e,t,s),this}setTargetAtTime(e,t,s){return this._param.setTargetAtTime(e,t,s),this}setValueCurveAtTime(e,t,s,i){return this._param.setValueCurveAtTime(e,t,s,i),this}cancelScheduledValues(e){return this._param.cancelScheduledValues(e),this}cancelAndHoldAtTime(e){return this._param.cancelAndHoldAtTime(e),this}rampTo(e,t,s){return this._param.rampTo(e,t,s),this}get value(){return this._param.value}set value(e){this._param.value=e}get convert(){return this._param.convert}set convert(e){this._param.convert=e}get units(){return this._param.units}get overridden(){return this._param.overridden}set overridden(e){this._param.overridden=e}get maxValue(){return this._param.maxValue}get minValue(){return this._param.minValue}apply(e){return this._param.apply(e),this}};function connectSignal(e,t,s,i){(t instanceof Param||isAnyAudioParam(t)||t instanceof Signal&&t.override)&&(t.cancelScheduledValues(0),t.setValueAtTime(0,0),t instanceof Signal&&(t.overridden=!0)),connect(e,t,s,i)}let TickParam=class TickParam extends Param{constructor(){super(optionsFromArguments(TickParam.getDefaults(),arguments,["value"])),this.name="TickParam",this._events=new Timeline(1/0),this._multiplier=1;let e=optionsFromArguments(TickParam.getDefaults(),arguments,["value"]);this._multiplier=e.multiplier,this._events.cancel(0),this._events.add({ticks:0,time:0,type:"setValueAtTime",value:this._fromType(e.value)}),this.setValueAtTime(e.value,0)}static getDefaults(){return Object.assign(Param.getDefaults(),{multiplier:1,units:"hertz",value:1})}setTargetAtTime(e,t,s){t=this.toSeconds(t),this.setRampPoint(t);let i=this._fromType(e),n=this._events.get(t),o=Math.round(Math.max(1/s,1));for(let e=0;e<=o;e++){let o=s*e+t,r=this._exponentialApproach(n.time,n.value,i,s,o);this.linearRampToValueAtTime(this._toType(r),o)}return this}setValueAtTime(e,t){let s=this.toSeconds(t);super.setValueAtTime(e,t);let i=this._events.get(s),n=this._events.previousEvent(i),o=this._getTicksUntilEvent(n,s);return i.ticks=Math.max(o,0),this}linearRampToValueAtTime(e,t){let s=this.toSeconds(t);super.linearRampToValueAtTime(e,t);let i=this._events.get(s),n=this._events.previousEvent(i),o=this._getTicksUntilEvent(n,s);return i.ticks=Math.max(o,0),this}exponentialRampToValueAtTime(e,t){t=this.toSeconds(t);let s=this._fromType(e),i=this._events.get(t),n=Math.round(Math.max((t-i.time)*10,1)),o=(t-i.time)/n;for(let e=0;e<=n;e++){let n=o*e+i.time,r=this._exponentialInterpolate(i.time,i.value,t,s,n);this.linearRampToValueAtTime(this._toType(r),n)}return this}_getTicksUntilEvent(e,t){if(null===e)e={ticks:0,time:0,type:"setValueAtTime",value:0};else if(isUndef(e.ticks)){let t=this._events.previousEvent(e);e.ticks=this._getTicksUntilEvent(t,e.time)}let s=this._fromType(this.getValueAtTime(e.time)),i=this._fromType(this.getValueAtTime(t)),n=this._events.get(t);return n&&n.time===t&&"setValueAtTime"===n.type&&(i=this._fromType(this.getValueAtTime(t-this.sampleTime))),.5*(t-e.time)*(s+i)+e.ticks}getTicksAtTime(e){let t=this.toSeconds(e),s=this._events.get(t);return Math.max(this._getTicksUntilEvent(s,t),0)}getDurationOfTicks(e,t){let s=this.toSeconds(t),i=this.getTicksAtTime(t);return this.getTimeOfTick(i+e)-s}getTimeOfTick(e){let t=this._events.get(e,"ticks"),s=this._events.getAfter(e,"ticks");if(t&&t.ticks===e)return t.time;if(t&&s&&"linearRampToValueAtTime"===s.type&&t.value!==s.value){let i=this._fromType(this.getValueAtTime(t.time)),n=this._fromType(this.getValueAtTime(s.time)),o=(n-i)/(s.time-t.time),r=Math.sqrt(Math.pow(i,2)-2*o*(t.ticks-e)),a=(-i+r)/o;return(a>0?a:(-i-r)/o)+t.time}return t?0===t.value?1/0:t.time+(e-t.ticks)/t.value:e/this._initialValue}ticksToTime(e,t){return this.getDurationOfTicks(e,t)}timeToTicks(e,t){let s=this.toSeconds(t),i=this.toSeconds(e),n=this.getTicksAtTime(s),o=this.getTicksAtTime(s+i);return o-n}_fromType(e){return"bpm"===this.units&&this.multiplier?1/(60/e/this.multiplier):super._fromType(e)}_toType(e){return"bpm"===this.units&&this.multiplier?e/this.multiplier*60:super._toType(e)}get multiplier(){return this._multiplier}set multiplier(e){let t=this.value;this._multiplier=e,this.cancelScheduledValues(0),this.setValueAtTime(t,0)}};let TickSignal=class TickSignal extends Signal{constructor(){super(optionsFromArguments(TickSignal.getDefaults(),arguments,["value"])),this.name="TickSignal";let e=optionsFromArguments(TickSignal.getDefaults(),arguments,["value"]);this.input=this._param=new TickParam({context:this.context,convert:e.convert,multiplier:e.multiplier,param:this._constantSource.offset,units:e.units,value:e.value})}static getDefaults(){return Object.assign(Signal.getDefaults(),{multiplier:1,units:"hertz",value:1})}ticksToTime(e,t){return this._param.ticksToTime(e,t)}timeToTicks(e,t){return this._param.timeToTicks(e,t)}getTimeOfTick(e){return this._param.getTimeOfTick(e)}getDurationOfTicks(e,t){return this._param.getDurationOfTicks(e,t)}getTicksAtTime(e){return this._param.getTicksAtTime(e)}get multiplier(){return this._param.multiplier}set multiplier(e){this._param.multiplier=e}dispose(){return super.dispose(),this._param.dispose(),this}};let TickSource=class TickSource extends ToneWithContext{constructor(){super(optionsFromArguments(TickSource.getDefaults(),arguments,["frequency"])),this.name="TickSource",this._state=new StateTimeline,this._tickOffset=new Timeline;let e=optionsFromArguments(TickSource.getDefaults(),arguments,["frequency"]);this.frequency=new TickSignal({context:this.context,units:e.units,value:e.frequency}),readOnly(this,"frequency"),this._state.setStateAtTime("stopped",0),this.setTicksAtTime(0,0)}static getDefaults(){return Object.assign({frequency:1,units:"hertz"},ToneWithContext.getDefaults())}get state(){return this.getStateAtTime(this.now())}start(e,t){let s=this.toSeconds(e);return"started"!==this._state.getValueAtTime(s)&&(this._state.setStateAtTime("started",s),isDefined(t)&&this.setTicksAtTime(t,s)),this}stop(e){let t=this.toSeconds(e);if("stopped"===this._state.getValueAtTime(t)){let e=this._state.get(t);e&&e.time>0&&(this._tickOffset.cancel(e.time),this._state.cancel(e.time))}return this._state.cancel(t),this._state.setStateAtTime("stopped",t),this.setTicksAtTime(0,t),this}pause(e){let t=this.toSeconds(e);return"started"===this._state.getValueAtTime(t)&&this._state.setStateAtTime("paused",t),this}cancel(e){return e=this.toSeconds(e),this._state.cancel(e),this._tickOffset.cancel(e),this}getTicksAtTime(e){let t=this.toSeconds(e),s=this._state.getLastState("stopped",t),i={state:"paused",time:t};this._state.add(i);let n=s,o=0;return this._state.forEachBetween(s.time,t+this.sampleTime,e=>{let t=n.time,s=this._tickOffset.get(e.time);s&&s.time>=n.time&&(o=s.ticks,t=s.time),"started"===n.state&&"started"!==e.state&&(o+=this.frequency.getTicksAtTime(e.time)-this.frequency.getTicksAtTime(t)),n=e}),this._state.remove(i),o}get ticks(){return this.getTicksAtTime(this.now())}set ticks(e){this.setTicksAtTime(e,this.now())}get seconds(){return this.getSecondsAtTime(this.now())}set seconds(e){let t=this.now(),s=this.frequency.timeToTicks(e,t);this.setTicksAtTime(s,t)}getSecondsAtTime(e){e=this.toSeconds(e);let t=this._state.getLastState("stopped",e),s={state:"paused",time:e};this._state.add(s);let i=t,n=0;return this._state.forEachBetween(t.time,e+this.sampleTime,e=>{let t=i.time,s=this._tickOffset.get(e.time);s&&s.time>=i.time&&(n=s.seconds,t=s.time),"started"===i.state&&"started"!==e.state&&(n+=e.time-t),i=e}),this._state.remove(s),n}setTicksAtTime(e,t){return t=this.toSeconds(t),this._tickOffset.cancel(t),this._tickOffset.add({seconds:this.frequency.getDurationOfTicks(e,t),ticks:e,time:t}),this}getStateAtTime(e){return e=this.toSeconds(e),this._state.getValueAtTime(e)}getTimeOfTick(e,t=this.now()){let s=this._tickOffset.get(t),i=this._state.get(t),n=Math.max(s.time,i.time),o=this.frequency.getTicksAtTime(n)+e-s.ticks;return this.frequency.getTimeOfTick(o)}forEachTickBetween(e,t,s){let i=this._state.get(e);this._state.forEachBetween(e,t,t=>{i&&"started"===i.state&&"started"!==t.state&&this.forEachTickBetween(Math.max(i.time,e),t.time-this.sampleTime,s),i=t});let n=null;if(i&&"started"===i.state){let o=Math.max(i.time,e),r=this.frequency.getTicksAtTime(o),a=this.frequency.getTicksAtTime(i.time),l=r-a,u=Math.ceil(l)-l;u=EQ(u,1)?0:u;let c=this.frequency.getTimeOfTick(r+u);for(;c<t;){try{s(c,Math.round(this.getTicksAtTime(c)))}catch(e){n=e;break}c+=this.frequency.getDurationOfTicks(1,c)}}if(n)throw n;return this}dispose(){return super.dispose(),this._state.dispose(),this._tickOffset.dispose(),this.frequency.dispose(),this}};let Clock=class Clock extends ToneWithContext{constructor(){super(optionsFromArguments(Clock.getDefaults(),arguments,["callback","frequency"])),this.name="Clock",this.callback=noOp,this._lastUpdate=0,this._state=new StateTimeline("stopped"),this._boundLoop=this._loop.bind(this);let e=optionsFromArguments(Clock.getDefaults(),arguments,["callback","frequency"]);this.callback=e.callback,this._tickSource=new TickSource({context:this.context,frequency:e.frequency,units:e.units}),this._lastUpdate=0,this.frequency=this._tickSource.frequency,readOnly(this,"frequency"),this._state.setStateAtTime("stopped",0),this.context.on("tick",this._boundLoop)}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{callback:noOp,frequency:1,units:"hertz"})}get state(){return this._state.getValueAtTime(this.now())}start(e,t){assertContextRunning(this.context);let s=this.toSeconds(e);return this.log("start",s),"started"!==this._state.getValueAtTime(s)&&(this._state.setStateAtTime("started",s),this._tickSource.start(s,t),s<this._lastUpdate&&this.emit("start",s,t)),this}stop(e){let t=this.toSeconds(e);return this.log("stop",t),this._state.cancel(t),this._state.setStateAtTime("stopped",t),this._tickSource.stop(t),t<this._lastUpdate&&this.emit("stop",t),this}pause(e){let t=this.toSeconds(e);return"started"===this._state.getValueAtTime(t)&&(this._state.setStateAtTime("paused",t),this._tickSource.pause(t),t<this._lastUpdate&&this.emit("pause",t)),this}get ticks(){return Math.ceil(this.getTicksAtTime(this.now()))}set ticks(e){this._tickSource.ticks=e}get seconds(){return this._tickSource.seconds}set seconds(e){this._tickSource.seconds=e}getSecondsAtTime(e){return this._tickSource.getSecondsAtTime(e)}setTicksAtTime(e,t){return this._tickSource.setTicksAtTime(e,t),this}getTimeOfTick(e,t=this.now()){return this._tickSource.getTimeOfTick(e,t)}getTicksAtTime(e){return this._tickSource.getTicksAtTime(e)}nextTickTime(e,t){let s=this.toSeconds(t),i=this.getTicksAtTime(s);return this._tickSource.getTimeOfTick(i+e,s)}_loop(){let e=this._lastUpdate,t=this.now();this._lastUpdate=t,this.log("loop",e,t),e!==t&&(this._state.forEachBetween(e,t,e=>{switch(e.state){case"started":let t=this._tickSource.getTicksAtTime(e.time);this.emit("start",e.time,t);break;case"stopped":0!==e.time&&this.emit("stop",e.time);break;case"paused":this.emit("pause",e.time)}}),this._tickSource.forEachTickBetween(e,t,(e,t)=>{this.callback(e,t)}))}getStateAtTime(e){let t=this.toSeconds(e);return this._state.getValueAtTime(t)}dispose(){return super.dispose(),this.context.off("tick",this._boundLoop),this._tickSource.dispose(),this._state.dispose(),this}};Emitter.mixin(Clock);let Delay=class Delay extends ToneAudioNode{constructor(){super(optionsFromArguments(Delay.getDefaults(),arguments,["delayTime","maxDelay"])),this.name="Delay";let e=optionsFromArguments(Delay.getDefaults(),arguments,["delayTime","maxDelay"]),t=this.toSeconds(e.maxDelay);this._maxDelay=Math.max(t,this.toSeconds(e.delayTime)),this._delayNode=this.input=this.output=this.context.createDelay(t),this.delayTime=new Param({context:this.context,param:this._delayNode.delayTime,units:"time",value:e.delayTime,minValue:0,maxValue:this.maxDelay}),readOnly(this,"delayTime")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{delayTime:0,maxDelay:1})}get maxDelay(){return this._maxDelay}dispose(){return super.dispose(),this._delayNode.disconnect(),this.delayTime.dispose(),this}};function Offline(e,t,s=2,i=getContext().sampleRate){return(0,sx.mG)(this,void 0,void 0,function*(){let n=getContext(),o=new OfflineContext(s,t,i);setContext(o),yield e(o);let r=o.render();setContext(n);let a=yield r;return new ToneAudioBuffer(a)})}let ToneAudioBuffers=class ToneAudioBuffers extends Tone{constructor(){super(),this.name="ToneAudioBuffers",this._buffers=new Map,this._loadingCount=0;let e=optionsFromArguments(ToneAudioBuffers.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");this.baseUrl=e.baseUrl,Object.keys(e.urls).forEach(t=>{this._loadingCount++;let s=e.urls[t];this.add(t,s,this._bufferLoaded.bind(this,e.onload),e.onerror)})}static getDefaults(){return{baseUrl:"",onerror:noOp,onload:noOp,urls:{}}}has(e){return this._buffers.has(e.toString())}get(e){return assert(this.has(e),`ToneAudioBuffers has no buffer named: ${e}`),this._buffers.get(e.toString())}_bufferLoaded(e){this._loadingCount--,0===this._loadingCount&&e&&e()}get loaded(){return Array.from(this._buffers).every(([e,t])=>t.loaded)}add(e,t,s=noOp,i=noOp){return isString(t)?this._buffers.set(e.toString(),new ToneAudioBuffer(this.baseUrl+t,s,i)):this._buffers.set(e.toString(),new ToneAudioBuffer(t,s,i)),this}dispose(){return super.dispose(),this._buffers.forEach(e=>e.dispose()),this._buffers.clear(),this}};let MidiClass=class MidiClass extends FrequencyClass{constructor(){super(...arguments),this.name="MidiClass",this.defaultUnits="midi"}_frequencyToUnits(e){return ftom(super._frequencyToUnits(e))}_ticksToUnits(e){return ftom(super._ticksToUnits(e))}_beatsToUnits(e){return ftom(super._beatsToUnits(e))}_secondsToUnits(e){return ftom(super._secondsToUnits(e))}toMidi(){return this.valueOf()}toFrequency(){return mtof(this.toMidi())}transpose(e){return new MidiClass(this.context,this.toMidi()+e)}};function Midi(e,t){return new MidiClass(getContext(),e,t)}let TicksClass=class TicksClass extends TransportTimeClass{constructor(){super(...arguments),this.name="Ticks",this.defaultUnits="i"}_now(){return this.context.transport.ticks}_beatsToUnits(e){return this._getPPQ()*e}_secondsToUnits(e){return Math.floor(e/(60/this._getBpm())*this._getPPQ())}_ticksToUnits(e){return e}toTicks(){return this.valueOf()}toSeconds(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())}};function Ticks(e,t){return new TicksClass(getContext(),e,t)}let Draw=class Draw extends ToneWithContext{constructor(){super(...arguments),this.name="Draw",this.expiration=.25,this.anticipation=.008,this._events=new Timeline,this._boundDrawLoop=this._drawLoop.bind(this),this._animationFrame=-1}schedule(e,t){return this._events.add({callback:e,time:this.toSeconds(t)}),1===this._events.length&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop)),this}cancel(e){return this._events.cancel(this.toSeconds(e)),this}_drawLoop(){let e=this.context.currentTime;for(;this._events.length&&this._events.peek().time-this.anticipation<=e;){let t=this._events.shift();t&&e-t.time<=this.expiration&&t.callback()}this._events.length>0&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop))}dispose(){return super.dispose(),this._events.dispose(),cancelAnimationFrame(this._animationFrame),this}};onContextInit(e=>{e.draw=new Draw({context:e})}),onContextClose(e=>{e.draw.dispose()});let IntervalTimeline=class IntervalTimeline extends Tone{constructor(){super(...arguments),this.name="IntervalTimeline",this._root=null,this._length=0}add(e){assert(isDefined(e.time),"Events must have a time property"),assert(isDefined(e.duration),"Events must have a duration parameter"),e.time=e.time.valueOf();let t=new IntervalNode(e.time,e.time+e.duration,e);for(null===this._root?this._root=t:this._root.insert(t),this._length++;null!==t;)t.updateHeight(),t.updateMax(),this._rebalance(t),t=t.parent;return this}remove(e){if(null!==this._root){let t=[];for(let s of(this._root.search(e.time,t),t))if(s.event===e){this._removeNode(s),this._length--;break}}return this}get length(){return this._length}cancel(e){return this.forEachFrom(e,e=>this.remove(e)),this}_setRoot(e){this._root=e,null!==this._root&&(this._root.parent=null)}_replaceNodeInParent(e,t){null!==e.parent?(e.isLeftChild()?e.parent.left=t:e.parent.right=t,this._rebalance(e.parent)):this._setRoot(t)}_removeNode(e){if(null===e.left&&null===e.right)this._replaceNodeInParent(e,null);else if(null===e.right)this._replaceNodeInParent(e,e.left);else if(null===e.left)this._replaceNodeInParent(e,e.right);else{let t;let s=e.getBalance(),i=null;if(s>0){if(null===e.left.right)(t=e.left).right=e.right,i=t;else{for(t=e.left.right;null!==t.right;)t=t.right;t.parent&&(t.parent.right=t.left,i=t.parent,t.left=e.left,t.right=e.right)}}else if(null===e.right.left)(t=e.right).left=e.left,i=t;else{for(t=e.right.left;null!==t.left;)t=t.left;t.parent&&(t.parent.left=t.right,i=t.parent,t.left=e.left,t.right=e.right)}null!==e.parent?e.isLeftChild()?e.parent.left=t:e.parent.right=t:this._setRoot(t),i&&this._rebalance(i)}e.dispose()}_rotateLeft(e){let t=e.parent,s=e.isLeftChild(),i=e.right;i&&(e.right=i.left,i.left=e),null!==t?s?t.left=i:t.right=i:this._setRoot(i)}_rotateRight(e){let t=e.parent,s=e.isLeftChild(),i=e.left;i&&(e.left=i.right,i.right=e),null!==t?s?t.left=i:t.right=i:this._setRoot(i)}_rebalance(e){let t=e.getBalance();t>1&&e.left?0>e.left.getBalance()?this._rotateLeft(e.left):this._rotateRight(e):t<-1&&e.right&&(e.right.getBalance()>0?this._rotateRight(e.right):this._rotateLeft(e))}get(e){if(null!==this._root){let t=[];if(this._root.search(e,t),t.length>0){let e=t[0];for(let s=1;s<t.length;s++)t[s].low>e.low&&(e=t[s]);return e.event}}return null}forEach(e){if(null!==this._root){let t=[];this._root.traverse(e=>t.push(e)),t.forEach(t=>{t.event&&e(t.event)})}return this}forEachAtTime(e,t){if(null!==this._root){let s=[];this._root.search(e,s),s.forEach(e=>{e.event&&t(e.event)})}return this}forEachFrom(e,t){if(null!==this._root){let s=[];this._root.searchAfter(e,s),s.forEach(e=>{e.event&&t(e.event)})}return this}dispose(){return super.dispose(),null!==this._root&&this._root.traverse(e=>e.dispose()),this._root=null,this}};let IntervalNode=class IntervalNode{constructor(e,t,s){this._left=null,this._right=null,this.parent=null,this.height=0,this.event=s,this.low=e,this.high=t,this.max=this.high}insert(e){e.low<=this.low?null===this.left?this.left=e:this.left.insert(e):null===this.right?this.right=e:this.right.insert(e)}search(e,t){!(e>this.max)&&(null!==this.left&&this.left.search(e,t),this.low<=e&&this.high>e&&t.push(this),this.low>e||null===this.right||this.right.search(e,t))}searchAfter(e,t){this.low>=e&&(t.push(this),null!==this.left&&this.left.searchAfter(e,t)),null!==this.right&&this.right.searchAfter(e,t)}traverse(e){e(this),null!==this.left&&this.left.traverse(e),null!==this.right&&this.right.traverse(e)}updateHeight(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0}updateMax(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))}getBalance(){let e=0;return null!==this.left&&null!==this.right?e=this.left.height-this.right.height:null!==this.left?e=this.left.height+1:null!==this.right&&(e=-(this.right.height+1)),e}isLeftChild(){return null!==this.parent&&this.parent.left===this}get left(){return this._left}set left(e){this._left=e,null!==e&&(e.parent=this),this.updateHeight(),this.updateMax()}get right(){return this._right}set right(e){this._right=e,null!==e&&(e.parent=this),this.updateHeight(),this.updateMax()}dispose(){this.parent=null,this._left=null,this._right=null,this.event=null}};let Volume=class Volume extends ToneAudioNode{constructor(){super(optionsFromArguments(Volume.getDefaults(),arguments,["volume"])),this.name="Volume";let e=optionsFromArguments(Volume.getDefaults(),arguments,["volume"]);this.input=this.output=new Gain({context:this.context,gain:e.volume,units:"decibels"}),this.volume=this.output.gain,readOnly(this,"volume"),this._unmutedVolume=e.volume,this.mute=e.mute}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,volume:0})}get mute(){return this.volume.value===-1/0}set mute(e){!this.mute&&e?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!e&&(this.volume.value=this._unmutedVolume)}dispose(){return super.dispose(),this.input.dispose(),this.volume.dispose(),this}};let Destination=class Destination extends ToneAudioNode{constructor(){super(optionsFromArguments(Destination.getDefaults(),arguments)),this.name="Destination",this.input=new Volume({context:this.context}),this.output=new Gain({context:this.context}),this.volume=this.input.volume;let e=optionsFromArguments(Destination.getDefaults(),arguments);connectSeries(this.input,this.output,this.context.rawContext.destination),this.mute=e.mute,this._internalChannels=[this.input,this.context.rawContext.destination,this.output]}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,volume:0})}get mute(){return this.input.mute}set mute(e){this.input.mute=e}chain(...e){return this.input.disconnect(),e.unshift(this.input),e.push(this.output),connectSeries(...e),this}get maxChannelCount(){return this.context.rawContext.destination.maxChannelCount}dispose(){return super.dispose(),this.volume.dispose(),this}};onContextInit(e=>{e.destination=new Destination({context:e})}),onContextClose(e=>{e.destination.dispose()});let TimelineValue=class TimelineValue extends Tone{constructor(e){super(),this.name="TimelineValue",this._timeline=new Timeline({memory:10}),this._initialValue=e}set(e,t){return this._timeline.add({value:e,time:t}),this}get(e){let t=this._timeline.get(e);return t?t.value:this._initialValue}};let TransportEvent=class TransportEvent{constructor(e,t){this.id=TransportEvent._eventId++;let s=Object.assign(TransportEvent.getDefaults(),t);this.transport=e,this.callback=s.callback,this._once=s.once,this.time=s.time}static getDefaults(){return{callback:noOp,once:!1,time:0}}invoke(e){this.callback&&(this.callback(e),this._once&&this.transport.clear(this.id))}dispose(){return this.callback=void 0,this}};TransportEvent._eventId=0;let TransportRepeatEvent=class TransportRepeatEvent extends TransportEvent{constructor(e,t){super(e,t),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this);let s=Object.assign(TransportRepeatEvent.getDefaults(),t);this.duration=new TicksClass(e.context,s.duration).valueOf(),this._interval=new TicksClass(e.context,s.interval).valueOf(),this._nextTick=s.time,this.transport.on("start",this._boundRestart),this.transport.on("loopStart",this._boundRestart),this.context=this.transport.context,this._restart()}static getDefaults(){return Object.assign({},TransportEvent.getDefaults(),{duration:1/0,interval:1,once:!1})}invoke(e){this._createEvents(e),super.invoke(e)}_createEvents(e){let t=this.transport.getTicksAtTime(e);t>=this.time&&t>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new TicksClass(this.context,this._nextTick).toSeconds()))}_restart(e){this.transport.clear(this._currentId),this.transport.clear(this._nextId),this._nextTick=this.time;let t=this.transport.getTicksAtTime(e);t>this.time&&(this._nextTick=this.time+Math.ceil((t-this.time)/this._interval)*this._interval),this._currentId=this.transport.scheduleOnce(this.invoke.bind(this),new TicksClass(this.context,this._nextTick).toSeconds()),this._nextTick+=this._interval,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new TicksClass(this.context,this._nextTick).toSeconds())}dispose(){return super.dispose(),this.transport.clear(this._currentId),this.transport.clear(this._nextId),this.transport.off("start",this._boundRestart),this.transport.off("loopStart",this._boundRestart),this}};let Transport=class Transport extends ToneWithContext{constructor(){super(optionsFromArguments(Transport.getDefaults(),arguments)),this.name="Transport",this._loop=new TimelineValue(!1),this._loopStart=0,this._loopEnd=0,this._scheduledEvents={},this._timeline=new Timeline,this._repeatedEvents=new IntervalTimeline,this._syncedSignals=[],this._swingAmount=0;let e=optionsFromArguments(Transport.getDefaults(),arguments);this._ppq=e.ppq,this._clock=new Clock({callback:this._processTick.bind(this),context:this.context,frequency:0,units:"bpm"}),this._bindClockEvents(),this.bpm=this._clock.frequency,this._clock.frequency.multiplier=e.ppq,this.bpm.setValueAtTime(e.bpm,0),readOnly(this,"bpm"),this._timeSignature=e.timeSignature,this._swingTicks=e.ppq/2}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{bpm:120,loopEnd:"4m",loopStart:0,ppq:192,swing:0,swingSubdivision:"8n",timeSignature:4})}_processTick(e,t){if(this._loop.get(e)&&t>=this._loopEnd&&(this.emit("loopEnd",e),this._clock.setTicksAtTime(this._loopStart,e),t=this._loopStart,this.emit("loopStart",e,this._clock.getSecondsAtTime(e)),this.emit("loop",e)),this._swingAmount>0&&t%this._ppq!=0&&t%(2*this._swingTicks)!=0){let s=t%(2*this._swingTicks)/(2*this._swingTicks),i=Math.sin(s*Math.PI)*this._swingAmount;e+=new TicksClass(this.context,2*this._swingTicks/3).toSeconds()*i}this._timeline.forEachAtTime(t,t=>t.invoke(e))}schedule(e,t){let s=new TransportEvent(this,{callback:e,time:new TransportTimeClass(this.context,t).toTicks()});return this._addEvent(s,this._timeline)}scheduleRepeat(e,t,s,i=1/0){let n=new TransportRepeatEvent(this,{callback:e,duration:new TimeClass(this.context,i).toTicks(),interval:new TimeClass(this.context,t).toTicks(),time:new TransportTimeClass(this.context,s).toTicks()});return this._addEvent(n,this._repeatedEvents)}scheduleOnce(e,t){let s=new TransportEvent(this,{callback:e,once:!0,time:new TransportTimeClass(this.context,t).toTicks()});return this._addEvent(s,this._timeline)}clear(e){if(this._scheduledEvents.hasOwnProperty(e)){let t=this._scheduledEvents[e.toString()];t.timeline.remove(t.event),t.event.dispose(),delete this._scheduledEvents[e.toString()]}return this}_addEvent(e,t){return this._scheduledEvents[e.id.toString()]={event:e,timeline:t},t.add(e),e.id}cancel(e=0){let t=this.toTicks(e);return this._timeline.forEachFrom(t,e=>this.clear(e.id)),this._repeatedEvents.forEachFrom(t,e=>this.clear(e.id)),this}_bindClockEvents(){this._clock.on("start",(e,t)=>{t=new TicksClass(this.context,t).toSeconds(),this.emit("start",e,t)}),this._clock.on("stop",e=>{this.emit("stop",e)}),this._clock.on("pause",e=>{this.emit("pause",e)})}get state(){return this._clock.getStateAtTime(this.now())}start(e,t){let s;return isDefined(t)&&(s=this.toTicks(t)),this._clock.start(e,s),this}stop(e){return this._clock.stop(e),this}pause(e){return this._clock.pause(e),this}toggle(e){return e=this.toSeconds(e),"started"!==this._clock.getStateAtTime(e)?this.start(e):this.stop(e),this}get timeSignature(){return this._timeSignature}set timeSignature(e){isArray(e)&&(e=e[0]/e[1]*4),this._timeSignature=e}get loopStart(){return new TimeClass(this.context,this._loopStart,"i").toSeconds()}set loopStart(e){this._loopStart=this.toTicks(e)}get loopEnd(){return new TimeClass(this.context,this._loopEnd,"i").toSeconds()}set loopEnd(e){this._loopEnd=this.toTicks(e)}get loop(){return this._loop.get(this.now())}set loop(e){this._loop.set(e,this.now())}setLoopPoints(e,t){return this.loopStart=e,this.loopEnd=t,this}get swing(){return this._swingAmount}set swing(e){this._swingAmount=e}get swingSubdivision(){return new TicksClass(this.context,this._swingTicks).toNotation()}set swingSubdivision(e){this._swingTicks=this.toTicks(e)}get position(){let e=this.now(),t=this._clock.getTicksAtTime(e);return new TicksClass(this.context,t).toBarsBeatsSixteenths()}set position(e){let t=this.toTicks(e);this.ticks=t}get seconds(){return this._clock.seconds}set seconds(e){let t=this.now(),s=this._clock.frequency.timeToTicks(e,t);this.ticks=s}get progress(){if(!this.loop)return 0;{let e=this.now(),t=this._clock.getTicksAtTime(e);return(t-this._loopStart)/(this._loopEnd-this._loopStart)}}get ticks(){return this._clock.ticks}set ticks(e){if(this._clock.ticks!==e){let t=this.now();if("started"===this.state){let s=this._clock.getTicksAtTime(t),i=this._clock.frequency.getDurationOfTicks(Math.ceil(s)-s,t),n=t+i;this.emit("stop",n),this._clock.setTicksAtTime(e,n),this.emit("start",n,this._clock.getSecondsAtTime(n))}else this._clock.setTicksAtTime(e,t)}}getTicksAtTime(e){return Math.round(this._clock.getTicksAtTime(e))}getSecondsAtTime(e){return this._clock.getSecondsAtTime(e)}get PPQ(){return this._clock.frequency.multiplier}set PPQ(e){this._clock.frequency.multiplier=e}nextSubdivision(e){if(e=this.toTicks(e),"started"!==this.state)return 0;{let t=this.now(),s=this.getTicksAtTime(t),i=e-s%e;return this._clock.nextTickTime(i,t)}}syncSignal(e,t){if(!t){let s=this.now();if(0!==e.getValueAtTime(s)){let i=this.bpm.getValueAtTime(s),n=1/(60/i/this.PPQ);t=e.getValueAtTime(s)/n}else t=0}let s=new Gain(t);return this.bpm.connect(s),s.connect(e._param),this._syncedSignals.push({initial:e.value,ratio:s,signal:e}),e.value=0,this}unsyncSignal(e){for(let t=this._syncedSignals.length-1;t>=0;t--){let s=this._syncedSignals[t];s.signal===e&&(s.ratio.dispose(),s.signal.value=s.initial,this._syncedSignals.splice(t,1))}return this}dispose(){return super.dispose(),this._clock.dispose(),writable(this,"bpm"),this._timeline.dispose(),this._repeatedEvents.dispose(),this}};Emitter.mixin(Transport),onContextInit(e=>{e.transport=new Transport({context:e})}),onContextClose(e=>{e.transport.dispose()});let Source=class Source extends ToneAudioNode{constructor(e){super(e),this.input=void 0,this._state=new StateTimeline("stopped"),this._synced=!1,this._scheduled=[],this._syncedStart=noOp,this._syncedStop=noOp,this._state.memory=100,this._state.increasing=!0,this._volume=this.output=new Volume({context:this.context,mute:e.mute,volume:e.volume}),this.volume=this._volume.volume,readOnly(this,"volume"),this.onstop=e.onstop}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,onstop:noOp,volume:0})}get state(){return this._synced?"started"===this.context.transport.state?this._state.getValueAtTime(this.context.transport.seconds):"stopped":this._state.getValueAtTime(this.now())}get mute(){return this._volume.mute}set mute(e){this._volume.mute=e}_clampToCurrentTime(e){return this._synced?e:Math.max(e,this.context.currentTime)}start(e,t,s){let i=isUndef(e)&&this._synced?this.context.transport.seconds:this.toSeconds(e);if(i=this._clampToCurrentTime(i),this._synced||"started"!==this._state.getValueAtTime(i)){if(this.log("start",i),this._state.setStateAtTime("started",i),this._synced){let e=this._state.get(i);e&&(e.offset=this.toSeconds(defaultArg(t,0)),e.duration=s?this.toSeconds(s):void 0);let n=this.context.transport.schedule(e=>{this._start(e,t,s)},i);this._scheduled.push(n),"started"===this.context.transport.state&&this.context.transport.getSecondsAtTime(this.immediate())>i&&this._syncedStart(this.now(),this.context.transport.seconds)}else assertContextRunning(this.context),this._start(i,t,s)}else assert(GT(i,this._state.get(i).time),"Start time must be strictly greater than previous start time"),this._state.cancel(i),this._state.setStateAtTime("started",i),this.log("restart",i),this.restart(i,t,s);return this}stop(e){let t=isUndef(e)&&this._synced?this.context.transport.seconds:this.toSeconds(e);if(t=this._clampToCurrentTime(t),"started"===this._state.getValueAtTime(t)||isDefined(this._state.getNextState("started",t))){if(this.log("stop",t),this._synced){let e=this.context.transport.schedule(this._stop.bind(this),t);this._scheduled.push(e)}else this._stop(t);this._state.cancel(t),this._state.setStateAtTime("stopped",t)}return this}restart(e,t,s){return e=this.toSeconds(e),"started"===this._state.getValueAtTime(e)&&(this._state.cancel(e),this._restart(e,t,s)),this}sync(){return this._synced||(this._synced=!0,this._syncedStart=(e,t)=>{if(t>0){let s=this._state.get(t);if(s&&"started"===s.state&&s.time!==t){let i;let n=t-this.toSeconds(s.time);s.duration&&(i=this.toSeconds(s.duration)-n),this._start(e,this.toSeconds(s.offset)+n,i)}}},this._syncedStop=e=>{let t=this.context.transport.getSecondsAtTime(Math.max(e-this.sampleTime,0));"started"===this._state.getValueAtTime(t)&&this._stop(e)},this.context.transport.on("start",this._syncedStart),this.context.transport.on("loopStart",this._syncedStart),this.context.transport.on("stop",this._syncedStop),this.context.transport.on("pause",this._syncedStop),this.context.transport.on("loopEnd",this._syncedStop)),this}unsync(){return this._synced&&(this.context.transport.off("stop",this._syncedStop),this.context.transport.off("pause",this._syncedStop),this.context.transport.off("loopEnd",this._syncedStop),this.context.transport.off("start",this._syncedStart),this.context.transport.off("loopStart",this._syncedStart)),this._synced=!1,this._scheduled.forEach(e=>this.context.transport.clear(e)),this._scheduled=[],this._state.cancel(0),this._stop(0),this}dispose(){return super.dispose(),this.onstop=noOp,this.unsync(),this._volume.dispose(),this._state.dispose(),this}};let ToneBufferSource=class ToneBufferSource extends OneShotSource{constructor(){super(optionsFromArguments(ToneBufferSource.getDefaults(),arguments,["url","onload"])),this.name="ToneBufferSource",this._source=this.context.createBufferSource(),this._internalChannels=[this._source],this._sourceStarted=!1,this._sourceStopped=!1;let e=optionsFromArguments(ToneBufferSource.getDefaults(),arguments,["url","onload"]);connect(this._source,this._gainNode),this._source.onended=()=>this._stopSource(),this.playbackRate=new Param({context:this.context,param:this._source.playbackRate,units:"positive",value:e.playbackRate}),this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this._buffer=new ToneAudioBuffer(e.url,e.onload,e.onerror),this._internalChannels.push(this._source)}static getDefaults(){return Object.assign(OneShotSource.getDefaults(),{url:new ToneAudioBuffer,loop:!1,loopEnd:0,loopStart:0,onload:noOp,onerror:noOp,playbackRate:1})}get fadeIn(){return this._fadeIn}set fadeIn(e){this._fadeIn=e}get fadeOut(){return this._fadeOut}set fadeOut(e){this._fadeOut=e}get curve(){return this._curve}set curve(e){this._curve=e}start(e,t,s,i=1){assert(this.buffer.loaded,"buffer is either not set or not loaded");let n=this.toSeconds(e);this._startGain(n,i),t=this.loop?defaultArg(t,this.loopStart):defaultArg(t,0);let o=Math.max(this.toSeconds(t),0);if(this.loop){let e=this.toSeconds(this.loopEnd)||this.buffer.duration,t=this.toSeconds(this.loopStart),s=e-t;GTE(o,e)&&(o=(o-t)%s+t),EQ(o,this.buffer.duration)&&(o=0)}if(this._source.buffer=this.buffer.get(),this._source.loopEnd=this.toSeconds(this.loopEnd)||this.buffer.duration,o+1e-6<this.buffer.duration&&(this._sourceStarted=!0,this._source.start(n,o)),isDefined(s)){let e=this.toSeconds(s);e=Math.max(e,0),this.stop(n+e)}return this}_stopSource(e){!this._sourceStopped&&this._sourceStarted&&(this._sourceStopped=!0,this._source.stop(this.toSeconds(e)),this._onended())}get loopStart(){return this._source.loopStart}set loopStart(e){this._source.loopStart=this.toSeconds(e)}get loopEnd(){return this._source.loopEnd}set loopEnd(e){this._source.loopEnd=this.toSeconds(e)}get buffer(){return this._buffer}set buffer(e){this._buffer.set(e)}get loop(){return this._source.loop}set loop(e){this._source.loop=e,this._sourceStarted&&this.cancelStop()}dispose(){return super.dispose(),this._source.onended=null,this._source.disconnect(),this._buffer.dispose(),this.playbackRate.dispose(),this}};let Noise=class Noise extends Source{constructor(){super(optionsFromArguments(Noise.getDefaults(),arguments,["type"])),this.name="Noise",this._source=null;let e=optionsFromArguments(Noise.getDefaults(),arguments,["type"]);this._playbackRate=e.playbackRate,this.type=e.type,this._fadeIn=e.fadeIn,this._fadeOut=e.fadeOut}static getDefaults(){return Object.assign(Source.getDefaults(),{fadeIn:0,fadeOut:0,playbackRate:1,type:"white"})}get type(){return this._type}set type(e){if(assert(e in sM,"Noise: invalid type: "+e),this._type!==e&&(this._type=e,"started"===this.state)){let e=this.now();this._stop(e),this._start(e)}}get playbackRate(){return this._playbackRate}set playbackRate(e){this._playbackRate=e,this._source&&(this._source.playbackRate.value=e)}_start(e){let t=sM[this._type];this._source=new ToneBufferSource({url:t,context:this.context,fadeIn:this._fadeIn,fadeOut:this._fadeOut,loop:!0,onended:()=>this.onstop(this),playbackRate:this._playbackRate}).connect(this.output),this._source.start(this.toSeconds(e),Math.random()*(t.duration-.001))}_stop(e){this._source&&(this._source.stop(this.toSeconds(e)),this._source=null)}get fadeIn(){return this._fadeIn}set fadeIn(e){this._fadeIn=e,this._source&&(this._source.fadeIn=this._fadeIn)}get fadeOut(){return this._fadeOut}set fadeOut(e){this._fadeOut=e,this._source&&(this._source.fadeOut=this._fadeOut)}_restart(e){this._stop(e),this._start(e)}dispose(){return super.dispose(),this._source&&this._source.disconnect(),this}};let sk={brown:null,pink:null,white:null},sM={get brown(){if(!sk.brown){let e=[];for(let t=0;t<2;t++){let s=new Float32Array(220500);e[t]=s;let i=0;for(let e=0;e<220500;e++){let t=2*Math.random()-1;s[e]=(i+.02*t)/1.02,i=s[e],s[e]*=3.5}}sk.brown=new ToneAudioBuffer().fromArray(e)}return sk.brown},get pink(){if(!sk.pink){let e=[];for(let t=0;t<2;t++){let s,i,n,o,r,a,l;let u=new Float32Array(220500);e[t]=u,s=i=n=o=r=a=l=0;for(let e=0;e<220500;e++){let t=2*Math.random()-1;s=.99886*s+.0555179*t,i=.99332*i+.0750759*t,n=.969*n+.153852*t,o=.8665*o+.3104856*t,r=.55*r+.5329522*t,a=-.7616*a-.016898*t,u[e]=s+i+n+o+r+a+l+.5362*t,u[e]*=.11,l=.115926*t}}sk.pink=new ToneAudioBuffer().fromArray(e)}return sk.pink},get white(){if(!sk.white){let e=[];for(let t=0;t<2;t++){let s=new Float32Array(220500);e[t]=s;for(let e=0;e<220500;e++)s[e]=2*Math.random()-1}sk.white=new ToneAudioBuffer().fromArray(e)}return sk.white}};let UserMedia=class UserMedia extends ToneAudioNode{constructor(){super(optionsFromArguments(UserMedia.getDefaults(),arguments,["volume"])),this.name="UserMedia";let e=optionsFromArguments(UserMedia.getDefaults(),arguments,["volume"]);this._volume=this.output=new Volume({context:this.context,volume:e.volume}),this.volume=this._volume.volume,readOnly(this,"volume"),this.mute=e.mute}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,volume:0})}open(e){return(0,sx.mG)(this,void 0,void 0,function*(){assert(UserMedia.supported,"UserMedia is not supported"),"started"===this.state&&this.close();let t=yield UserMedia.enumerateDevices();isNumber(e)?this._device=t[e]:(this._device=t.find(t=>t.label===e||t.deviceId===e),!this._device&&t.length>0&&(this._device=t[0]),assert(isDefined(this._device),`No matching device ${e}`));let s={audio:{echoCancellation:!1,sampleRate:this.context.sampleRate,noiseSuppression:!1,mozNoiseSuppression:!1}};this._device&&(s.audio.deviceId=this._device.deviceId);let i=yield navigator.mediaDevices.getUserMedia(s);if(!this._stream){this._stream=i;let e=this.context.createMediaStreamSource(i);connect(e,this.output),this._mediaStream=e}return this})}close(){return this._stream&&this._mediaStream&&(this._stream.getAudioTracks().forEach(e=>{e.stop()}),this._stream=void 0,this._mediaStream.disconnect(),this._mediaStream=void 0),this._device=void 0,this}static enumerateDevices(){return(0,sx.mG)(this,void 0,void 0,function*(){let e=yield navigator.mediaDevices.enumerateDevices();return e.filter(e=>"audioinput"===e.kind)})}get state(){return this._stream&&this._stream.active?"started":"stopped"}get deviceId(){return this._device?this._device.deviceId:void 0}get groupId(){return this._device?this._device.groupId:void 0}get label(){return this._device?this._device.label:void 0}get mute(){return this._volume.mute}set mute(e){this._volume.mute=e}dispose(){return super.dispose(),this.close(),this._volume.dispose(),this.volume.dispose(),this}static get supported(){return isDefined(navigator.mediaDevices)&&isDefined(navigator.mediaDevices.getUserMedia)}};function generateWaveform(e,t){return(0,sx.mG)(this,void 0,void 0,function*(){let s=t/e.context.sampleRate,i=new OfflineContext(1,s,e.context.sampleRate),n=new e.constructor(Object.assign(e.get(),{frequency:2/s,detune:0,context:i})).toDestination();n.start(0);let o=yield i.render();return o.getChannelData(0)})}let ToneOscillatorNode=class ToneOscillatorNode extends OneShotSource{constructor(){super(optionsFromArguments(ToneOscillatorNode.getDefaults(),arguments,["frequency","type"])),this.name="ToneOscillatorNode",this._oscillator=this.context.createOscillator(),this._internalChannels=[this._oscillator];let e=optionsFromArguments(ToneOscillatorNode.getDefaults(),arguments,["frequency","type"]);connect(this._oscillator,this._gainNode),this.type=e.type,this.frequency=new Param({context:this.context,param:this._oscillator.frequency,units:"frequency",value:e.frequency}),this.detune=new Param({context:this.context,param:this._oscillator.detune,units:"cents",value:e.detune}),readOnly(this,["frequency","detune"])}static getDefaults(){return Object.assign(OneShotSource.getDefaults(),{detune:0,frequency:440,type:"sine"})}start(e){let t=this.toSeconds(e);return this.log("start",t),this._startGain(t),this._oscillator.start(t),this}_stopSource(e){this._oscillator.stop(e)}setPeriodicWave(e){return this._oscillator.setPeriodicWave(e),this}get type(){return this._oscillator.type}set type(e){this._oscillator.type=e}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._oscillator.disconnect(),this.frequency.dispose(),this.detune.dispose(),this}};let Oscillator=class Oscillator extends Source{constructor(){super(optionsFromArguments(Oscillator.getDefaults(),arguments,["frequency","type"])),this.name="Oscillator",this._oscillator=null;let e=optionsFromArguments(Oscillator.getDefaults(),arguments,["frequency","type"]);this.frequency=new Signal({context:this.context,units:"frequency",value:e.frequency}),readOnly(this,"frequency"),this.detune=new Signal({context:this.context,units:"cents",value:e.detune}),readOnly(this,"detune"),this._partials=e.partials,this._partialCount=e.partialCount,this._type=e.type,e.partialCount&&"custom"!==e.type&&(this._type=this.baseType+e.partialCount.toString()),this.phase=e.phase}static getDefaults(){return Object.assign(Source.getDefaults(),{detune:0,frequency:440,partialCount:0,partials:[],phase:0,type:"sine"})}_start(e){let t=this.toSeconds(e),s=new ToneOscillatorNode({context:this.context,onended:()=>this.onstop(this)});this._oscillator=s,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.start(t)}_stop(e){let t=this.toSeconds(e);this._oscillator&&this._oscillator.stop(t)}_restart(e){let t=this.toSeconds(e);return this.log("restart",t),this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(t),this}syncFrequency(){return this.context.transport.syncSignal(this.frequency),this}unsyncFrequency(){return this.context.transport.unsyncSignal(this.frequency),this}_getCachedPeriodicWave(){if("custom"===this._type){let e=Oscillator._periodicWaveCache.find(e=>{var t,s;return e.phase===this._phase&&(t=e.partials,s=this._partials,t.length===s.length&&t.every((e,t)=>s[t]===e))});return e}{let e=Oscillator._periodicWaveCache.find(e=>e.type===this._type&&e.phase===this._phase);return this._partialCount=e?e.partialCount:this._partialCount,e}}get type(){return this._type}set type(e){this._type=e;let t=-1!==["sine","square","sawtooth","triangle"].indexOf(e);if(0===this._phase&&t)this._wave=void 0,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=e);else{let t=this._getCachedPeriodicWave();if(isDefined(t)){let{partials:e,wave:s}=t;this._wave=s,this._partials=e,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}else{let[t,s]=this._getRealImaginary(e,this._phase),i=this.context.createPeriodicWave(t,s);this._wave=i,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave),Oscillator._periodicWaveCache.push({imag:s,partialCount:this._partialCount,partials:this._partials,phase:this._phase,real:t,type:this._type,wave:this._wave}),Oscillator._periodicWaveCache.length>100&&Oscillator._periodicWaveCache.shift()}}}get baseType(){return this._type.replace(this.partialCount.toString(),"")}set baseType(e){this.partialCount&&"custom"!==this._type&&"custom"!==e?this.type=e+this.partialCount:this.type=e}get partialCount(){return this._partialCount}set partialCount(e){assertRange(e,0);let t=this._type,s=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);if(s&&(t=s[1]),"custom"!==this._type)0===e?this.type=t:this.type=t+e.toString();else{let t=new Float32Array(e);this._partials.forEach((e,s)=>t[s]=e),this._partials=Array.from(t),this.type=this._type}}_getRealImaginary(e,t){let s=2048,i=new Float32Array(s),n=new Float32Array(s),o=1;if("custom"===e){if(o=this._partials.length+1,this._partialCount=this._partials.length,s=o,0===this._partials.length)return[i,n]}else{let t=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(e);t?(o=parseInt(t[2],10)+1,this._partialCount=parseInt(t[2],10),e=t[1],s=o=Math.max(o,2)):this._partialCount=0,this._partials=[]}for(let r=1;r<s;++r){let s;let a=2/(r*Math.PI);switch(e){case"sine":s=r<=o?1:0,this._partials[r-1]=s;break;case"square":s=1&r?2*a:0,this._partials[r-1]=s;break;case"sawtooth":s=a*(1&r?1:-1),this._partials[r-1]=s;break;case"triangle":s=1&r?2*(a*a)*(r-1>>1&1?-1:1):0,this._partials[r-1]=s;break;case"custom":s=this._partials[r-1];break;default:throw TypeError("Oscillator: invalid type: "+e)}0!==s?(i[r]=-s*Math.sin(t*r),n[r]=s*Math.cos(t*r)):(i[r]=0,n[r]=0)}return[i,n]}_inverseFFT(e,t,s){let i=0,n=e.length;for(let o=0;o<n;o++)i+=e[o]*Math.cos(o*s)+t[o]*Math.sin(o*s);return i}getInitialValue(){let[e,t]=this._getRealImaginary(this._type,0),s=0,i=2*Math.PI;for(let n=0;n<32;n++)s=Math.max(this._inverseFFT(e,t,n/32*i),s);return clamp(-this._inverseFFT(e,t,this._phase)/s,-1,1)}get partials(){return this._partials.slice(0,this.partialCount)}set partials(e){this._partials=e,this._partialCount=this._partials.length,e.length&&(this.type="custom")}get phase(){return this._phase*(180/Math.PI)}set phase(e){this._phase=e*Math.PI/180,this.type=this._type}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){return generateWaveform(this,e)})}dispose(){return super.dispose(),null!==this._oscillator&&this._oscillator.dispose(),this._wave=void 0,this.frequency.dispose(),this.detune.dispose(),this}};Oscillator._periodicWaveCache=[];let SignalOperator=class SignalOperator extends ToneAudioNode{constructor(){super(Object.assign(optionsFromArguments(SignalOperator.getDefaults(),arguments,["context"])))}connect(e,t=0,s=0){return connectSignal(this,e,t,s),this}};let WaveShaper=class WaveShaper extends SignalOperator{constructor(){super(Object.assign(optionsFromArguments(WaveShaper.getDefaults(),arguments,["mapping","length"]))),this.name="WaveShaper",this._shaper=this.context.createWaveShaper(),this.input=this._shaper,this.output=this._shaper;let e=optionsFromArguments(WaveShaper.getDefaults(),arguments,["mapping","length"]);isArray(e.mapping)||e.mapping instanceof Float32Array?this.curve=Float32Array.from(e.mapping):isFunction(e.mapping)&&this.setMap(e.mapping,e.length)}static getDefaults(){return Object.assign(Signal.getDefaults(),{length:1024})}setMap(e,t=1024){let s=new Float32Array(t);for(let i=0;i<t;i++){let n=i/(t-1)*2-1;s[i]=e(n,i)}return this.curve=s,this}get curve(){return this._shaper.curve}set curve(e){this._shaper.curve=e}get oversample(){return this._shaper.oversample}set oversample(e){let t=["none","2x","4x"].some(t=>t.includes(e));assert(t,"oversampling must be either 'none', '2x', or '4x'"),this._shaper.oversample=e}dispose(){return super.dispose(),this._shaper.disconnect(),this}};let AudioToGain=class AudioToGain extends SignalOperator{constructor(){super(...arguments),this.name="AudioToGain",this._norm=new WaveShaper({context:this.context,mapping:e=>(e+1)/2}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}};let Multiply=class Multiply extends Signal{constructor(){super(Object.assign(optionsFromArguments(Multiply.getDefaults(),arguments,["value"]))),this.name="Multiply",this.override=!1;let e=optionsFromArguments(Multiply.getDefaults(),arguments,["value"]);this._mult=this.input=this.output=new Gain({context:this.context,minValue:e.minValue,maxValue:e.maxValue}),this.factor=this._param=this._mult.gain,this.factor.setValueAtTime(e.value,0)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._mult.dispose(),this}};let AMOscillator=class AMOscillator extends Source{constructor(){super(optionsFromArguments(AMOscillator.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="AMOscillator",this._modulationScale=new AudioToGain({context:this.context}),this._modulationNode=new Gain({context:this.context});let e=optionsFromArguments(AMOscillator.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new Oscillator({context:this.context,detune:e.detune,frequency:e.frequency,onstop:()=>this.onstop(this),phase:e.phase,type:e.type}),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this._modulator=new Oscillator({context:this.context,phase:e.phase,type:e.modulationType}),this.harmonicity=new Multiply({context:this.context,units:"positive",value:e.harmonicity}),this.frequency.chain(this.harmonicity,this._modulator.frequency),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),readOnly(this,["frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{harmonicity:1,modulationType:"square"})}_start(e){this._modulator.start(e),this._carrier.start(e)}_stop(e){this._modulator.stop(e),this._carrier.stop(e)}_restart(e){this._modulator.restart(e),this._carrier.restart(e)}get type(){return this._carrier.type}set type(e){this._carrier.type=e}get baseType(){return this._carrier.baseType}set baseType(e){this._carrier.baseType=e}get partialCount(){return this._carrier.partialCount}set partialCount(e){this._carrier.partialCount=e}get modulationType(){return this._modulator.type}set modulationType(e){this._modulator.type=e}get phase(){return this._carrier.phase}set phase(e){this._carrier.phase=e,this._modulator.phase=e}get partials(){return this._carrier.partials}set partials(e){this._carrier.partials=e}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){return generateWaveform(this,e)})}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this._modulationScale.dispose(),this}};let FMOscillator=class FMOscillator extends Source{constructor(){super(optionsFromArguments(FMOscillator.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="FMOscillator",this._modulationNode=new Gain({context:this.context,gain:0});let e=optionsFromArguments(FMOscillator.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new Oscillator({context:this.context,detune:e.detune,frequency:0,onstop:()=>this.onstop(this),phase:e.phase,type:e.type}),this.detune=this._carrier.detune,this.frequency=new Signal({context:this.context,units:"frequency",value:e.frequency}),this._modulator=new Oscillator({context:this.context,phase:e.phase,type:e.modulationType}),this.harmonicity=new Multiply({context:this.context,units:"positive",value:e.harmonicity}),this.modulationIndex=new Multiply({context:this.context,units:"positive",value:e.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),readOnly(this,["modulationIndex","frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{harmonicity:1,modulationIndex:2,modulationType:"square"})}_start(e){this._modulator.start(e),this._carrier.start(e)}_stop(e){this._modulator.stop(e),this._carrier.stop(e)}_restart(e){return this._modulator.restart(e),this._carrier.restart(e),this}get type(){return this._carrier.type}set type(e){this._carrier.type=e}get baseType(){return this._carrier.baseType}set baseType(e){this._carrier.baseType=e}get partialCount(){return this._carrier.partialCount}set partialCount(e){this._carrier.partialCount=e}get modulationType(){return this._modulator.type}set modulationType(e){this._modulator.type=e}get phase(){return this._carrier.phase}set phase(e){this._carrier.phase=e,this._modulator.phase=e}get partials(){return this._carrier.partials}set partials(e){this._carrier.partials=e}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){return generateWaveform(this,e)})}dispose(){return super.dispose(),this.frequency.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this.modulationIndex.dispose(),this}};let PulseOscillator=class PulseOscillator extends Source{constructor(){super(optionsFromArguments(PulseOscillator.getDefaults(),arguments,["frequency","width"])),this.name="PulseOscillator",this._widthGate=new Gain({context:this.context,gain:0}),this._thresh=new WaveShaper({context:this.context,mapping:e=>e<=0?-1:1});let e=optionsFromArguments(PulseOscillator.getDefaults(),arguments,["frequency","width"]);this.width=new Signal({context:this.context,units:"audioRange",value:e.width}),this._triangle=new Oscillator({context:this.context,detune:e.detune,frequency:e.frequency,onstop:()=>this.onstop(this),phase:e.phase,type:"triangle"}),this.frequency=this._triangle.frequency,this.detune=this._triangle.detune,this._triangle.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),readOnly(this,["width","frequency","detune"])}static getDefaults(){return Object.assign(Source.getDefaults(),{detune:0,frequency:440,phase:0,type:"pulse",width:.2})}_start(e){e=this.toSeconds(e),this._triangle.start(e),this._widthGate.gain.setValueAtTime(1,e)}_stop(e){e=this.toSeconds(e),this._triangle.stop(e),this._widthGate.gain.cancelScheduledValues(e),this._widthGate.gain.setValueAtTime(0,e)}_restart(e){this._triangle.restart(e),this._widthGate.gain.cancelScheduledValues(e),this._widthGate.gain.setValueAtTime(1,e)}get phase(){return this._triangle.phase}set phase(e){this._triangle.phase=e}get type(){return"pulse"}get baseType(){return"pulse"}get partials(){return[]}get partialCount(){return 0}set carrierType(e){this._triangle.type=e}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){return generateWaveform(this,e)})}dispose(){return super.dispose(),this._triangle.dispose(),this.width.dispose(),this._widthGate.dispose(),this._thresh.dispose(),this}};let FatOscillator=class FatOscillator extends Source{constructor(){super(optionsFromArguments(FatOscillator.getDefaults(),arguments,["frequency","type","spread"])),this.name="FatOscillator",this._oscillators=[];let e=optionsFromArguments(FatOscillator.getDefaults(),arguments,["frequency","type","spread"]);this.frequency=new Signal({context:this.context,units:"frequency",value:e.frequency}),this.detune=new Signal({context:this.context,units:"cents",value:e.detune}),this._spread=e.spread,this._type=e.type,this._phase=e.phase,this._partials=e.partials,this._partialCount=e.partialCount,this.count=e.count,readOnly(this,["frequency","detune"])}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{count:3,spread:20,type:"sawtooth"})}_start(e){e=this.toSeconds(e),this._forEach(t=>t.start(e))}_stop(e){e=this.toSeconds(e),this._forEach(t=>t.stop(e))}_restart(e){this._forEach(t=>t.restart(e))}_forEach(e){for(let t=0;t<this._oscillators.length;t++)e(this._oscillators[t],t)}get type(){return this._type}set type(e){this._type=e,this._forEach(t=>t.type=e)}get spread(){return this._spread}set spread(e){if(this._spread=e,this._oscillators.length>1){let t=-e/2,s=e/(this._oscillators.length-1);this._forEach((e,i)=>e.detune.value=t+s*i)}}get count(){return this._oscillators.length}set count(e){if(assertRange(e,1),this._oscillators.length!==e){this._forEach(e=>e.dispose()),this._oscillators=[];for(let t=0;t<e;t++){let s=new Oscillator({context:this.context,volume:-6-1.1*e,type:this._type,phase:this._phase+t/e*360,partialCount:this._partialCount,onstop:0===t?()=>this.onstop(this):noOp});"custom"===this.type&&(s.partials=this._partials),this.frequency.connect(s.frequency),this.detune.connect(s.detune),s.detune.overridden=!1,s.connect(this.output),this._oscillators[t]=s}this.spread=this._spread,"started"===this.state&&this._forEach(e=>e.start())}}get phase(){return this._phase}set phase(e){this._phase=e,this._forEach((e,t)=>e.phase=this._phase+t/this.count*360)}get baseType(){return this._oscillators[0].baseType}set baseType(e){this._forEach(t=>t.baseType=e),this._type=this._oscillators[0].type}get partials(){return this._oscillators[0].partials}set partials(e){this._partials=e,this._partialCount=this._partials.length,e.length&&(this._type="custom",this._forEach(t=>t.partials=e))}get partialCount(){return this._oscillators[0].partialCount}set partialCount(e){this._partialCount=e,this._forEach(t=>t.partialCount=e),this._type=this._oscillators[0].type}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){return generateWaveform(this,e)})}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this._forEach(e=>e.dispose()),this}};let PWMOscillator=class PWMOscillator extends Source{constructor(){super(optionsFromArguments(PWMOscillator.getDefaults(),arguments,["frequency","modulationFrequency"])),this.name="PWMOscillator",this.sourceType="pwm",this._scale=new Multiply({context:this.context,value:2});let e=optionsFromArguments(PWMOscillator.getDefaults(),arguments,["frequency","modulationFrequency"]);this._pulse=new PulseOscillator({context:this.context,frequency:e.modulationFrequency}),this._pulse.carrierType="sine",this.modulationFrequency=this._pulse.frequency,this._modulator=new Oscillator({context:this.context,detune:e.detune,frequency:e.frequency,onstop:()=>this.onstop(this),phase:e.phase}),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),readOnly(this,["modulationFrequency","frequency","detune"])}static getDefaults(){return Object.assign(Source.getDefaults(),{detune:0,frequency:440,modulationFrequency:.4,phase:0,type:"pwm"})}_start(e){e=this.toSeconds(e),this._modulator.start(e),this._pulse.start(e)}_stop(e){e=this.toSeconds(e),this._modulator.stop(e),this._pulse.stop(e)}_restart(e){this._modulator.restart(e),this._pulse.restart(e)}get type(){return"pwm"}get baseType(){return"pwm"}get partials(){return[]}get partialCount(){return 0}get phase(){return this._modulator.phase}set phase(e){this._modulator.phase=e}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){return generateWaveform(this,e)})}dispose(){return super.dispose(),this._pulse.dispose(),this._scale.dispose(),this._modulator.dispose(),this}};let sD={am:AMOscillator,fat:FatOscillator,fm:FMOscillator,oscillator:Oscillator,pulse:PulseOscillator,pwm:PWMOscillator};let OmniOscillator=class OmniOscillator extends Source{constructor(){super(optionsFromArguments(OmniOscillator.getDefaults(),arguments,["frequency","type"])),this.name="OmniOscillator";let e=optionsFromArguments(OmniOscillator.getDefaults(),arguments,["frequency","type"]);this.frequency=new Signal({context:this.context,units:"frequency",value:e.frequency}),this.detune=new Signal({context:this.context,units:"cents",value:e.detune}),readOnly(this,["frequency","detune"]),this.set(e)}static getDefaults(){return Object.assign(Oscillator.getDefaults(),FMOscillator.getDefaults(),AMOscillator.getDefaults(),FatOscillator.getDefaults(),PulseOscillator.getDefaults(),PWMOscillator.getDefaults())}_start(e){this._oscillator.start(e)}_stop(e){this._oscillator.stop(e)}_restart(e){return this._oscillator.restart(e),this}get type(){let e="";return["am","fm","fat"].some(e=>this._sourceType===e)&&(e=this._sourceType),e+this._oscillator.type}set type(e){"fm"===e.substr(0,2)?(this._createNewOscillator("fm"),this._oscillator=this._oscillator,this._oscillator.type=e.substr(2)):"am"===e.substr(0,2)?(this._createNewOscillator("am"),this._oscillator=this._oscillator,this._oscillator.type=e.substr(2)):"fat"===e.substr(0,3)?(this._createNewOscillator("fat"),this._oscillator=this._oscillator,this._oscillator.type=e.substr(3)):"pwm"===e?(this._createNewOscillator("pwm"),this._oscillator=this._oscillator):"pulse"===e?this._createNewOscillator("pulse"):(this._createNewOscillator("oscillator"),this._oscillator=this._oscillator,this._oscillator.type=e)}get partials(){return this._oscillator.partials}set partials(e){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partials=e)}get partialCount(){return this._oscillator.partialCount}set partialCount(e){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partialCount=e)}set(e){return Reflect.has(e,"type")&&e.type&&(this.type=e.type),super.set(e),this}_createNewOscillator(e){if(e!==this._sourceType){this._sourceType=e;let t=sD[e],s=this.now();if(this._oscillator){let e=this._oscillator;e.stop(s),this.context.setTimeout(()=>e.dispose(),this.blockTime)}this._oscillator=new t({context:this.context}),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this._oscillator.onstop=()=>this.onstop(this),"started"===this.state&&this._oscillator.start(s)}}get phase(){return this._oscillator.phase}set phase(e){this._oscillator.phase=e}get sourceType(){return this._sourceType}set sourceType(e){let t="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(t=this._oscillator.type),"fm"===e?this.type="fm"+t:"am"===e?this.type="am"+t:"fat"===e?this.type="fat"+t:"oscillator"===e?this.type=t:"pulse"===e?this.type="pulse":"pwm"===e&&(this.type="pwm")}_getOscType(e,t){return e instanceof sD[t]}get baseType(){return this._oscillator.baseType}set baseType(e){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||"pulse"===e||"pwm"===e||(this._oscillator.baseType=e)}get width(){return this._getOscType(this._oscillator,"pulse")?this._oscillator.width:void 0}get count(){return this._getOscType(this._oscillator,"fat")?this._oscillator.count:void 0}set count(e){this._getOscType(this._oscillator,"fat")&&isNumber(e)&&(this._oscillator.count=e)}get spread(){return this._getOscType(this._oscillator,"fat")?this._oscillator.spread:void 0}set spread(e){this._getOscType(this._oscillator,"fat")&&isNumber(e)&&(this._oscillator.spread=e)}get modulationType(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.modulationType:void 0}set modulationType(e){(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))&&isString(e)&&(this._oscillator.modulationType=e)}get modulationIndex(){return this._getOscType(this._oscillator,"fm")?this._oscillator.modulationIndex:void 0}get harmonicity(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.harmonicity:void 0}get modulationFrequency(){return this._getOscType(this._oscillator,"pwm")?this._oscillator.modulationFrequency:void 0}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){return generateWaveform(this,e)})}dispose(){return super.dispose(),this.detune.dispose(),this.frequency.dispose(),this._oscillator.dispose(),this}};let Add=class Add extends Signal{constructor(){super(Object.assign(optionsFromArguments(Add.getDefaults(),arguments,["value"]))),this.override=!1,this.name="Add",this._sum=new Gain({context:this.context}),this.input=this._sum,this.output=this._sum,this.addend=this._param,connectSeries(this._constantSource,this._sum)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._sum.dispose(),this}};let Scale=class Scale extends SignalOperator{constructor(){super(Object.assign(optionsFromArguments(Scale.getDefaults(),arguments,["min","max"]))),this.name="Scale";let e=optionsFromArguments(Scale.getDefaults(),arguments,["min","max"]);this._mult=this.input=new Multiply({context:this.context,value:e.max-e.min}),this._add=this.output=new Add({context:this.context,value:e.min}),this._min=e.min,this._max=e.max,this.input.connect(this.output)}static getDefaults(){return Object.assign(SignalOperator.getDefaults(),{max:1,min:0})}get min(){return this._min}set min(e){this._min=e,this._setRange()}get max(){return this._max}set max(e){this._max=e,this._setRange()}_setRange(){this._add.value=this._min,this._mult.value=this._max-this._min}dispose(){return super.dispose(),this._add.dispose(),this._mult.dispose(),this}};let Zero=class Zero extends SignalOperator{constructor(){super(Object.assign(optionsFromArguments(Zero.getDefaults(),arguments))),this.name="Zero",this._gain=new Gain({context:this.context}),this.output=this._gain,this.input=void 0,connect(this.context.getConstant(0),this._gain)}dispose(){return super.dispose(),disconnect(this.context.getConstant(0),this._gain),this}};let LFO=class LFO extends ToneAudioNode{constructor(){super(optionsFromArguments(LFO.getDefaults(),arguments,["frequency","min","max"])),this.name="LFO",this._stoppedValue=0,this._units="number",this.convert=!0,this._fromType=Param.prototype._fromType,this._toType=Param.prototype._toType,this._is=Param.prototype._is,this._clampValue=Param.prototype._clampValue;let e=optionsFromArguments(LFO.getDefaults(),arguments,["frequency","min","max"]);this._oscillator=new Oscillator(e),this.frequency=this._oscillator.frequency,this._amplitudeGain=new Gain({context:this.context,gain:e.amplitude,units:"normalRange"}),this.amplitude=this._amplitudeGain.gain,this._stoppedSignal=new Signal({context:this.context,units:"audioRange",value:0}),this._zeros=new Zero({context:this.context}),this._a2g=new AudioToGain({context:this.context}),this._scaler=this.output=new Scale({context:this.context,max:e.max,min:e.min}),this.units=e.units,this.min=e.min,this.max=e.max,this._oscillator.chain(this._amplitudeGain,this._a2g,this._scaler),this._zeros.connect(this._a2g),this._stoppedSignal.connect(this._a2g),readOnly(this,["amplitude","frequency"]),this.phase=e.phase}static getDefaults(){return Object.assign(Oscillator.getDefaults(),{amplitude:1,frequency:"4n",max:1,min:0,type:"sine",units:"number"})}start(e){return e=this.toSeconds(e),this._stoppedSignal.setValueAtTime(0,e),this._oscillator.start(e),this}stop(e){return e=this.toSeconds(e),this._stoppedSignal.setValueAtTime(this._stoppedValue,e),this._oscillator.stop(e),this}sync(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this}unsync(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this}_setStoppedValue(){this._stoppedValue=this._oscillator.getInitialValue(),this._stoppedSignal.value=this._stoppedValue}get min(){return this._toType(this._scaler.min)}set min(e){e=this._fromType(e),this._scaler.min=e}get max(){return this._toType(this._scaler.max)}set max(e){e=this._fromType(e),this._scaler.max=e}get type(){return this._oscillator.type}set type(e){this._oscillator.type=e,this._setStoppedValue()}get partials(){return this._oscillator.partials}set partials(e){this._oscillator.partials=e,this._setStoppedValue()}get phase(){return this._oscillator.phase}set phase(e){this._oscillator.phase=e,this._setStoppedValue()}get units(){return this._units}set units(e){let t=this.min,s=this.max;this._units=e,this.min=t,this.max=s}get state(){return this._oscillator.state}connect(e,t,s){return(e instanceof Param||e instanceof Signal)&&(this.convert=e.convert,this.units=e.units),connectSignal(this,e,t,s),this}dispose(){return super.dispose(),this._oscillator.dispose(),this._stoppedSignal.dispose(),this._zeros.dispose(),this._scaler.dispose(),this._a2g.dispose(),this._amplitudeGain.dispose(),this.amplitude.dispose(),this}};function range(e,t=1/0){let s=new WeakMap;return function(i,n){Reflect.defineProperty(i,n,{configurable:!0,enumerable:!0,get:function(){return s.get(this)},set:function(i){assertRange(i,e,t),s.set(this,i)}})}}function timeRange(e,t=1/0){let s=new WeakMap;return function(i,n){Reflect.defineProperty(i,n,{configurable:!0,enumerable:!0,get:function(){return s.get(this)},set:function(i){assertRange(this.toSeconds(i),e,t),s.set(this,i)}})}}let Player=class Player extends Source{constructor(){super(optionsFromArguments(Player.getDefaults(),arguments,["url","onload"])),this.name="Player",this._activeSources=new Set;let e=optionsFromArguments(Player.getDefaults(),arguments,["url","onload"]);this._buffer=new ToneAudioBuffer({onload:this._onload.bind(this,e.onload),onerror:e.onerror,reverse:e.reverse,url:e.url}),this.autostart=e.autostart,this._loop=e.loop,this._loopStart=e.loopStart,this._loopEnd=e.loopEnd,this._playbackRate=e.playbackRate,this.fadeIn=e.fadeIn,this.fadeOut=e.fadeOut}static getDefaults(){return Object.assign(Source.getDefaults(),{autostart:!1,fadeIn:0,fadeOut:0,loop:!1,loopEnd:0,loopStart:0,onload:noOp,onerror:noOp,playbackRate:1,reverse:!1})}load(e){return(0,sx.mG)(this,void 0,void 0,function*(){return yield this._buffer.load(e),this._onload(),this})}_onload(e=noOp){e(),this.autostart&&this.start()}_onSourceEnd(e){this.onstop(this),this._activeSources.delete(e),0!==this._activeSources.size||this._synced||"started"!==this._state.getValueAtTime(this.now())||(this._state.cancel(this.now()),this._state.setStateAtTime("stopped",this.now()))}start(e,t,s){return super.start(e,t,s),this}_start(e,t,s){t=this._loop?defaultArg(t,this._loopStart):defaultArg(t,0);let i=this.toSeconds(t),n=s;s=defaultArg(s,Math.max(this._buffer.duration-i,0));let o=this.toSeconds(s);o/=this._playbackRate,e=this.toSeconds(e);let r=new ToneBufferSource({url:this._buffer,context:this.context,fadeIn:this.fadeIn,fadeOut:this.fadeOut,loop:this._loop,loopEnd:this._loopEnd,loopStart:this._loopStart,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate}).connect(this.output);this._loop||this._synced||(this._state.cancel(e+o),this._state.setStateAtTime("stopped",e+o,{implicitEnd:!0})),this._activeSources.add(r),this._loop&&isUndef(n)?r.start(e,i):r.start(e,i,o-this.toSeconds(this.fadeOut))}_stop(e){let t=this.toSeconds(e);this._activeSources.forEach(e=>e.stop(t))}restart(e,t,s){return super.restart(e,t,s),this}_restart(e,t,s){this._stop(e),this._start(e,t,s)}seek(e,t){let s=this.toSeconds(t);if("started"===this._state.getValueAtTime(s)){let t=this.toSeconds(e);this._stop(s),this._start(s,t)}return this}setLoopPoints(e,t){return this.loopStart=e,this.loopEnd=t,this}get loopStart(){return this._loopStart}set loopStart(e){this._loopStart=e,this.buffer.loaded&&assertRange(this.toSeconds(e),0,this.buffer.duration),this._activeSources.forEach(t=>{t.loopStart=e})}get loopEnd(){return this._loopEnd}set loopEnd(e){this._loopEnd=e,this.buffer.loaded&&assertRange(this.toSeconds(e),0,this.buffer.duration),this._activeSources.forEach(t=>{t.loopEnd=e})}get buffer(){return this._buffer}set buffer(e){this._buffer.set(e)}get loop(){return this._loop}set loop(e){if(this._loop!==e&&(this._loop=e,this._activeSources.forEach(t=>{t.loop=e}),e)){let e=this._state.getNextState("stopped",this.now());e&&this._state.cancel(e.time)}}get playbackRate(){return this._playbackRate}set playbackRate(e){this._playbackRate=e;let t=this.now(),s=this._state.getNextState("stopped",t);s&&s.implicitEnd&&(this._state.cancel(s.time),this._activeSources.forEach(e=>e.cancelStop())),this._activeSources.forEach(s=>{s.playbackRate.setValueAtTime(e,t)})}get reverse(){return this._buffer.reverse}set reverse(e){this._buffer.reverse=e}get loaded(){return this._buffer.loaded}dispose(){return super.dispose(),this._activeSources.forEach(e=>e.dispose()),this._activeSources.clear(),this._buffer.dispose(),this}};(0,sx.gn)([timeRange(0)],Player.prototype,"fadeIn",void 0),(0,sx.gn)([timeRange(0)],Player.prototype,"fadeOut",void 0);let Players=class Players extends ToneAudioNode{constructor(){super(optionsFromArguments(Players.getDefaults(),arguments,["urls","onload"],"urls")),this.name="Players",this.input=void 0,this._players=new Map;let e=optionsFromArguments(Players.getDefaults(),arguments,["urls","onload"],"urls");this._volume=this.output=new Volume({context:this.context,volume:e.volume}),this.volume=this._volume.volume,readOnly(this,"volume"),this._buffers=new ToneAudioBuffers({urls:e.urls,onload:e.onload,baseUrl:e.baseUrl,onerror:e.onerror}),this.mute=e.mute,this._fadeIn=e.fadeIn,this._fadeOut=e.fadeOut}static getDefaults(){return Object.assign(Source.getDefaults(),{baseUrl:"",fadeIn:0,fadeOut:0,mute:!1,onload:noOp,onerror:noOp,urls:{},volume:0})}get mute(){return this._volume.mute}set mute(e){this._volume.mute=e}get fadeIn(){return this._fadeIn}set fadeIn(e){this._fadeIn=e,this._players.forEach(t=>{t.fadeIn=e})}get fadeOut(){return this._fadeOut}set fadeOut(e){this._fadeOut=e,this._players.forEach(t=>{t.fadeOut=e})}get state(){let e=Array.from(this._players).some(([e,t])=>"started"===t.state);return e?"started":"stopped"}has(e){return this._buffers.has(e)}player(e){if(assert(this.has(e),`No Player with the name ${e} exists on this object`),!this._players.has(e)){let t=new Player({context:this.context,fadeIn:this._fadeIn,fadeOut:this._fadeOut,url:this._buffers.get(e)}).connect(this.output);this._players.set(e,t)}return this._players.get(e)}get loaded(){return this._buffers.loaded}add(e,t,s){return assert(!this._buffers.has(e),"A buffer with that name already exists on this object"),this._buffers.add(e,t,s),this}stopAll(e){return this._players.forEach(t=>t.stop(e)),this}dispose(){return super.dispose(),this._volume.dispose(),this.volume.dispose(),this._players.forEach(e=>e.dispose()),this._buffers.dispose(),this}};let GrainPlayer=class GrainPlayer extends Source{constructor(){super(optionsFromArguments(GrainPlayer.getDefaults(),arguments,["url","onload"])),this.name="GrainPlayer",this._loopStart=0,this._loopEnd=0,this._activeSources=[];let e=optionsFromArguments(GrainPlayer.getDefaults(),arguments,["url","onload"]);this.buffer=new ToneAudioBuffer({onload:e.onload,onerror:e.onerror,reverse:e.reverse,url:e.url}),this._clock=new Clock({context:this.context,callback:this._tick.bind(this),frequency:1/e.grainSize}),this._playbackRate=e.playbackRate,this._grainSize=e.grainSize,this._overlap=e.overlap,this.detune=e.detune,this.overlap=e.overlap,this.loop=e.loop,this.playbackRate=e.playbackRate,this.grainSize=e.grainSize,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.reverse=e.reverse,this._clock.on("stop",this._onstop.bind(this))}static getDefaults(){return Object.assign(Source.getDefaults(),{onload:noOp,onerror:noOp,overlap:.1,grainSize:.2,playbackRate:1,detune:0,loop:!1,loopStart:0,loopEnd:0,reverse:!1})}_start(e,t,s){t=defaultArg(t,0),t=this.toSeconds(t),e=this.toSeconds(e);let i=1/this._clock.frequency.getValueAtTime(e);this._clock.start(e,t/i),s&&this.stop(e+this.toSeconds(s))}restart(e,t,s){return super.restart(e,t,s),this}_restart(e,t,s){this._stop(e),this._start(e,t,s)}_stop(e){this._clock.stop(e)}_onstop(e){this._activeSources.forEach(t=>{t.fadeOut=0,t.stop(e)}),this.onstop(this)}_tick(e){let t=this._clock.getTicksAtTime(e),s=t*this._grainSize;if(this.log("offset",s),!this.loop&&s>this.buffer.duration){this.stop(e);return}let i=s<this._overlap?0:this._overlap,n=new ToneBufferSource({context:this.context,url:this.buffer,fadeIn:i,fadeOut:this._overlap,loop:this.loop,loopStart:this._loopStart,loopEnd:this._loopEnd,playbackRate:intervalToFrequencyRatio(this.detune/100)}).connect(this.output);n.start(e,this._grainSize*t),n.stop(e+this._grainSize/this.playbackRate),this._activeSources.push(n),n.onended=()=>{let e=this._activeSources.indexOf(n);-1!==e&&this._activeSources.splice(e,1)}}get playbackRate(){return this._playbackRate}set playbackRate(e){assertRange(e,.001),this._playbackRate=e,this.grainSize=this._grainSize}get loopStart(){return this._loopStart}set loopStart(e){this.buffer.loaded&&assertRange(this.toSeconds(e),0,this.buffer.duration),this._loopStart=this.toSeconds(e)}get loopEnd(){return this._loopEnd}set loopEnd(e){this.buffer.loaded&&assertRange(this.toSeconds(e),0,this.buffer.duration),this._loopEnd=this.toSeconds(e)}get reverse(){return this.buffer.reverse}set reverse(e){this.buffer.reverse=e}get grainSize(){return this._grainSize}set grainSize(e){this._grainSize=this.toSeconds(e),this._clock.frequency.setValueAtTime(this._playbackRate/this._grainSize,this.now())}get overlap(){return this._overlap}set overlap(e){let t=this.toSeconds(e);assertRange(t,0),this._overlap=t}get loaded(){return this.buffer.loaded}dispose(){return super.dispose(),this.buffer.dispose(),this._clock.dispose(),this._activeSources.forEach(e=>e.dispose()),this}};let Abs=class Abs extends SignalOperator{constructor(){super(...arguments),this.name="Abs",this._abs=new WaveShaper({context:this.context,mapping:e=>.001>Math.abs(e)?0:Math.abs(e)}),this.input=this._abs,this.output=this._abs}dispose(){return super.dispose(),this._abs.dispose(),this}};let GainToAudio=class GainToAudio extends SignalOperator{constructor(){super(...arguments),this.name="GainToAudio",this._norm=new WaveShaper({context:this.context,mapping:e=>2*Math.abs(e)-1}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}};let Negate=class Negate extends SignalOperator{constructor(){super(...arguments),this.name="Negate",this._multiply=new Multiply({context:this.context,value:-1}),this.input=this._multiply,this.output=this._multiply}dispose(){return super.dispose(),this._multiply.dispose(),this}};let Subtract=class Subtract extends Signal{constructor(){super(Object.assign(optionsFromArguments(Subtract.getDefaults(),arguments,["value"]))),this.override=!1,this.name="Subtract",this._sum=new Gain({context:this.context}),this.input=this._sum,this.output=this._sum,this._neg=new Negate({context:this.context}),this.subtrahend=this._param,connectSeries(this._constantSource,this._neg,this._sum)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._neg.dispose(),this._sum.dispose(),this}};let GreaterThanZero=class GreaterThanZero extends SignalOperator{constructor(){super(Object.assign(optionsFromArguments(GreaterThanZero.getDefaults(),arguments))),this.name="GreaterThanZero",this._thresh=this.output=new WaveShaper({context:this.context,length:127,mapping:e=>e<=0?0:1}),this._scale=this.input=new Multiply({context:this.context,value:1e4}),this._scale.connect(this._thresh)}dispose(){return super.dispose(),this._scale.dispose(),this._thresh.dispose(),this}};let GreaterThan=class GreaterThan extends Signal{constructor(){super(Object.assign(optionsFromArguments(GreaterThan.getDefaults(),arguments,["value"]))),this.name="GreaterThan",this.override=!1;let e=optionsFromArguments(GreaterThan.getDefaults(),arguments,["value"]);this._subtract=this.input=new Subtract({context:this.context,value:e.value}),this._gtz=this.output=new GreaterThanZero({context:this.context}),this.comparator=this._param=this._subtract.subtrahend,readOnly(this,"comparator"),this._subtract.connect(this._gtz)}static getDefaults(){return Object.assign(Signal.getDefaults(),{value:0})}dispose(){return super.dispose(),this._gtz.dispose(),this._subtract.dispose(),this.comparator.dispose(),this}};let Pow=class Pow extends SignalOperator{constructor(){super(Object.assign(optionsFromArguments(Pow.getDefaults(),arguments,["value"]))),this.name="Pow";let e=optionsFromArguments(Pow.getDefaults(),arguments,["value"]);this._exponentScaler=this.input=this.output=new WaveShaper({context:this.context,mapping:this._expFunc(e.value),length:8192}),this._exponent=e.value}static getDefaults(){return Object.assign(SignalOperator.getDefaults(),{value:1})}_expFunc(e){return t=>Math.pow(Math.abs(t),e)}get value(){return this._exponent}set value(e){this._exponent=e,this._exponentScaler.setMap(this._expFunc(this._exponent))}dispose(){return super.dispose(),this._exponentScaler.dispose(),this}};let ScaleExp=class ScaleExp extends Scale{constructor(){super(Object.assign(optionsFromArguments(ScaleExp.getDefaults(),arguments,["min","max","exponent"]))),this.name="ScaleExp";let e=optionsFromArguments(ScaleExp.getDefaults(),arguments,["min","max","exponent"]);this.input=this._exp=new Pow({context:this.context,value:e.exponent}),this._exp.connect(this._mult)}static getDefaults(){return Object.assign(Scale.getDefaults(),{exponent:1})}get exponent(){return this._exp.value}set exponent(e){this._exp.value=e}dispose(){return super.dispose(),this._exp.dispose(),this}};let SyncedSignal=class SyncedSignal extends Signal{constructor(){super(optionsFromArguments(Signal.getDefaults(),arguments,["value","units"])),this.name="SyncedSignal",this.override=!1;let e=optionsFromArguments(Signal.getDefaults(),arguments,["value","units"]);this._lastVal=e.value,this._synced=this.context.transport.scheduleRepeat(this._onTick.bind(this),"1i"),this._syncedCallback=this._anchorValue.bind(this),this.context.transport.on("start",this._syncedCallback),this.context.transport.on("pause",this._syncedCallback),this.context.transport.on("stop",this._syncedCallback),this._constantSource.disconnect(),this._constantSource.stop(0),this._constantSource=this.output=new ToneConstantSource({context:this.context,offset:e.value,units:e.units}).start(0),this.setValueAtTime(e.value,0)}_onTick(e){let t=super.getValueAtTime(this.context.transport.seconds);this._lastVal!==t&&(this._lastVal=t,this._constantSource.offset.setValueAtTime(t,e))}_anchorValue(e){let t=super.getValueAtTime(this.context.transport.seconds);this._lastVal=t,this._constantSource.offset.cancelAndHoldAtTime(e),this._constantSource.offset.setValueAtTime(t,e)}getValueAtTime(e){let t=new TransportTimeClass(this.context,e).toSeconds();return super.getValueAtTime(t)}setValueAtTime(e,t){let s=new TransportTimeClass(this.context,t).toSeconds();return super.setValueAtTime(e,s),this}linearRampToValueAtTime(e,t){let s=new TransportTimeClass(this.context,t).toSeconds();return super.linearRampToValueAtTime(e,s),this}exponentialRampToValueAtTime(e,t){let s=new TransportTimeClass(this.context,t).toSeconds();return super.exponentialRampToValueAtTime(e,s),this}setTargetAtTime(e,t,s){let i=new TransportTimeClass(this.context,t).toSeconds();return super.setTargetAtTime(e,i,s),this}cancelScheduledValues(e){let t=new TransportTimeClass(this.context,e).toSeconds();return super.cancelScheduledValues(t),this}setValueCurveAtTime(e,t,s,i){let n=new TransportTimeClass(this.context,t).toSeconds();return s=this.toSeconds(s),super.setValueCurveAtTime(e,n,s,i),this}cancelAndHoldAtTime(e){let t=new TransportTimeClass(this.context,e).toSeconds();return super.cancelAndHoldAtTime(t),this}setRampPoint(e){let t=new TransportTimeClass(this.context,e).toSeconds();return super.setRampPoint(t),this}exponentialRampTo(e,t,s){let i=new TransportTimeClass(this.context,s).toSeconds();return super.exponentialRampTo(e,t,i),this}linearRampTo(e,t,s){let i=new TransportTimeClass(this.context,s).toSeconds();return super.linearRampTo(e,t,i),this}targetRampTo(e,t,s){let i=new TransportTimeClass(this.context,s).toSeconds();return super.targetRampTo(e,t,i),this}dispose(){return super.dispose(),this.context.transport.clear(this._synced),this.context.transport.off("start",this._syncedCallback),this.context.transport.off("pause",this._syncedCallback),this.context.transport.off("stop",this._syncedCallback),this._constantSource.dispose(),this}};let Envelope=class Envelope extends ToneAudioNode{constructor(){super(optionsFromArguments(Envelope.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="Envelope",this._sig=new Signal({context:this.context,value:0}),this.output=this._sig,this.input=void 0;let e=optionsFromArguments(Envelope.getDefaults(),arguments,["attack","decay","sustain","release"]);this.attack=e.attack,this.decay=e.decay,this.sustain=e.sustain,this.release=e.release,this.attackCurve=e.attackCurve,this.releaseCurve=e.releaseCurve,this.decayCurve=e.decayCurve}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{attack:.01,attackCurve:"linear",decay:.1,decayCurve:"exponential",release:1,releaseCurve:"exponential",sustain:.5})}get value(){return this.getValueAtTime(this.now())}_getCurve(e,t){if(isString(e))return e;{let s;for(s in sF)if(sF[s][t]===e)return s;return e}}_setCurve(e,t,s){if(isString(s)&&Reflect.has(sF,s)){let i=sF[s];isObject(i)?"_decayCurve"!==e&&(this[e]=i[t]):this[e]=i}else if(isArray(s)&&"_decayCurve"!==e)this[e]=s;else throw Error("Envelope: invalid curve: "+s)}get attackCurve(){return this._getCurve(this._attackCurve,"In")}set attackCurve(e){this._setCurve("_attackCurve","In",e)}get releaseCurve(){return this._getCurve(this._releaseCurve,"Out")}set releaseCurve(e){this._setCurve("_releaseCurve","Out",e)}get decayCurve(){return this._decayCurve}set decayCurve(e){assert(["linear","exponential"].some(t=>t===e),`Invalid envelope curve: ${e}`),this._decayCurve=e}triggerAttack(e,t=1){this.log("triggerAttack",e,t),e=this.toSeconds(e);let s=this.toSeconds(this.attack),i=s,n=this.toSeconds(this.decay),o=this.getValueAtTime(e);if(o>0){let e=1/i;i=(1-o)/e}if(i<this.sampleTime)this._sig.cancelScheduledValues(e),this._sig.setValueAtTime(t,e);else if("linear"===this._attackCurve)this._sig.linearRampTo(t,i,e);else if("exponential"===this._attackCurve)this._sig.targetRampTo(t,i,e);else{this._sig.cancelAndHoldAtTime(e);let s=this._attackCurve;for(let e=1;e<s.length;e++)if(s[e-1]<=o&&o<=s[e]){(s=this._attackCurve.slice(e))[0]=o;break}this._sig.setValueCurveAtTime(s,e,i,t)}if(n&&this.sustain<1){let s=t*this.sustain,o=e+i;this.log("decay",o),"linear"===this._decayCurve?this._sig.linearRampToValueAtTime(s,n+o):this._sig.exponentialApproachValueAtTime(s,o,n)}return this}triggerRelease(e){this.log("triggerRelease",e),e=this.toSeconds(e);let t=this.getValueAtTime(e);if(t>0){let s=this.toSeconds(this.release);s<this.sampleTime?this._sig.setValueAtTime(0,e):"linear"===this._releaseCurve?this._sig.linearRampTo(0,s,e):"exponential"===this._releaseCurve?this._sig.targetRampTo(0,s,e):(assert(isArray(this._releaseCurve),"releaseCurve must be either 'linear', 'exponential' or an array"),this._sig.cancelAndHoldAtTime(e),this._sig.setValueCurveAtTime(this._releaseCurve,e,s,t))}return this}getValueAtTime(e){return this._sig.getValueAtTime(e)}triggerAttackRelease(e,t,s=1){return t=this.toSeconds(t),this.triggerAttack(t,s),this.triggerRelease(t+this.toSeconds(e)),this}cancel(e){return this._sig.cancelScheduledValues(this.toSeconds(e)),this}connect(e,t=0,s=0){return connectSignal(this,e,t,s),this}asArray(e=1024){return(0,sx.mG)(this,void 0,void 0,function*(){let t=e/this.context.sampleRate,s=new OfflineContext(1,t,this.context.sampleRate),i=this.toSeconds(this.attack)+this.toSeconds(this.decay),n=i+this.toSeconds(this.release),o=.1*n,r=n+o,a=new this.constructor(Object.assign(this.get(),{attack:t*this.toSeconds(this.attack)/r,decay:t*this.toSeconds(this.decay)/r,release:t*this.toSeconds(this.release)/r,context:s}));a._sig.toDestination(),a.triggerAttackRelease(t*(i+o)/r,0);let l=yield s.render();return l.getChannelData(0)})}dispose(){return super.dispose(),this._sig.dispose(),this}};(0,sx.gn)([timeRange(0)],Envelope.prototype,"attack",void 0),(0,sx.gn)([timeRange(0)],Envelope.prototype,"decay",void 0),(0,sx.gn)([range(0,1)],Envelope.prototype,"sustain",void 0),(0,sx.gn)([timeRange(0)],Envelope.prototype,"release",void 0);let sF=(()=>{let e,t;let s=[];for(e=0;e<128;e++)s[e]=Math.sin(e/127*(Math.PI/2));let i=[];for(e=0;e<127;e++){t=e/127;let s=Math.sin(t*(2*Math.PI)*6.4-Math.PI/2)+1;i[e]=s/10+.83*t}i[127]=1;let n=[];for(e=0;e<128;e++)n[e]=Math.ceil(e/127*5)/5;let o=[];for(e=0;e<128;e++)t=e/127,o[e]=.5*(1-Math.cos(Math.PI*t));let r=[];for(e=0;e<128;e++){t=e/127;let s=4*Math.pow(t,3)+.2,i=Math.cos(s*Math.PI*2*t);r[e]=Math.abs(i*(1-t))}function invertCurve(e){let t=Array(e.length);for(let s=0;s<e.length;s++)t[s]=1-e[s];return t}return{bounce:{In:invertCurve(r),Out:r},cosine:{In:s,Out:s.slice(0).reverse()},exponential:"exponential",linear:"linear",ripple:{In:i,Out:invertCurve(i)},sine:{In:o,Out:invertCurve(o)},step:{In:n,Out:invertCurve(n)}}})();let Instrument=class Instrument extends ToneAudioNode{constructor(){super(optionsFromArguments(Instrument.getDefaults(),arguments)),this._scheduledEvents=[],this._synced=!1,this._original_triggerAttack=this.triggerAttack,this._original_triggerRelease=this.triggerRelease;let e=optionsFromArguments(Instrument.getDefaults(),arguments);this._volume=this.output=new Volume({context:this.context,volume:e.volume}),this.volume=this._volume.volume,readOnly(this,"volume")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{volume:0})}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0)),this}_syncState(){let e=!1;return this._synced||(this._synced=!0,e=!0),e}_syncMethod(e,t){let s=this["_original_"+e]=this[e];this[e]=(...e)=>{let i=e[t],n=this.context.transport.schedule(i=>{e[t]=i,s.apply(this,e)},i);this._scheduledEvents.push(n)}}unsync(){return this._scheduledEvents.forEach(e=>this.context.transport.clear(e)),this._scheduledEvents=[],this._synced&&(this._synced=!1,this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this}triggerAttackRelease(e,t,s,i){let n=this.toSeconds(s),o=this.toSeconds(t);return this.triggerAttack(e,n,i),this.triggerRelease(n+o),this}dispose(){return super.dispose(),this._volume.dispose(),this.unsync(),this._scheduledEvents=[],this}};let Monophonic=class Monophonic extends Instrument{constructor(){super(optionsFromArguments(Monophonic.getDefaults(),arguments));let e=optionsFromArguments(Monophonic.getDefaults(),arguments);this.portamento=e.portamento,this.onsilence=e.onsilence}static getDefaults(){return Object.assign(Instrument.getDefaults(),{detune:0,onsilence:noOp,portamento:0})}triggerAttack(e,t,s=1){this.log("triggerAttack",e,t,s);let i=this.toSeconds(t);return this._triggerEnvelopeAttack(i,s),this.setNote(e,i),this}triggerRelease(e){this.log("triggerRelease",e);let t=this.toSeconds(e);return this._triggerEnvelopeRelease(t),this}setNote(e,t){let s=this.toSeconds(t),i=e instanceof FrequencyClass?e.toFrequency():e;if(this.portamento>0&&this.getLevelAtTime(s)>.05){let e=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(i,e,s)}else this.frequency.setValueAtTime(i,s);return this}};(0,sx.gn)([timeRange(0)],Monophonic.prototype,"portamento",void 0);let AmplitudeEnvelope=class AmplitudeEnvelope extends Envelope{constructor(){super(optionsFromArguments(AmplitudeEnvelope.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="AmplitudeEnvelope",this._gainNode=new Gain({context:this.context,gain:0}),this.output=this._gainNode,this.input=this._gainNode,this._sig.connect(this._gainNode.gain),this.output=this._gainNode,this.input=this._gainNode}dispose(){return super.dispose(),this._gainNode.dispose(),this}};let Synth=class Synth extends Monophonic{constructor(){super(optionsFromArguments(Synth.getDefaults(),arguments)),this.name="Synth";let e=optionsFromArguments(Synth.getDefaults(),arguments);this.oscillator=new OmniOscillator(Object.assign({context:this.context,detune:e.detune,onstop:()=>this.onsilence(this)},e.oscillator)),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new AmplitudeEnvelope(Object.assign({context:this.context},e.envelope)),this.oscillator.chain(this.envelope,this.output),readOnly(this,["oscillator","frequency","detune","envelope"])}static getDefaults(){return Object.assign(Monophonic.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.3}),oscillator:Object.assign(omitFromObject(OmniOscillator.getDefaults(),[...Object.keys(Source.getDefaults()),"frequency","detune"]),{type:"triangle"})})}_triggerEnvelopeAttack(e,t){if(this.envelope.triggerAttack(e,t),this.oscillator.start(e),0===this.envelope.sustain){let t=this.toSeconds(this.envelope.attack),s=this.toSeconds(this.envelope.decay);this.oscillator.stop(e+t+s)}}_triggerEnvelopeRelease(e){this.envelope.triggerRelease(e),this.oscillator.stop(e+this.toSeconds(this.envelope.release))}getLevelAtTime(e){return e=this.toSeconds(e),this.envelope.getValueAtTime(e)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this}};let ModulationSynth=class ModulationSynth extends Monophonic{constructor(){super(optionsFromArguments(ModulationSynth.getDefaults(),arguments)),this.name="ModulationSynth";let e=optionsFromArguments(ModulationSynth.getDefaults(),arguments);this._carrier=new Synth({context:this.context,oscillator:e.oscillator,envelope:e.envelope,onsilence:()=>this.onsilence(this),volume:-10}),this._modulator=new Synth({context:this.context,oscillator:e.modulation,envelope:e.modulationEnvelope,volume:-10}),this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope,this.modulation=this._modulator.oscillator,this.modulationEnvelope=this._modulator.envelope,this.frequency=new Signal({context:this.context,units:"frequency"}),this.detune=new Signal({context:this.context,value:e.detune,units:"cents"}),this.harmonicity=new Multiply({context:this.context,value:e.harmonicity,minValue:0}),this._modulationNode=new Gain({context:this.context,gain:0}),readOnly(this,["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"])}static getDefaults(){return Object.assign(Monophonic.getDefaults(),{harmonicity:3,oscillator:Object.assign(omitFromObject(OmniOscillator.getDefaults(),[...Object.keys(Source.getDefaults()),"frequency","detune"]),{type:"sine"}),envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.01,decay:.01,sustain:1,release:.5}),modulation:Object.assign(omitFromObject(OmniOscillator.getDefaults(),[...Object.keys(Source.getDefaults()),"frequency","detune"]),{type:"square"}),modulationEnvelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.5,decay:0,sustain:1,release:.5})})}_triggerEnvelopeAttack(e,t){this._carrier._triggerEnvelopeAttack(e,t),this._modulator._triggerEnvelopeAttack(e,t)}_triggerEnvelopeRelease(e){return this._carrier._triggerEnvelopeRelease(e),this._modulator._triggerEnvelopeRelease(e),this}getLevelAtTime(e){return e=this.toSeconds(e),this.envelope.getValueAtTime(e)}dispose(){return super.dispose(),this._carrier.dispose(),this._modulator.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._modulationNode.dispose(),this}};let AMSynth=class AMSynth extends ModulationSynth{constructor(){super(optionsFromArguments(AMSynth.getDefaults(),arguments)),this.name="AMSynth",this._modulationScale=new AudioToGain({context:this.context}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output)}dispose(){return super.dispose(),this._modulationScale.dispose(),this}};let BiquadFilter=class BiquadFilter extends ToneAudioNode{constructor(){super(optionsFromArguments(BiquadFilter.getDefaults(),arguments,["frequency","type"])),this.name="BiquadFilter";let e=optionsFromArguments(BiquadFilter.getDefaults(),arguments,["frequency","type"]);this._filter=this.context.createBiquadFilter(),this.input=this.output=this._filter,this.Q=new Param({context:this.context,units:"number",value:e.Q,param:this._filter.Q}),this.frequency=new Param({context:this.context,units:"frequency",value:e.frequency,param:this._filter.frequency}),this.detune=new Param({context:this.context,units:"cents",value:e.detune,param:this._filter.detune}),this.gain=new Param({context:this.context,units:"decibels",convert:!1,value:e.gain,param:this._filter.gain}),this.type=e.type}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{Q:1,type:"lowpass",frequency:350,detune:0,gain:0})}get type(){return this._filter.type}set type(e){assert(-1!==["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(e),`Invalid filter type: ${e}`),this._filter.type=e}getFrequencyResponse(e=128){let t=new Float32Array(e);for(let s=0;s<e;s++){let i=Math.pow(s/e,2),n=19980*i+20;t[s]=n}let s=new Float32Array(e),i=new Float32Array(e),n=this.context.createBiquadFilter();return n.type=this.type,n.Q.value=this.Q.value,n.frequency.value=this.frequency.value,n.gain.value=this.gain.value,n.getFrequencyResponse(t,s,i),s}dispose(){return super.dispose(),this._filter.disconnect(),this.Q.dispose(),this.frequency.dispose(),this.gain.dispose(),this.detune.dispose(),this}};let Filter=class Filter extends ToneAudioNode{constructor(){super(optionsFromArguments(Filter.getDefaults(),arguments,["frequency","type","rolloff"])),this.name="Filter",this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this._filters=[];let e=optionsFromArguments(Filter.getDefaults(),arguments,["frequency","type","rolloff"]);this._filters=[],this.Q=new Signal({context:this.context,units:"positive",value:e.Q}),this.frequency=new Signal({context:this.context,units:"frequency",value:e.frequency}),this.detune=new Signal({context:this.context,units:"cents",value:e.detune}),this.gain=new Signal({context:this.context,units:"decibels",convert:!1,value:e.gain}),this._type=e.type,this.rolloff=e.rolloff,readOnly(this,["detune","frequency","gain","Q"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{Q:1,detune:0,frequency:350,gain:0,rolloff:-12,type:"lowpass"})}get type(){return this._type}set type(e){assert(-1!==["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(e),`Invalid filter type: ${e}`),this._type=e,this._filters.forEach(t=>t.type=e)}get rolloff(){return this._rolloff}set rolloff(e){let t=isNumber(e)?e:parseInt(e,10),s=[-12,-24,-48,-96],i=s.indexOf(t);assert(-1!==i,`rolloff can only be ${s.join(", ")}`),i+=1,this._rolloff=t,this.input.disconnect(),this._filters.forEach(e=>e.disconnect()),this._filters=Array(i);for(let e=0;e<i;e++){let t=new BiquadFilter({context:this.context});t.type=this._type,this.frequency.connect(t.frequency),this.detune.connect(t.detune),this.Q.connect(t.Q),this.gain.connect(t.gain),this._filters[e]=t}this._internalChannels=this._filters,connectSeries(this.input,...this._internalChannels,this.output)}getFrequencyResponse(e=128){let t=new BiquadFilter({frequency:this.frequency.value,gain:this.gain.value,Q:this.Q.value,type:this._type,detune:this.detune.value}),s=new Float32Array(e).map(()=>1);return this._filters.forEach(()=>{let i=t.getFrequencyResponse(e);i.forEach((e,t)=>s[t]*=e)}),t.dispose(),s}dispose(){return super.dispose(),this._filters.forEach(e=>{e.dispose()}),writable(this,["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.detune.dispose(),this.gain.dispose(),this}};let FrequencyEnvelope=class FrequencyEnvelope extends Envelope{constructor(){super(optionsFromArguments(FrequencyEnvelope.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="FrequencyEnvelope";let e=optionsFromArguments(FrequencyEnvelope.getDefaults(),arguments,["attack","decay","sustain","release"]);this._octaves=e.octaves,this._baseFrequency=this.toFrequency(e.baseFrequency),this._exponent=this.input=new Pow({context:this.context,value:e.exponent}),this._scale=this.output=new Scale({context:this.context,min:this._baseFrequency,max:this._baseFrequency*Math.pow(2,this._octaves)}),this._sig.chain(this._exponent,this._scale)}static getDefaults(){return Object.assign(Envelope.getDefaults(),{baseFrequency:200,exponent:1,octaves:4})}get baseFrequency(){return this._baseFrequency}set baseFrequency(e){let t=this.toFrequency(e);assertRange(t,0),this._baseFrequency=t,this._scale.min=this._baseFrequency,this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(e){this._octaves=e,this._scale.max=this._baseFrequency*Math.pow(2,e)}get exponent(){return this._exponent.value}set exponent(e){this._exponent.value=e}dispose(){return super.dispose(),this._exponent.dispose(),this._scale.dispose(),this}};let MonoSynth=class MonoSynth extends Monophonic{constructor(){super(optionsFromArguments(MonoSynth.getDefaults(),arguments)),this.name="MonoSynth";let e=optionsFromArguments(MonoSynth.getDefaults(),arguments);this.oscillator=new OmniOscillator(Object.assign(e.oscillator,{context:this.context,detune:e.detune,onstop:()=>this.onsilence(this)})),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.filter=new Filter(Object.assign(e.filter,{context:this.context})),this.filterEnvelope=new FrequencyEnvelope(Object.assign(e.filterEnvelope,{context:this.context})),this.envelope=new AmplitudeEnvelope(Object.assign(e.envelope,{context:this.context})),this.oscillator.chain(this.filter,this.envelope,this.output),this.filterEnvelope.connect(this.filter.frequency),readOnly(this,["oscillator","frequency","detune","filter","filterEnvelope","envelope"])}static getDefaults(){return Object.assign(Monophonic.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.9}),filter:Object.assign(omitFromObject(Filter.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{Q:1,rolloff:-12,type:"lowpass"}),filterEnvelope:Object.assign(omitFromObject(FrequencyEnvelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.6,baseFrequency:200,decay:.2,exponent:2,octaves:3,release:2,sustain:.5}),oscillator:Object.assign(omitFromObject(OmniOscillator.getDefaults(),Object.keys(Source.getDefaults())),{type:"sawtooth"})})}_triggerEnvelopeAttack(e,t=1){if(this.envelope.triggerAttack(e,t),this.filterEnvelope.triggerAttack(e),this.oscillator.start(e),0===this.envelope.sustain){let t=this.toSeconds(this.envelope.attack),s=this.toSeconds(this.envelope.decay);this.oscillator.stop(e+t+s)}}_triggerEnvelopeRelease(e){this.envelope.triggerRelease(e),this.filterEnvelope.triggerRelease(e),this.oscillator.stop(e+this.toSeconds(this.envelope.release))}getLevelAtTime(e){return e=this.toSeconds(e),this.envelope.getValueAtTime(e)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this.filterEnvelope.dispose(),this.filter.dispose(),this}};let DuoSynth=class DuoSynth extends Monophonic{constructor(){super(optionsFromArguments(DuoSynth.getDefaults(),arguments)),this.name="DuoSynth";let e=optionsFromArguments(DuoSynth.getDefaults(),arguments);this.voice0=new MonoSynth(Object.assign(e.voice0,{context:this.context,onsilence:()=>this.onsilence(this)})),this.voice1=new MonoSynth(Object.assign(e.voice1,{context:this.context})),this.harmonicity=new Multiply({context:this.context,units:"positive",value:e.harmonicity}),this._vibrato=new LFO({frequency:e.vibratoRate,context:this.context,min:-50,max:50}),this._vibrato.start(),this.vibratoRate=this._vibrato.frequency,this._vibratoGain=new Gain({context:this.context,units:"normalRange",gain:e.vibratoAmount}),this.vibratoAmount=this._vibratoGain.gain,this.frequency=new Signal({context:this.context,units:"frequency",value:440}),this.detune=new Signal({context:this.context,units:"cents",value:e.detune}),this.frequency.connect(this.voice0.frequency),this.frequency.chain(this.harmonicity,this.voice1.frequency),this._vibrato.connect(this._vibratoGain),this._vibratoGain.fan(this.voice0.detune,this.voice1.detune),this.detune.fan(this.voice0.detune,this.voice1.detune),this.voice0.connect(this.output),this.voice1.connect(this.output),readOnly(this,["voice0","voice1","frequency","vibratoAmount","vibratoRate"])}getLevelAtTime(e){return e=this.toSeconds(e),this.voice0.envelope.getValueAtTime(e)+this.voice1.envelope.getValueAtTime(e)}static getDefaults(){return deepMerge(Monophonic.getDefaults(),{vibratoAmount:.5,vibratoRate:5,harmonicity:1.5,voice0:deepMerge(omitFromObject(MonoSynth.getDefaults(),Object.keys(Monophonic.getDefaults())),{filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}}),voice1:deepMerge(omitFromObject(MonoSynth.getDefaults(),Object.keys(Monophonic.getDefaults())),{filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}})})}_triggerEnvelopeAttack(e,t){this.voice0._triggerEnvelopeAttack(e,t),this.voice1._triggerEnvelopeAttack(e,t)}_triggerEnvelopeRelease(e){return this.voice0._triggerEnvelopeRelease(e),this.voice1._triggerEnvelopeRelease(e),this}dispose(){return super.dispose(),this.voice0.dispose(),this.voice1.dispose(),this.frequency.dispose(),this.detune.dispose(),this._vibrato.dispose(),this.vibratoRate.dispose(),this._vibratoGain.dispose(),this.harmonicity.dispose(),this}};let FMSynth=class FMSynth extends ModulationSynth{constructor(){super(optionsFromArguments(FMSynth.getDefaults(),arguments)),this.name="FMSynth";let e=optionsFromArguments(FMSynth.getDefaults(),arguments);this.modulationIndex=new Multiply({context:this.context,value:e.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output)}static getDefaults(){return Object.assign(ModulationSynth.getDefaults(),{modulationIndex:10})}dispose(){return super.dispose(),this.modulationIndex.dispose(),this}};let sE=[1,1.483,1.932,2.546,2.63,3.897];let MetalSynth=class MetalSynth extends Monophonic{constructor(){super(optionsFromArguments(MetalSynth.getDefaults(),arguments)),this.name="MetalSynth",this._oscillators=[],this._freqMultipliers=[];let e=optionsFromArguments(MetalSynth.getDefaults(),arguments);this.detune=new Signal({context:this.context,units:"cents",value:e.detune}),this.frequency=new Signal({context:this.context,units:"frequency"}),this._amplitude=new Gain({context:this.context,gain:0}).connect(this.output),this._highpass=new Filter({Q:0,context:this.context,type:"highpass"}).connect(this._amplitude);for(let t=0;t<sE.length;t++){let s=new FMOscillator({context:this.context,harmonicity:e.harmonicity,modulationIndex:e.modulationIndex,modulationType:"square",onstop:0===t?()=>this.onsilence(this):noOp,type:"square"});s.connect(this._highpass),this._oscillators[t]=s;let i=new Multiply({context:this.context,value:sE[t]});this._freqMultipliers[t]=i,this.frequency.chain(i,s.frequency),this.detune.connect(s.detune)}this._filterFreqScaler=new Scale({context:this.context,max:7e3,min:this.toFrequency(e.resonance)}),this.envelope=new Envelope({attack:e.envelope.attack,attackCurve:"linear",context:this.context,decay:e.envelope.decay,release:e.envelope.release,sustain:0}),this.envelope.chain(this._filterFreqScaler,this._highpass.frequency),this.envelope.connect(this._amplitude.gain),this._octaves=e.octaves,this.octaves=e.octaves}static getDefaults(){return deepMerge(Monophonic.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{attack:.001,decay:1.4,release:.2}),harmonicity:5.1,modulationIndex:32,octaves:1.5,resonance:4e3})}_triggerEnvelopeAttack(e,t=1){return this.envelope.triggerAttack(e,t),this._oscillators.forEach(t=>t.start(e)),0===this.envelope.sustain&&this._oscillators.forEach(t=>{t.stop(e+this.toSeconds(this.envelope.attack)+this.toSeconds(this.envelope.decay))}),this}_triggerEnvelopeRelease(e){return this.envelope.triggerRelease(e),this._oscillators.forEach(t=>t.stop(e+this.toSeconds(this.envelope.release))),this}getLevelAtTime(e){return e=this.toSeconds(e),this.envelope.getValueAtTime(e)}get modulationIndex(){return this._oscillators[0].modulationIndex.value}set modulationIndex(e){this._oscillators.forEach(t=>t.modulationIndex.value=e)}get harmonicity(){return this._oscillators[0].harmonicity.value}set harmonicity(e){this._oscillators.forEach(t=>t.harmonicity.value=e)}get resonance(){return this._filterFreqScaler.min}set resonance(e){this._filterFreqScaler.min=this.toFrequency(e),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(e){this._octaves=e,this._filterFreqScaler.max=this._filterFreqScaler.min*Math.pow(2,e)}dispose(){return super.dispose(),this._oscillators.forEach(e=>e.dispose()),this._freqMultipliers.forEach(e=>e.dispose()),this.frequency.dispose(),this.detune.dispose(),this._filterFreqScaler.dispose(),this._amplitude.dispose(),this.envelope.dispose(),this._highpass.dispose(),this}};let MembraneSynth=class MembraneSynth extends Synth{constructor(){super(optionsFromArguments(MembraneSynth.getDefaults(),arguments)),this.name="MembraneSynth",this.portamento=0;let e=optionsFromArguments(MembraneSynth.getDefaults(),arguments);this.pitchDecay=e.pitchDecay,this.octaves=e.octaves,readOnly(this,["oscillator","envelope"])}static getDefaults(){return deepMerge(Monophonic.getDefaults(),Synth.getDefaults(),{envelope:{attack:.001,attackCurve:"exponential",decay:.4,release:1.4,sustain:.01},octaves:10,oscillator:{type:"sine"},pitchDecay:.05})}setNote(e,t){let s=this.toSeconds(t),i=this.toFrequency(e instanceof FrequencyClass?e.toFrequency():e),n=i*this.octaves;return this.oscillator.frequency.setValueAtTime(n,s),this.oscillator.frequency.exponentialRampToValueAtTime(i,s+this.toSeconds(this.pitchDecay)),this}dispose(){return super.dispose(),this}};(0,sx.gn)([range(0)],MembraneSynth.prototype,"octaves",void 0),(0,sx.gn)([timeRange(0)],MembraneSynth.prototype,"pitchDecay",void 0);let NoiseSynth=class NoiseSynth extends Instrument{constructor(){super(optionsFromArguments(NoiseSynth.getDefaults(),arguments)),this.name="NoiseSynth";let e=optionsFromArguments(NoiseSynth.getDefaults(),arguments);this.noise=new Noise(Object.assign({context:this.context},e.noise)),this.envelope=new AmplitudeEnvelope(Object.assign({context:this.context},e.envelope)),this.noise.chain(this.envelope,this.output)}static getDefaults(){return Object.assign(Instrument.getDefaults(),{envelope:Object.assign(omitFromObject(Envelope.getDefaults(),Object.keys(ToneAudioNode.getDefaults())),{decay:.1,sustain:0}),noise:Object.assign(omitFromObject(Noise.getDefaults(),Object.keys(Source.getDefaults())),{type:"white"})})}triggerAttack(e,t=1){return e=this.toSeconds(e),this.envelope.triggerAttack(e,t),this.noise.start(e),0===this.envelope.sustain&&this.noise.stop(e+this.toSeconds(this.envelope.attack)+this.toSeconds(this.envelope.decay)),this}triggerRelease(e){return e=this.toSeconds(e),this.envelope.triggerRelease(e),this.noise.stop(e+this.toSeconds(this.envelope.release)),this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0)),this}triggerAttackRelease(e,t,s=1){return t=this.toSeconds(t),e=this.toSeconds(e),this.triggerAttack(t,s),this.triggerRelease(t+e),this}dispose(){return super.dispose(),this.noise.dispose(),this.envelope.dispose(),this}};let sP=new Set;function registerProcessor(e,t){let s=`registerProcessor("${e}", ${t})`;sP.add(s)}let ToneAudioWorklet=class ToneAudioWorklet extends ToneAudioNode{constructor(e){super(e),this.name="ToneAudioWorklet",this.workletOptions={},this.onprocessorerror=noOp;let t=URL.createObjectURL(new Blob([Array.from(sP).join("\n")],{type:"text/javascript"})),s=this._audioWorkletName();this._dummyGain=this.context.createGain(),this._dummyParam=this._dummyGain.gain,this.context.addAudioWorkletModule(t,s).then(()=>{this.disposed||(this._worklet=this.context.createAudioWorkletNode(s,this.workletOptions),this._worklet.onprocessorerror=this.onprocessorerror.bind(this),this.onReady(this._worklet))})}dispose(){return super.dispose(),this._dummyGain.disconnect(),this._worklet&&(this._worklet.port.postMessage("dispose"),this._worklet.disconnect()),this}};let sR=`
	/**
	 * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. 
	 */
	class ToneAudioWorkletProcessor extends AudioWorkletProcessor {

		constructor(options) {
			
			super(options);
			/**
			 * If the processor was disposed or not. Keep alive until it's disposed.
			 */
			this.disposed = false;
		   	/** 
			 * The number of samples in the processing block
			 */
			this.blockSize = 128;
			/**
			 * the sample rate
			 */
			this.sampleRate = sampleRate;

			this.port.onmessage = (event) => {
				// when it receives a dispose 
				if (event.data === "dispose") {
					this.disposed = true;
				}
			};
		}
	}
`;sP.add(sR);let sI=`
	/**
	 * Abstract class for a single input/output processor. 
	 * has a 'generate' function which processes one sample at a time
	 */
	class SingleIOProcessor extends ToneAudioWorkletProcessor {

		constructor(options) {
			super(Object.assign(options, {
				numberOfInputs: 1,
				numberOfOutputs: 1
			}));
			/**
			 * Holds the name of the parameter and a single value of that
			 * parameter at the current sample
			 * @type { [name: string]: number }
			 */
			this.params = {}
		}

		/**
		 * Generate an output sample from the input sample and parameters
		 * @abstract
		 * @param input number
		 * @param channel number
		 * @param parameters { [name: string]: number }
		 * @returns number
		 */
		generate(){}

		/**
		 * Update the private params object with the 
		 * values of the parameters at the given index
		 * @param parameters { [name: string]: Float32Array },
		 * @param index number
		 */
		updateParams(parameters, index) {
			for (const paramName in parameters) {
				const param = parameters[paramName];
				if (param.length > 1) {
					this.params[paramName] = parameters[paramName][index];
				} else {
					this.params[paramName] = parameters[paramName][0];
				}
			}
		}

		/**
		 * Process a single frame of the audio
		 * @param inputs Float32Array[][]
		 * @param outputs Float32Array[][]
		 */
		process(inputs, outputs, parameters) {
			const input = inputs[0];
			const output = outputs[0];
			// get the parameter values
			const channelCount = Math.max(input && input.length || 0, output.length);
			for (let sample = 0; sample < this.blockSize; sample++) {
				this.updateParams(parameters, sample);
				for (let channel = 0; channel < channelCount; channel++) {
					const inputSample = input && input.length ? input[channel][sample] : 0;
					output[channel][sample] = this.generate(inputSample, channel, this.params);
				}
			}
			return !this.disposed;
		}
	};
`;sP.add(sI);let sq=`
	/**
	 * A multichannel buffer for use within an AudioWorkletProcessor as a delay line
	 */
	class DelayLine {
		
		constructor(size, channels) {
			this.buffer = [];
			this.writeHead = []
			this.size = size;

			// create the empty channels
			for (let i = 0; i < channels; i++) {
				this.buffer[i] = new Float32Array(this.size);
				this.writeHead[i] = 0;
			}
		}

		/**
		 * Push a value onto the end
		 * @param channel number
		 * @param value number
		 */
		push(channel, value) {
			this.writeHead[channel] += 1;
			if (this.writeHead[channel] > this.size) {
				this.writeHead[channel] = 0;
			}
			this.buffer[channel][this.writeHead[channel]] = value;
		}

		/**
		 * Get the recorded value of the channel given the delay
		 * @param channel number
		 * @param delay number delay samples
		 */
		get(channel, delay) {
			let readHead = this.writeHead[channel] - Math.floor(delay);
			if (readHead < 0) {
				readHead += this.size;
			}
			return this.buffer[channel][readHead];
		}
	}
`;sP.add(sq);let sV="feedback-comb-filter",sB=`
	class FeedbackCombFilterWorklet extends SingleIOProcessor {

		constructor(options) {
			super(options);
			this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);
		}

		static get parameterDescriptors() {
			return [{
				name: "delayTime",
				defaultValue: 0.1,
				minValue: 0,
				maxValue: 1,
				automationRate: "k-rate"
			}, {
				name: "feedback",
				defaultValue: 0.5,
				minValue: 0,
				maxValue: 0.9999,
				automationRate: "k-rate"
			}];
		}

		generate(input, channel, parameters) {
			const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);
			this.delayLine.push(channel, input + delayedSample * parameters.feedback);
			return delayedSample;
		}
	}
`;registerProcessor(sV,sB);let FeedbackCombFilter=class FeedbackCombFilter extends ToneAudioWorklet{constructor(){super(optionsFromArguments(FeedbackCombFilter.getDefaults(),arguments,["delayTime","resonance"])),this.name="FeedbackCombFilter";let e=optionsFromArguments(FeedbackCombFilter.getDefaults(),arguments,["delayTime","resonance"]);this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this.delayTime=new Param({context:this.context,value:e.delayTime,units:"time",minValue:0,maxValue:1,param:this._dummyParam,swappable:!0}),this.resonance=new Param({context:this.context,value:e.resonance,units:"normalRange",param:this._dummyParam,swappable:!0}),readOnly(this,["resonance","delayTime"])}_audioWorkletName(){return sV}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{delayTime:.1,resonance:.5})}onReady(e){connectSeries(this.input,e,this.output);let t=e.parameters.get("delayTime");this.delayTime.setParam(t);let s=e.parameters.get("feedback");this.resonance.setParam(s)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.delayTime.dispose(),this.resonance.dispose(),this}};let OnePoleFilter=class OnePoleFilter extends ToneAudioNode{constructor(){super(optionsFromArguments(OnePoleFilter.getDefaults(),arguments,["frequency","type"])),this.name="OnePoleFilter";let e=optionsFromArguments(OnePoleFilter.getDefaults(),arguments,["frequency","type"]);this._frequency=e.frequency,this._type=e.type,this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this._createFilter()}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{frequency:880,type:"lowpass"})}_createFilter(){let e=this._filter,t=this.toFrequency(this._frequency),s=1/(2*Math.PI*t);if("lowpass"===this._type){let e=1/(s*this.context.sampleRate),t=e-1;this._filter=this.context.createIIRFilter([e,0],[1,t])}else{let e=1/(s*this.context.sampleRate)-1;this._filter=this.context.createIIRFilter([1,-1],[1,e])}this.input.chain(this._filter,this.output),e&&this.context.setTimeout(()=>{this.disposed||(this.input.disconnect(e),e.disconnect())},this.blockTime)}get frequency(){return this._frequency}set frequency(e){this._frequency=e,this._createFilter()}get type(){return this._type}set type(e){this._type=e,this._createFilter()}getFrequencyResponse(e=128){let t=new Float32Array(e);for(let s=0;s<e;s++){let i=Math.pow(s/e,2),n=19980*i+20;t[s]=n}let s=new Float32Array(e),i=new Float32Array(e);return this._filter.getFrequencyResponse(t,s,i),s}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this._filter.disconnect(),this}};let LowpassCombFilter=class LowpassCombFilter extends ToneAudioNode{constructor(){super(optionsFromArguments(LowpassCombFilter.getDefaults(),arguments,["delayTime","resonance","dampening"])),this.name="LowpassCombFilter";let e=optionsFromArguments(LowpassCombFilter.getDefaults(),arguments,["delayTime","resonance","dampening"]);this._combFilter=this.output=new FeedbackCombFilter({context:this.context,delayTime:e.delayTime,resonance:e.resonance}),this.delayTime=this._combFilter.delayTime,this.resonance=this._combFilter.resonance,this._lowpass=this.input=new OnePoleFilter({context:this.context,frequency:e.dampening,type:"lowpass"}),this._lowpass.connect(this._combFilter)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{dampening:3e3,delayTime:.1,resonance:.5})}get dampening(){return this._lowpass.frequency}set dampening(e){this._lowpass.frequency=e}dispose(){return super.dispose(),this._combFilter.dispose(),this._lowpass.dispose(),this}};let PluckSynth=class PluckSynth extends Instrument{constructor(){super(optionsFromArguments(PluckSynth.getDefaults(),arguments)),this.name="PluckSynth";let e=optionsFromArguments(PluckSynth.getDefaults(),arguments);this._noise=new Noise({context:this.context,type:"pink"}),this.attackNoise=e.attackNoise,this._lfcf=new LowpassCombFilter({context:this.context,dampening:e.dampening,resonance:e.resonance}),this.resonance=e.resonance,this.release=e.release,this._noise.connect(this._lfcf),this._lfcf.connect(this.output)}static getDefaults(){return deepMerge(Instrument.getDefaults(),{attackNoise:1,dampening:4e3,resonance:.7,release:1})}get dampening(){return this._lfcf.dampening}set dampening(e){this._lfcf.dampening=e}triggerAttack(e,t){let s=this.toFrequency(e);t=this.toSeconds(t);let i=1/s;return this._lfcf.delayTime.setValueAtTime(i,t),this._noise.start(t),this._noise.stop(t+i*this.attackNoise),this._lfcf.resonance.cancelScheduledValues(t),this._lfcf.resonance.setValueAtTime(this.resonance,t),this}triggerRelease(e){return this._lfcf.resonance.linearRampTo(0,this.release,e),this}dispose(){return super.dispose(),this._noise.dispose(),this._lfcf.dispose(),this}};let PolySynth=class PolySynth extends Instrument{constructor(){super(optionsFromArguments(PolySynth.getDefaults(),arguments,["voice","options"])),this.name="PolySynth",this._availableVoices=[],this._activeVoices=[],this._voices=[],this._gcTimeout=-1,this._averageActiveVoices=0;let e=optionsFromArguments(PolySynth.getDefaults(),arguments,["voice","options"]);assert(!isNumber(e.voice),"DEPRECATED: The polyphony count is no longer the first argument.");let t=e.voice.getDefaults();this.options=Object.assign(t,e.options),this.voice=e.voice,this.maxPolyphony=e.maxPolyphony,this._dummyVoice=this._getNextAvailableVoice();let s=this._voices.indexOf(this._dummyVoice);this._voices.splice(s,1),this._gcTimeout=this.context.setInterval(this._collectGarbage.bind(this),1)}static getDefaults(){return Object.assign(Instrument.getDefaults(),{maxPolyphony:32,options:{},voice:Synth})}get activeVoices(){return this._activeVoices.length}_makeVoiceAvailable(e){this._availableVoices.push(e);let t=this._activeVoices.findIndex(t=>t.voice===e);this._activeVoices.splice(t,1)}_getNextAvailableVoice(){if(this._availableVoices.length)return this._availableVoices.shift();if(this._voices.length<this.maxPolyphony){let e=new this.voice(Object.assign(this.options,{context:this.context,onsilence:this._makeVoiceAvailable.bind(this)}));return e.connect(this.output),this._voices.push(e),e}warn("Max polyphony exceeded. Note dropped.")}_collectGarbage(){if(this._averageActiveVoices=Math.max(.95*this._averageActiveVoices,this.activeVoices),this._availableVoices.length&&this._voices.length>Math.ceil(this._averageActiveVoices+1)){let e=this._availableVoices.shift(),t=this._voices.indexOf(e);this._voices.splice(t,1),this.context.isOffline||e.dispose()}}_triggerAttack(e,t,s){e.forEach(e=>{let i=new MidiClass(this.context,e).toMidi(),n=this._getNextAvailableVoice();n&&(n.triggerAttack(e,t,s),this._activeVoices.push({midi:i,voice:n,released:!1}),this.log("triggerAttack",e,t))})}_triggerRelease(e,t){e.forEach(e=>{let s=new MidiClass(this.context,e).toMidi(),i=this._activeVoices.find(({midi:e,released:t})=>e===s&&!t);i&&(i.voice.triggerRelease(t),i.released=!0,this.log("triggerRelease",e,t))})}_scheduleEvent(e,t,s,i){assert(!this.disposed,"Synth was already disposed"),s<=this.now()?"attack"===e?this._triggerAttack(t,s,i):this._triggerRelease(t,s):this.context.setTimeout(()=>{this._scheduleEvent(e,t,s,i)},s-this.now())}triggerAttack(e,t,s){Array.isArray(e)||(e=[e]);let i=this.toSeconds(t);return this._scheduleEvent("attack",e,i,s),this}triggerRelease(e,t){Array.isArray(e)||(e=[e]);let s=this.toSeconds(t);return this._scheduleEvent("release",e,s),this}triggerAttackRelease(e,t,s,i){let n=this.toSeconds(s);if(this.triggerAttack(e,n,i),isArray(t)){assert(isArray(e),"If the duration is an array, the notes must also be an array");for(let s=0;s<e.length;s++){let i=t[Math.min(s,t.length-1)],o=this.toSeconds(i);assert(o>0,"The duration must be greater than 0"),this.triggerRelease(e[s],n+o)}}else{let s=this.toSeconds(t);assert(s>0,"The duration must be greater than 0"),this.triggerRelease(e,n+s)}return this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}set(e){let t=omitFromObject(e,["onsilence","context"]);return this.options=deepMerge(this.options,t),this._voices.forEach(e=>e.set(t)),this._dummyVoice.set(t),this}get(){return this._dummyVoice.get()}releaseAll(e){let t=this.toSeconds(e);return this._activeVoices.forEach(({voice:e})=>{e.triggerRelease(t)}),this}dispose(){return super.dispose(),this._dummyVoice.dispose(),this._voices.forEach(e=>e.dispose()),this._activeVoices=[],this._availableVoices=[],this.context.clearInterval(this._gcTimeout),this}};let Sampler=class Sampler extends Instrument{constructor(){super(optionsFromArguments(Sampler.getDefaults(),arguments,["urls","onload","baseUrl"],"urls")),this.name="Sampler",this._activeSources=new Map;let e=optionsFromArguments(Sampler.getDefaults(),arguments,["urls","onload","baseUrl"],"urls"),t={};Object.keys(e.urls).forEach(s=>{let i=parseInt(s,10);if(assert(isNote(s)||isNumber(i)&&isFinite(i),`url key is neither a note or midi pitch: ${s}`),isNote(s)){let i=new FrequencyClass(this.context,s).toMidi();t[i]=e.urls[s]}else isNumber(i)&&isFinite(i)&&(t[i]=e.urls[i])}),this._buffers=new ToneAudioBuffers({urls:t,onload:e.onload,baseUrl:e.baseUrl,onerror:e.onerror}),this.attack=e.attack,this.release=e.release,this.curve=e.curve,this._buffers.loaded&&Promise.resolve().then(e.onload)}static getDefaults(){return Object.assign(Instrument.getDefaults(),{attack:0,baseUrl:"",curve:"exponential",onload:noOp,onerror:noOp,release:.1,urls:{}})}_findClosest(e){let t=0;for(;t<96;){if(this._buffers.has(e+t))return-t;if(this._buffers.has(e-t))return t;t++}throw Error(`No available buffers for note: ${e}`)}triggerAttack(e,t,s=1){return this.log("triggerAttack",e,t,s),Array.isArray(e)||(e=[e]),e.forEach(e=>{let i=ftomf(new FrequencyClass(this.context,e).toFrequency()),n=Math.round(i),o=i-n,r=this._findClosest(n),a=n-r,l=this._buffers.get(a),u=intervalToFrequencyRatio(r+o),c=new ToneBufferSource({url:l,context:this.context,curve:this.curve,fadeIn:this.attack,fadeOut:this.release,playbackRate:u}).connect(this.output);c.start(t,0,l.duration/u,s),isArray(this._activeSources.get(n))||this._activeSources.set(n,[]),this._activeSources.get(n).push(c),c.onended=()=>{if(this._activeSources&&this._activeSources.has(n)){let e=this._activeSources.get(n),t=e.indexOf(c);-1!==t&&e.splice(t,1)}}}),this}triggerRelease(e,t){return this.log("triggerRelease",e,t),Array.isArray(e)||(e=[e]),e.forEach(e=>{let s=new FrequencyClass(this.context,e).toMidi();if(this._activeSources.has(s)&&this._activeSources.get(s).length){let e=this._activeSources.get(s);t=this.toSeconds(t),e.forEach(e=>{e.stop(t)}),this._activeSources.set(s,[])}}),this}releaseAll(e){let t=this.toSeconds(e);return this._activeSources.forEach(e=>{for(;e.length;){let s=e.shift();s.stop(t)}}),this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}triggerAttackRelease(e,t,s,i=1){let n=this.toSeconds(s);return this.triggerAttack(e,n,i),isArray(t)?(assert(isArray(e),"notes must be an array when duration is array"),e.forEach((e,s)=>{let i=t[Math.min(s,t.length-1)];this.triggerRelease(e,n+this.toSeconds(i))})):this.triggerRelease(e,n+this.toSeconds(t)),this}add(e,t,s){if(assert(isNote(e)||isFinite(e),`note must be a pitch or midi: ${e}`),isNote(e)){let i=new FrequencyClass(this.context,e).toMidi();this._buffers.add(i,t,s)}else this._buffers.add(e,t,s);return this}get loaded(){return this._buffers.loaded}dispose(){return super.dispose(),this._buffers.dispose(),this._activeSources.forEach(e=>{e.forEach(e=>e.dispose())}),this._activeSources.clear(),this}};(0,sx.gn)([timeRange(0)],Sampler.prototype,"attack",void 0),(0,sx.gn)([timeRange(0)],Sampler.prototype,"release",void 0);let ToneEvent=class ToneEvent extends ToneWithContext{constructor(){super(optionsFromArguments(ToneEvent.getDefaults(),arguments,["callback","value"])),this.name="ToneEvent",this._state=new StateTimeline("stopped"),this._startOffset=0;let e=optionsFromArguments(ToneEvent.getDefaults(),arguments,["callback","value"]);this._loop=e.loop,this.callback=e.callback,this.value=e.value,this._loopStart=this.toTicks(e.loopStart),this._loopEnd=this.toTicks(e.loopEnd),this._playbackRate=e.playbackRate,this._probability=e.probability,this._humanize=e.humanize,this.mute=e.mute,this._playbackRate=e.playbackRate,this._state.increasing=!0,this._rescheduleEvents()}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{callback:noOp,humanize:!1,loop:!1,loopEnd:"1m",loopStart:0,mute:!1,playbackRate:1,probability:1,value:null})}_rescheduleEvents(e=-1){this._state.forEachFrom(e,e=>{let t;if("started"===e.state){-1!==e.id&&this.context.transport.clear(e.id);let s=e.time+Math.round(this.startOffset/this._playbackRate);if(!0===this._loop||isNumber(this._loop)&&this._loop>1){t=1/0,isNumber(this._loop)&&(t=this._loop*this._getLoopDuration());let i=this._state.getAfter(s);null!==i&&(t=Math.min(t,i.time-s)),t!==1/0&&(this._state.setStateAtTime("stopped",s+t+1,{id:-1}),t=new TicksClass(this.context,t));let n=new TicksClass(this.context,this._getLoopDuration());e.id=this.context.transport.scheduleRepeat(this._tick.bind(this),n,new TicksClass(this.context,s),t)}else e.id=this.context.transport.schedule(this._tick.bind(this),new TicksClass(this.context,s))}})}get state(){return this._state.getValueAtTime(this.context.transport.ticks)}get startOffset(){return this._startOffset}set startOffset(e){this._startOffset=e}get probability(){return this._probability}set probability(e){this._probability=e}get humanize(){return this._humanize}set humanize(e){this._humanize=e}start(e){let t=this.toTicks(e);return"stopped"===this._state.getValueAtTime(t)&&(this._state.add({id:-1,state:"started",time:t}),this._rescheduleEvents(t)),this}stop(e){this.cancel(e);let t=this.toTicks(e);if("started"===this._state.getValueAtTime(t)){this._state.setStateAtTime("stopped",t,{id:-1});let e=this._state.getBefore(t),s=t;null!==e&&(s=e.time),this._rescheduleEvents(s)}return this}cancel(e){e=defaultArg(e,-1/0);let t=this.toTicks(e);return this._state.forEachFrom(t,e=>{this.context.transport.clear(e.id)}),this._state.cancel(t),this}_tick(e){let t=this.context.transport.getTicksAtTime(e);if(!this.mute&&"started"===this._state.getValueAtTime(t)){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){let t=.02;isBoolean(this.humanize)||(t=this.toSeconds(this.humanize)),e+=(2*Math.random()-1)*t}this.callback(e,this.value)}}_getLoopDuration(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate)}get loop(){return this._loop}set loop(e){this._loop=e,this._rescheduleEvents()}get playbackRate(){return this._playbackRate}set playbackRate(e){this._playbackRate=e,this._rescheduleEvents()}get loopEnd(){return new TicksClass(this.context,this._loopEnd).toSeconds()}set loopEnd(e){this._loopEnd=this.toTicks(e),this._loop&&this._rescheduleEvents()}get loopStart(){return new TicksClass(this.context,this._loopStart).toSeconds()}set loopStart(e){this._loopStart=this.toTicks(e),this._loop&&this._rescheduleEvents()}get progress(){if(!this._loop)return 0;{let e=this.context.transport.ticks,t=this._state.get(e);if(null===t||"started"!==t.state)return 0;{let s=this._getLoopDuration(),i=(e-t.time)%s;return i/s}}}dispose(){return super.dispose(),this.cancel(),this._state.dispose(),this}};let Loop=class Loop extends ToneWithContext{constructor(){super(optionsFromArguments(Loop.getDefaults(),arguments,["callback","interval"])),this.name="Loop";let e=optionsFromArguments(Loop.getDefaults(),arguments,["callback","interval"]);this._event=new ToneEvent({context:this.context,callback:this._tick.bind(this),loop:!0,loopEnd:e.interval,playbackRate:e.playbackRate,probability:e.probability}),this.callback=e.callback,this.iterations=e.iterations}static getDefaults(){return Object.assign(ToneWithContext.getDefaults(),{interval:"4n",callback:noOp,playbackRate:1,iterations:1/0,probability:1,mute:!1,humanize:!1})}start(e){return this._event.start(e),this}stop(e){return this._event.stop(e),this}cancel(e){return this._event.cancel(e),this}_tick(e){this.callback(e)}get state(){return this._event.state}get progress(){return this._event.progress}get interval(){return this._event.loopEnd}set interval(e){this._event.loopEnd=e}get playbackRate(){return this._event.playbackRate}set playbackRate(e){this._event.playbackRate=e}get humanize(){return this._event.humanize}set humanize(e){this._event.humanize=e}get probability(){return this._event.probability}set probability(e){this._event.probability=e}get mute(){return this._event.mute}set mute(e){this._event.mute=e}get iterations(){return!0===this._event.loop?1/0:this._event.loop}set iterations(e){e===1/0?this._event.loop=!0:this._event.loop=e}dispose(){return super.dispose(),this._event.dispose(),this}};let Part=class Part extends ToneEvent{constructor(){super(optionsFromArguments(Part.getDefaults(),arguments,["callback","events"])),this.name="Part",this._state=new StateTimeline("stopped"),this._events=new Set;let e=optionsFromArguments(Part.getDefaults(),arguments,["callback","events"]);this._state.increasing=!0,e.events.forEach(e=>{isArray(e)?this.add(e[0],e[1]):this.add(e)})}static getDefaults(){return Object.assign(ToneEvent.getDefaults(),{events:[]})}start(e,t){let s=this.toTicks(e);if("started"!==this._state.getValueAtTime(s)){t=defaultArg(t,this._loop?this._loopStart:0),t=this._loop?defaultArg(t,this._loopStart):defaultArg(t,0);let e=this.toTicks(t);this._state.add({id:-1,offset:e,state:"started",time:s}),this._forEach(t=>{this._startNote(t,s,e)})}return this}_startNote(e,t,s){t-=s,this._loop?e.startOffset>=this._loopStart&&e.startOffset<this._loopEnd?(e.startOffset<s&&(t+=this._getLoopDuration()),e.start(new TicksClass(this.context,t))):e.startOffset<this._loopStart&&e.startOffset>=s&&(e.loop=!1,e.start(new TicksClass(this.context,t))):e.startOffset>=s&&e.start(new TicksClass(this.context,t))}get startOffset(){return this._startOffset}set startOffset(e){this._startOffset=e,this._forEach(e=>{e.startOffset+=this._startOffset})}stop(e){let t=this.toTicks(e);return this._state.cancel(t),this._state.setStateAtTime("stopped",t),this._forEach(t=>{t.stop(e)}),this}at(e,t){let s=new TransportTimeClass(this.context,e).toTicks(),i=new TicksClass(this.context,1).toSeconds(),n=this._events.values(),o=n.next();for(;!o.done;){let e=o.value;if(Math.abs(s-e.startOffset)<i)return isDefined(t)&&(e.value=t),e;o=n.next()}return isDefined(t)?(this.add(e,t),this.at(e)):null}add(e,t){let s;e instanceof Object&&Reflect.has(e,"time")&&(e=(t=e).time);let i=this.toTicks(e);return t instanceof ToneEvent?(s=t).callback=this._tick.bind(this):s=new ToneEvent({callback:this._tick.bind(this),context:this.context,value:t}),s.startOffset=i,s.set({humanize:this.humanize,loop:this.loop,loopEnd:this.loopEnd,loopStart:this.loopStart,playbackRate:this.playbackRate,probability:this.probability}),this._events.add(s),this._restartEvent(s),this}_restartEvent(e){this._state.forEach(t=>{"started"===t.state?this._startNote(e,t.time,t.offset):e.stop(new TicksClass(this.context,t.time))})}remove(e,t){return isObject(e)&&e.hasOwnProperty("time")&&(e=(t=e).time),e=this.toTicks(e),this._events.forEach(s=>{s.startOffset===e&&(isUndef(t)||isDefined(t)&&s.value===t)&&(this._events.delete(s),s.dispose())}),this}clear(){return this._forEach(e=>e.dispose()),this._events.clear(),this}cancel(e){return this._forEach(t=>t.cancel(e)),this._state.cancel(this.toTicks(e)),this}_forEach(e){return this._events&&this._events.forEach(t=>{t instanceof Part?t._forEach(e):e(t)}),this}_setAll(e,t){this._forEach(s=>{s[e]=t})}_tick(e,t){this.mute||this.callback(e,t)}_testLoopBoundries(e){this._loop&&(e.startOffset<this._loopStart||e.startOffset>=this._loopEnd)?e.cancel(0):"stopped"===e.state&&this._restartEvent(e)}get probability(){return this._probability}set probability(e){this._probability=e,this._setAll("probability",e)}get humanize(){return this._humanize}set humanize(e){this._humanize=e,this._setAll("humanize",e)}get loop(){return this._loop}set loop(e){this._loop=e,this._forEach(t=>{t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.loop=e,this._testLoopBoundries(t)})}get loopEnd(){return new TicksClass(this.context,this._loopEnd).toSeconds()}set loopEnd(e){this._loopEnd=this.toTicks(e),this._loop&&this._forEach(t=>{t.loopEnd=e,this._testLoopBoundries(t)})}get loopStart(){return new TicksClass(this.context,this._loopStart).toSeconds()}set loopStart(e){this._loopStart=this.toTicks(e),this._loop&&this._forEach(e=>{e.loopStart=this.loopStart,this._testLoopBoundries(e)})}get playbackRate(){return this._playbackRate}set playbackRate(e){this._playbackRate=e,this._setAll("playbackRate",e)}get length(){return this._events.size}dispose(){return super.dispose(),this.clear(),this}};function*upPatternGen(e){let t=0;for(;t<e.length;)t=clampToArraySize(t,e),yield e[t],t++}function*downPatternGen(e){let t=e.length-1;for(;t>=0;)t=clampToArraySize(t,e),yield e[t],t--}function*infiniteGen(e,t){for(;;)yield*t(e)}function clampToArraySize(e,t){return clamp(e,0,t.length-1)}function*alternatingGenerator(e,t){let s=t?0:e.length-1;for(;;)s=clampToArraySize(s,e),yield e[s],t?++s>=e.length-1&&(t=!1):--s<=0&&(t=!0)}function*jumpUp(e){let t=0,s=0;for(;t<e.length;)t=clampToArraySize(t,e),yield e[t],t+=++s%2?2:-1}function*jumpDown(e){let t=e.length-1,s=0;for(;t>=0;)t=clampToArraySize(t,e),yield e[t],t+=++s%2?-2:1}function*randomOnce(e){let t=[];for(let s=0;s<e.length;s++)t.push(s);for(;t.length>0;){let s=t.splice(Math.floor(t.length*Math.random()),1),i=clampToArraySize(s[0],e);yield e[i]}}function*PatternGenerator(e,t="up",s=0){switch(assert(e.length>0,"The array must have more than one value in it"),t){case"up":yield*infiniteGen(e,upPatternGen);case"down":yield*infiniteGen(e,downPatternGen);case"upDown":yield*alternatingGenerator(e,!0);case"downUp":yield*alternatingGenerator(e,!1);case"alternateUp":yield*infiniteGen(e,jumpUp);case"alternateDown":yield*infiniteGen(e,jumpDown);case"random":yield*function*(e){for(;;){let t=Math.floor(Math.random()*e.length);yield e[t]}}(e);case"randomOnce":yield*infiniteGen(e,randomOnce);case"randomWalk":yield*function*(e){let t=Math.floor(Math.random()*e.length);for(;;)0===t?t++:t===e.length-1?t--:.5>Math.random()?t--:t++,yield e[t]}(e)}}let Pattern=class Pattern extends Loop{constructor(){super(optionsFromArguments(Pattern.getDefaults(),arguments,["callback","values","pattern"])),this.name="Pattern";let e=optionsFromArguments(Pattern.getDefaults(),arguments,["callback","values","pattern"]);this.callback=e.callback,this._values=e.values,this._pattern=PatternGenerator(e.values,e.pattern),this._type=e.pattern}static getDefaults(){return Object.assign(Loop.getDefaults(),{pattern:"up",values:[],callback:noOp})}_tick(e){let t=this._pattern.next();this._value=t.value,this.callback(e,this._value)}get values(){return this._values}set values(e){this._values=e,this.pattern=this._type}get value(){return this._value}get pattern(){return this._type}set pattern(e){this._type=e,this._pattern=PatternGenerator(this._values,this._type)}};let Sequence=class Sequence extends ToneEvent{constructor(){super(optionsFromArguments(Sequence.getDefaults(),arguments,["callback","events","subdivision"])),this.name="Sequence",this._part=new Part({callback:this._seqCallback.bind(this),context:this.context}),this._events=[],this._eventsArray=[];let e=optionsFromArguments(Sequence.getDefaults(),arguments,["callback","events","subdivision"]);this._subdivision=this.toTicks(e.subdivision),this.events=e.events,this.loop=e.loop,this.loopStart=e.loopStart,this.loopEnd=e.loopEnd,this.playbackRate=e.playbackRate,this.probability=e.probability,this.humanize=e.humanize,this.mute=e.mute,this.playbackRate=e.playbackRate}static getDefaults(){return Object.assign(omitFromObject(ToneEvent.getDefaults(),["value"]),{events:[],loop:!0,loopEnd:0,loopStart:0,subdivision:"8n"})}_seqCallback(e,t){null!==t&&this.callback(e,t)}get events(){return this._events}set events(e){this.clear(),this._eventsArray=e,this._events=this._createSequence(this._eventsArray),this._eventsUpdated()}start(e,t){return this._part.start(e,t?this._indexTime(t):t),this}stop(e){return this._part.stop(e),this}get subdivision(){return new TicksClass(this.context,this._subdivision).toSeconds()}_createSequence(e){return new Proxy(e,{get:(e,t)=>e[t],set:(e,t,s)=>(isString(t)&&isFinite(parseInt(t,10))&&isArray(s)?e[t]=this._createSequence(s):e[t]=s,this._eventsUpdated(),!0)})}_eventsUpdated(){this._part.clear(),this._rescheduleSequence(this._eventsArray,this._subdivision,this.startOffset),this.loopEnd=this.loopEnd}_rescheduleSequence(e,t,s){e.forEach((e,i)=>{let n=i*t+s;if(isArray(e))this._rescheduleSequence(e,t/e.length,n);else{let t=new TicksClass(this.context,n,"i").toSeconds();this._part.add(t,e)}})}_indexTime(e){return new TicksClass(this.context,e*this._subdivision+this.startOffset).toSeconds()}clear(){return this._part.clear(),this}dispose(){return super.dispose(),this._part.dispose(),this}get loop(){return this._part.loop}set loop(e){this._part.loop=e}get loopStart(){return this._loopStart}set loopStart(e){this._loopStart=e,this._part.loopStart=this._indexTime(e)}get loopEnd(){return this._loopEnd}set loopEnd(e){this._loopEnd=e,0===e?this._part.loopEnd=this._indexTime(this._eventsArray.length):this._part.loopEnd=this._indexTime(e)}get startOffset(){return this._part.startOffset}set startOffset(e){this._part.startOffset=e}get playbackRate(){return this._part.playbackRate}set playbackRate(e){this._part.playbackRate=e}get probability(){return this._part.probability}set probability(e){this._part.probability=e}get progress(){return this._part.progress}get humanize(){return this._part.humanize}set humanize(e){this._part.humanize=e}get length(){return this._part.length}};let CrossFade=class CrossFade extends ToneAudioNode{constructor(){super(Object.assign(optionsFromArguments(CrossFade.getDefaults(),arguments,["fade"]))),this.name="CrossFade",this._panner=this.context.createStereoPanner(),this._split=this.context.createChannelSplitter(2),this._g2a=new GainToAudio({context:this.context}),this.a=new Gain({context:this.context,gain:0}),this.b=new Gain({context:this.context,gain:0}),this.output=new Gain({context:this.context}),this._internalChannels=[this.a,this.b];let e=optionsFromArguments(CrossFade.getDefaults(),arguments,["fade"]);this.fade=new Signal({context:this.context,units:"normalRange",value:e.fade}),readOnly(this,"fade"),this.context.getConstant(1).connect(this._panner),this._panner.connect(this._split),this._panner.channelCount=1,this._panner.channelCountMode="explicit",connect(this._split,this.a.gain,0),connect(this._split,this.b.gain,1),this.fade.chain(this._g2a,this._panner.pan),this.a.connect(this.output),this.b.connect(this.output)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{fade:.5})}dispose(){return super.dispose(),this.a.dispose(),this.b.dispose(),this.output.dispose(),this.fade.dispose(),this._g2a.dispose(),this._panner.disconnect(),this._split.disconnect(),this}};let Effect=class Effect extends ToneAudioNode{constructor(e){super(e),this.name="Effect",this._dryWet=new CrossFade({context:this.context}),this.wet=this._dryWet.fade,this.effectSend=new Gain({context:this.context}),this.effectReturn=new Gain({context:this.context}),this.input=new Gain({context:this.context}),this.output=this._dryWet,this.input.fan(this._dryWet.a,this.effectSend),this.effectReturn.connect(this._dryWet.b),this.wet.setValueAtTime(e.wet,0),this._internalChannels=[this.effectReturn,this.effectSend],readOnly(this,"wet")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{wet:1})}connectEffect(e){return this._internalChannels.push(e),this.effectSend.chain(e,this.effectReturn),this}dispose(){return super.dispose(),this._dryWet.dispose(),this.effectSend.dispose(),this.effectReturn.dispose(),this.wet.dispose(),this}};let LFOEffect=class LFOEffect extends Effect{constructor(e){super(e),this.name="LFOEffect",this._lfo=new LFO({context:this.context,frequency:e.frequency,amplitude:e.depth}),this.depth=this._lfo.amplitude,this.frequency=this._lfo.frequency,this.type=e.type,readOnly(this,["frequency","depth"])}static getDefaults(){return Object.assign(Effect.getDefaults(),{frequency:1,type:"sine",depth:1})}start(e){return this._lfo.start(e),this}stop(e){return this._lfo.stop(e),this}sync(){return this._lfo.sync(),this}unsync(){return this._lfo.unsync(),this}get type(){return this._lfo.type}set type(e){this._lfo.type=e}dispose(){return super.dispose(),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this}};let AutoFilter=class AutoFilter extends LFOEffect{constructor(){super(optionsFromArguments(AutoFilter.getDefaults(),arguments,["frequency","baseFrequency","octaves"])),this.name="AutoFilter";let e=optionsFromArguments(AutoFilter.getDefaults(),arguments,["frequency","baseFrequency","octaves"]);this.filter=new Filter(Object.assign(e.filter,{context:this.context})),this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.octaves=e.octaves,this.baseFrequency=e.baseFrequency}static getDefaults(){return Object.assign(LFOEffect.getDefaults(),{baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}})}get baseFrequency(){return this._lfo.min}set baseFrequency(e){this._lfo.min=this.toFrequency(e),this.octaves=this._octaves}get octaves(){return this._octaves}set octaves(e){this._octaves=e,this._lfo.max=this._lfo.min*Math.pow(2,e)}dispose(){return super.dispose(),this.filter.dispose(),this}};let Panner=class Panner extends ToneAudioNode{constructor(){super(Object.assign(optionsFromArguments(Panner.getDefaults(),arguments,["pan"]))),this.name="Panner",this._panner=this.context.createStereoPanner(),this.input=this._panner,this.output=this._panner;let e=optionsFromArguments(Panner.getDefaults(),arguments,["pan"]);this.pan=new Param({context:this.context,param:this._panner.pan,value:e.pan,minValue:-1,maxValue:1}),this._panner.channelCount=e.channelCount,this._panner.channelCountMode="explicit",readOnly(this,"pan")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{pan:0,channelCount:1})}dispose(){return super.dispose(),this._panner.disconnect(),this.pan.dispose(),this}};let AutoPanner=class AutoPanner extends LFOEffect{constructor(){super(optionsFromArguments(AutoPanner.getDefaults(),arguments,["frequency"])),this.name="AutoPanner";let e=optionsFromArguments(AutoPanner.getDefaults(),arguments,["frequency"]);this._panner=new Panner({context:this.context,channelCount:e.channelCount}),this.connectEffect(this._panner),this._lfo.connect(this._panner.pan),this._lfo.min=-1,this._lfo.max=1}static getDefaults(){return Object.assign(LFOEffect.getDefaults(),{channelCount:1})}dispose(){return super.dispose(),this._panner.dispose(),this}};let Follower=class Follower extends ToneAudioNode{constructor(){super(optionsFromArguments(Follower.getDefaults(),arguments,["smoothing"])),this.name="Follower";let e=optionsFromArguments(Follower.getDefaults(),arguments,["smoothing"]);this._abs=this.input=new Abs({context:this.context}),this._lowpass=this.output=new OnePoleFilter({context:this.context,frequency:1/this.toSeconds(e.smoothing),type:"lowpass"}),this._abs.connect(this._lowpass),this._smoothing=e.smoothing}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{smoothing:.05})}get smoothing(){return this._smoothing}set smoothing(e){this._smoothing=e,this._lowpass.frequency=1/this.toSeconds(this.smoothing)}dispose(){return super.dispose(),this._abs.dispose(),this._lowpass.dispose(),this}};let AutoWah=class AutoWah extends Effect{constructor(){super(optionsFromArguments(AutoWah.getDefaults(),arguments,["baseFrequency","octaves","sensitivity"])),this.name="AutoWah";let e=optionsFromArguments(AutoWah.getDefaults(),arguments,["baseFrequency","octaves","sensitivity"]);this._follower=new Follower({context:this.context,smoothing:e.follower}),this._sweepRange=new ScaleExp({context:this.context,min:0,max:1,exponent:.5}),this._baseFrequency=this.toFrequency(e.baseFrequency),this._octaves=e.octaves,this._inputBoost=new Gain({context:this.context}),this._bandpass=new Filter({context:this.context,rolloff:-48,frequency:0,Q:e.Q}),this._peaking=new Filter({context:this.context,type:"peaking"}),this._peaking.gain.value=e.gain,this.gain=this._peaking.gain,this.Q=this._bandpass.Q,this.effectSend.chain(this._inputBoost,this._follower,this._sweepRange),this._sweepRange.connect(this._bandpass.frequency),this._sweepRange.connect(this._peaking.frequency),this.effectSend.chain(this._bandpass,this._peaking,this.effectReturn),this._setSweepRange(),this.sensitivity=e.sensitivity,readOnly(this,["gain","Q"])}static getDefaults(){return Object.assign(Effect.getDefaults(),{baseFrequency:100,octaves:6,sensitivity:0,Q:2,gain:2,follower:.2})}get octaves(){return this._octaves}set octaves(e){this._octaves=e,this._setSweepRange()}get follower(){return this._follower.smoothing}set follower(e){this._follower.smoothing=e}get baseFrequency(){return this._baseFrequency}set baseFrequency(e){this._baseFrequency=this.toFrequency(e),this._setSweepRange()}get sensitivity(){return gainToDb(1/this._inputBoost.gain.value)}set sensitivity(e){this._inputBoost.gain.value=1/dbToGain(e)}_setSweepRange(){this._sweepRange.min=this._baseFrequency,this._sweepRange.max=Math.min(this._baseFrequency*Math.pow(2,this._octaves),this.context.sampleRate/2)}dispose(){return super.dispose(),this._follower.dispose(),this._sweepRange.dispose(),this._bandpass.dispose(),this._peaking.dispose(),this._inputBoost.dispose(),this}};let sG="bit-crusher",sL=`
	class BitCrusherWorklet extends SingleIOProcessor {

		static get parameterDescriptors() {
			return [{
				name: "bits",
				defaultValue: 12,
				minValue: 1,
				maxValue: 16,
				automationRate: 'k-rate'
			}];
		}

		generate(input, _channel, parameters) {
			const step = Math.pow(0.5, parameters.bits - 1);
			const val = step * Math.floor(input / step + 0.5);
			return val;
		}
	}
`;registerProcessor(sG,sL);let BitCrusher=class BitCrusher extends Effect{constructor(){super(optionsFromArguments(BitCrusher.getDefaults(),arguments,["bits"])),this.name="BitCrusher";let e=optionsFromArguments(BitCrusher.getDefaults(),arguments,["bits"]);this._bitCrusherWorklet=new BitCrusherWorklet({context:this.context,bits:e.bits}),this.connectEffect(this._bitCrusherWorklet),this.bits=this._bitCrusherWorklet.bits}static getDefaults(){return Object.assign(Effect.getDefaults(),{bits:4})}dispose(){return super.dispose(),this._bitCrusherWorklet.dispose(),this}};let BitCrusherWorklet=class BitCrusherWorklet extends ToneAudioWorklet{constructor(){super(optionsFromArguments(BitCrusherWorklet.getDefaults(),arguments)),this.name="BitCrusherWorklet";let e=optionsFromArguments(BitCrusherWorklet.getDefaults(),arguments);this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this.bits=new Param({context:this.context,value:e.bits,units:"positive",minValue:1,maxValue:16,param:this._dummyParam,swappable:!0})}static getDefaults(){return Object.assign(ToneAudioWorklet.getDefaults(),{bits:12})}_audioWorkletName(){return sG}onReady(e){connectSeries(this.input,e,this.output);let t=e.parameters.get("bits");this.bits.setParam(t)}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.bits.dispose(),this}};let Chebyshev=class Chebyshev extends Effect{constructor(){super(optionsFromArguments(Chebyshev.getDefaults(),arguments,["order"])),this.name="Chebyshev";let e=optionsFromArguments(Chebyshev.getDefaults(),arguments,["order"]);this._shaper=new WaveShaper({context:this.context,length:4096}),this._order=e.order,this.connectEffect(this._shaper),this.order=e.order,this.oversample=e.oversample}static getDefaults(){return Object.assign(Effect.getDefaults(),{order:1,oversample:"none"})}_getCoefficient(e,t,s){return s.has(t)||(0===t?s.set(t,0):1===t?s.set(t,e):s.set(t,2*e*this._getCoefficient(e,t-1,s)-this._getCoefficient(e,t-2,s))),s.get(t)}get order(){return this._order}set order(e){this._order=e,this._shaper.setMap(t=>this._getCoefficient(t,e,new Map))}get oversample(){return this._shaper.oversample}set oversample(e){this._shaper.oversample=e}dispose(){return super.dispose(),this._shaper.dispose(),this}};let Split=class Split extends ToneAudioNode{constructor(){super(optionsFromArguments(Split.getDefaults(),arguments,["channels"])),this.name="Split";let e=optionsFromArguments(Split.getDefaults(),arguments,["channels"]);this._splitter=this.input=this.output=this.context.createChannelSplitter(e.channels),this._internalChannels=[this._splitter]}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._splitter.disconnect(),this}};let Merge=class Merge extends ToneAudioNode{constructor(){super(optionsFromArguments(Merge.getDefaults(),arguments,["channels"])),this.name="Merge";let e=optionsFromArguments(Merge.getDefaults(),arguments,["channels"]);this._merger=this.output=this.input=this.context.createChannelMerger(e.channels)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{channels:2})}dispose(){return super.dispose(),this._merger.disconnect(),this}};let StereoEffect=class StereoEffect extends ToneAudioNode{constructor(e){super(e),this.name="StereoEffect",this.input=new Gain({context:this.context}),this.input.channelCount=2,this.input.channelCountMode="explicit",this._dryWet=this.output=new CrossFade({context:this.context,fade:e.wet}),this.wet=this._dryWet.fade,this._split=new Split({context:this.context,channels:2}),this._merge=new Merge({context:this.context,channels:2}),this.input.connect(this._split),this.input.connect(this._dryWet.a),this._merge.connect(this._dryWet.b),readOnly(this,["wet"])}connectEffectLeft(...e){this._split.connect(e[0],0,0),connectSeries(...e),connect(e[e.length-1],this._merge,0,0)}connectEffectRight(...e){this._split.connect(e[0],1,0),connectSeries(...e),connect(e[e.length-1],this._merge,0,1)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{wet:1})}dispose(){return super.dispose(),this._dryWet.dispose(),this._split.dispose(),this._merge.dispose(),this}};let StereoFeedbackEffect=class StereoFeedbackEffect extends StereoEffect{constructor(e){super(e),this.feedback=new Signal({context:this.context,value:e.feedback,units:"normalRange"}),this._feedbackL=new Gain({context:this.context}),this._feedbackR=new Gain({context:this.context}),this._feedbackSplit=new Split({context:this.context,channels:2}),this._feedbackMerge=new Merge({context:this.context,channels:2}),this._merge.connect(this._feedbackSplit),this._feedbackMerge.connect(this._split),this._feedbackSplit.connect(this._feedbackL,0,0),this._feedbackL.connect(this._feedbackMerge,0,0),this._feedbackSplit.connect(this._feedbackR,1,0),this._feedbackR.connect(this._feedbackMerge,0,1),this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain),readOnly(this,["feedback"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{feedback:.5})}dispose(){return super.dispose(),this.feedback.dispose(),this._feedbackL.dispose(),this._feedbackR.dispose(),this._feedbackSplit.dispose(),this._feedbackMerge.dispose(),this}};let Chorus=class Chorus extends StereoFeedbackEffect{constructor(){super(optionsFromArguments(Chorus.getDefaults(),arguments,["frequency","delayTime","depth"])),this.name="Chorus";let e=optionsFromArguments(Chorus.getDefaults(),arguments,["frequency","delayTime","depth"]);this._depth=e.depth,this._delayTime=e.delayTime/1e3,this._lfoL=new LFO({context:this.context,frequency:e.frequency,min:0,max:1}),this._lfoR=new LFO({context:this.context,frequency:e.frequency,min:0,max:1,phase:180}),this._delayNodeL=new Delay({context:this.context}),this._delayNodeR=new Delay({context:this.context}),this.frequency=this._lfoL.frequency,readOnly(this,["frequency"]),this._lfoL.frequency.connect(this._lfoR.frequency),this.connectEffectLeft(this._delayNodeL),this.connectEffectRight(this._delayNodeR),this._lfoL.connect(this._delayNodeL.delayTime),this._lfoR.connect(this._delayNodeR.delayTime),this.depth=this._depth,this.type=e.type,this.spread=e.spread}static getDefaults(){return Object.assign(StereoFeedbackEffect.getDefaults(),{frequency:1.5,delayTime:3.5,depth:.7,type:"sine",spread:180,feedback:0,wet:.5})}get depth(){return this._depth}set depth(e){this._depth=e;let t=this._delayTime*e;this._lfoL.min=Math.max(this._delayTime-t,0),this._lfoL.max=this._delayTime+t,this._lfoR.min=Math.max(this._delayTime-t,0),this._lfoR.max=this._delayTime+t}get delayTime(){return 1e3*this._delayTime}set delayTime(e){this._delayTime=e/1e3,this.depth=this._depth}get type(){return this._lfoL.type}set type(e){this._lfoL.type=e,this._lfoR.type=e}get spread(){return this._lfoR.phase-this._lfoL.phase}set spread(e){this._lfoL.phase=90-e/2,this._lfoR.phase=e/2+90}start(e){return this._lfoL.start(e),this._lfoR.start(e),this}stop(e){return this._lfoL.stop(e),this._lfoR.stop(e),this}sync(){return this._lfoL.sync(),this._lfoR.sync(),this}unsync(){return this._lfoL.unsync(),this._lfoR.unsync(),this}dispose(){return super.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._delayNodeL.dispose(),this._delayNodeR.dispose(),this.frequency.dispose(),this}};let Distortion=class Distortion extends Effect{constructor(){super(optionsFromArguments(Distortion.getDefaults(),arguments,["distortion"])),this.name="Distortion";let e=optionsFromArguments(Distortion.getDefaults(),arguments,["distortion"]);this._shaper=new WaveShaper({context:this.context,length:4096}),this._distortion=e.distortion,this.connectEffect(this._shaper),this.distortion=e.distortion,this.oversample=e.oversample}static getDefaults(){return Object.assign(Effect.getDefaults(),{distortion:.4,oversample:"none"})}get distortion(){return this._distortion}set distortion(e){this._distortion=e;let t=100*e,s=Math.PI/180;this._shaper.setMap(e=>.001>Math.abs(e)?0:(3+t)*e*20*s/(Math.PI+t*Math.abs(e)))}get oversample(){return this._shaper.oversample}set oversample(e){this._shaper.oversample=e}dispose(){return super.dispose(),this._shaper.dispose(),this}};let FeedbackEffect=class FeedbackEffect extends Effect{constructor(e){super(e),this.name="FeedbackEffect",this._feedbackGain=new Gain({context:this.context,gain:e.feedback,units:"normalRange"}),this.feedback=this._feedbackGain.gain,readOnly(this,"feedback"),this.effectReturn.chain(this._feedbackGain,this.effectSend)}static getDefaults(){return Object.assign(Effect.getDefaults(),{feedback:.125})}dispose(){return super.dispose(),this._feedbackGain.dispose(),this.feedback.dispose(),this}};let FeedbackDelay=class FeedbackDelay extends FeedbackEffect{constructor(){super(optionsFromArguments(FeedbackDelay.getDefaults(),arguments,["delayTime","feedback"])),this.name="FeedbackDelay";let e=optionsFromArguments(FeedbackDelay.getDefaults(),arguments,["delayTime","feedback"]);this._delayNode=new Delay({context:this.context,delayTime:e.delayTime,maxDelay:e.maxDelay}),this.delayTime=this._delayNode.delayTime,this.connectEffect(this._delayNode),readOnly(this,"delayTime")}static getDefaults(){return Object.assign(FeedbackEffect.getDefaults(),{delayTime:.25,maxDelay:1})}dispose(){return super.dispose(),this._delayNode.dispose(),this.delayTime.dispose(),this}};let PhaseShiftAllpass=class PhaseShiftAllpass extends ToneAudioNode{constructor(e){super(e),this.name="PhaseShiftAllpass",this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this.offset90=new Gain({context:this.context}),this._bank0=this._createAllPassFilterBank([.6923878,.9360654322959,.988229522686,.9987488452737]),this._bank1=this._createAllPassFilterBank([.4021921162426,.856171088242,.9722909545651,.9952884791278]),this._oneSampleDelay=this.context.createIIRFilter([0,1],[1,0]),connectSeries(this.input,...this._bank0,this._oneSampleDelay,this.output),connectSeries(this.input,...this._bank1,this.offset90)}_createAllPassFilterBank(e){let t=e.map(e=>{let t=[[e*e,0,-1],[1,0,-(e*e)]];return this.context.createIIRFilter(t[0],t[1])});return t}dispose(){return super.dispose(),this.input.dispose(),this.output.dispose(),this.offset90.dispose(),this._bank0.forEach(e=>e.disconnect()),this._bank1.forEach(e=>e.disconnect()),this._oneSampleDelay.disconnect(),this}};let FrequencyShifter=class FrequencyShifter extends Effect{constructor(){super(optionsFromArguments(FrequencyShifter.getDefaults(),arguments,["frequency"])),this.name="FrequencyShifter";let e=optionsFromArguments(FrequencyShifter.getDefaults(),arguments,["frequency"]);this.frequency=new Signal({context:this.context,units:"frequency",value:e.frequency,minValue:-this.context.sampleRate/2,maxValue:this.context.sampleRate/2}),this._sine=new ToneOscillatorNode({context:this.context,type:"sine"}),this._cosine=new Oscillator({context:this.context,phase:-90,type:"sine"}),this._sineMultiply=new Multiply({context:this.context}),this._cosineMultiply=new Multiply({context:this.context}),this._negate=new Negate({context:this.context}),this._add=new Add({context:this.context}),this._phaseShifter=new PhaseShiftAllpass({context:this.context}),this.effectSend.connect(this._phaseShifter),this.frequency.fan(this._sine.frequency,this._cosine.frequency),this._phaseShifter.offset90.connect(this._cosineMultiply),this._cosine.connect(this._cosineMultiply.factor),this._phaseShifter.connect(this._sineMultiply),this._sine.connect(this._sineMultiply.factor),this._sineMultiply.connect(this._negate),this._cosineMultiply.connect(this._add),this._negate.connect(this._add.addend),this._add.connect(this.effectReturn);let t=this.immediate();this._sine.start(t),this._cosine.start(t)}static getDefaults(){return Object.assign(Effect.getDefaults(),{frequency:0})}dispose(){return super.dispose(),this.frequency.dispose(),this._add.dispose(),this._cosine.dispose(),this._cosineMultiply.dispose(),this._negate.dispose(),this._phaseShifter.dispose(),this._sine.dispose(),this._sineMultiply.dispose(),this}};let sj=[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100],sW=[225,556,441,341];let Freeverb=class Freeverb extends StereoEffect{constructor(){super(optionsFromArguments(Freeverb.getDefaults(),arguments,["roomSize","dampening"])),this.name="Freeverb",this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[];let e=optionsFromArguments(Freeverb.getDefaults(),arguments,["roomSize","dampening"]);this.roomSize=new Signal({context:this.context,value:e.roomSize,units:"normalRange"}),this._allpassFiltersL=sW.map(e=>{let t=this.context.createBiquadFilter();return t.type="allpass",t.frequency.value=e,t}),this._allpassFiltersR=sW.map(e=>{let t=this.context.createBiquadFilter();return t.type="allpass",t.frequency.value=e,t}),this._combFilters=sj.map((t,s)=>{let i=new LowpassCombFilter({context:this.context,dampening:e.dampening,delayTime:t});return s<sj.length/2?this.connectEffectLeft(i,...this._allpassFiltersL):this.connectEffectRight(i,...this._allpassFiltersR),this.roomSize.connect(i.resonance),i}),readOnly(this,["roomSize"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{roomSize:.7,dampening:3e3})}get dampening(){return this._combFilters[0].dampening}set dampening(e){this._combFilters.forEach(t=>t.dampening=e)}dispose(){return super.dispose(),this._allpassFiltersL.forEach(e=>e.disconnect()),this._allpassFiltersR.forEach(e=>e.disconnect()),this._combFilters.forEach(e=>e.dispose()),this.roomSize.dispose(),this}};let sz=[.06748,.06404,.08212,.09004],sU=[.773,.802,.753,.733],sQ=[347,113,37];let JCReverb=class JCReverb extends StereoEffect{constructor(){super(optionsFromArguments(JCReverb.getDefaults(),arguments,["roomSize"])),this.name="JCReverb",this._allpassFilters=[],this._feedbackCombFilters=[];let e=optionsFromArguments(JCReverb.getDefaults(),arguments,["roomSize"]);this.roomSize=new Signal({context:this.context,value:e.roomSize,units:"normalRange"}),this._scaleRoomSize=new Scale({context:this.context,min:-.733,max:.197}),this._allpassFilters=sQ.map(e=>{let t=this.context.createBiquadFilter();return t.type="allpass",t.frequency.value=e,t}),this._feedbackCombFilters=sz.map((e,t)=>{let s=new FeedbackCombFilter({context:this.context,delayTime:e});return this._scaleRoomSize.connect(s.resonance),s.resonance.value=sU[t],t<sz.length/2?this.connectEffectLeft(...this._allpassFilters,s):this.connectEffectRight(...this._allpassFilters,s),s}),this.roomSize.connect(this._scaleRoomSize),readOnly(this,["roomSize"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{roomSize:.5})}dispose(){return super.dispose(),this._allpassFilters.forEach(e=>e.disconnect()),this._feedbackCombFilters.forEach(e=>e.dispose()),this.roomSize.dispose(),this._scaleRoomSize.dispose(),this}};let StereoXFeedbackEffect=class StereoXFeedbackEffect extends StereoFeedbackEffect{constructor(e){super(e),this._feedbackL.disconnect(),this._feedbackL.connect(this._feedbackMerge,0,1),this._feedbackR.disconnect(),this._feedbackR.connect(this._feedbackMerge,0,0),readOnly(this,["feedback"])}};let PingPongDelay=class PingPongDelay extends StereoXFeedbackEffect{constructor(){super(optionsFromArguments(PingPongDelay.getDefaults(),arguments,["delayTime","feedback"])),this.name="PingPongDelay";let e=optionsFromArguments(PingPongDelay.getDefaults(),arguments,["delayTime","feedback"]);this._leftDelay=new Delay({context:this.context,maxDelay:e.maxDelay}),this._rightDelay=new Delay({context:this.context,maxDelay:e.maxDelay}),this._rightPreDelay=new Delay({context:this.context,maxDelay:e.maxDelay}),this.delayTime=new Signal({context:this.context,units:"time",value:e.delayTime}),this.connectEffectLeft(this._leftDelay),this.connectEffectRight(this._rightPreDelay,this._rightDelay),this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime),this._feedbackL.disconnect(),this._feedbackL.connect(this._rightDelay),readOnly(this,["delayTime"])}static getDefaults(){return Object.assign(StereoXFeedbackEffect.getDefaults(),{delayTime:.25,maxDelay:1})}dispose(){return super.dispose(),this._leftDelay.dispose(),this._rightDelay.dispose(),this._rightPreDelay.dispose(),this.delayTime.dispose(),this}};let PitchShift=class PitchShift extends FeedbackEffect{constructor(){super(optionsFromArguments(PitchShift.getDefaults(),arguments,["pitch"])),this.name="PitchShift";let e=optionsFromArguments(PitchShift.getDefaults(),arguments,["pitch"]);this._frequency=new Signal({context:this.context}),this._delayA=new Delay({maxDelay:1,context:this.context}),this._lfoA=new LFO({context:this.context,min:0,max:.1,type:"sawtooth"}).connect(this._delayA.delayTime),this._delayB=new Delay({maxDelay:1,context:this.context}),this._lfoB=new LFO({context:this.context,min:0,max:.1,type:"sawtooth",phase:180}).connect(this._delayB.delayTime),this._crossFade=new CrossFade({context:this.context}),this._crossFadeLFO=new LFO({context:this.context,min:0,max:1,type:"triangle",phase:90}).connect(this._crossFade.fade),this._feedbackDelay=new Delay({delayTime:e.delayTime,context:this.context}),this.delayTime=this._feedbackDelay.delayTime,readOnly(this,"delayTime"),this._pitch=e.pitch,this._windowSize=e.windowSize,this._delayA.connect(this._crossFade.a),this._delayB.connect(this._crossFade.b),this._frequency.fan(this._lfoA.frequency,this._lfoB.frequency,this._crossFadeLFO.frequency),this.effectSend.fan(this._delayA,this._delayB),this._crossFade.chain(this._feedbackDelay,this.effectReturn);let t=this.now();this._lfoA.start(t),this._lfoB.start(t),this._crossFadeLFO.start(t),this.windowSize=this._windowSize}static getDefaults(){return Object.assign(FeedbackEffect.getDefaults(),{pitch:0,windowSize:.1,delayTime:0,feedback:0})}get pitch(){return this._pitch}set pitch(e){this._pitch=e;let t=0;e<0?(this._lfoA.min=0,this._lfoA.max=this._windowSize,this._lfoB.min=0,this._lfoB.max=this._windowSize,t=intervalToFrequencyRatio(e-1)+1):(this._lfoA.min=this._windowSize,this._lfoA.max=0,this._lfoB.min=this._windowSize,this._lfoB.max=0,t=intervalToFrequencyRatio(e)-1),this._frequency.value=t*(1.2/this._windowSize)}get windowSize(){return this._windowSize}set windowSize(e){this._windowSize=this.toSeconds(e),this.pitch=this._pitch}dispose(){return super.dispose(),this._frequency.dispose(),this._delayA.dispose(),this._delayB.dispose(),this._lfoA.dispose(),this._lfoB.dispose(),this._crossFade.dispose(),this._crossFadeLFO.dispose(),this._feedbackDelay.dispose(),this}};let Phaser=class Phaser extends StereoEffect{constructor(){super(optionsFromArguments(Phaser.getDefaults(),arguments,["frequency","octaves","baseFrequency"])),this.name="Phaser";let e=optionsFromArguments(Phaser.getDefaults(),arguments,["frequency","octaves","baseFrequency"]);this._lfoL=new LFO({context:this.context,frequency:e.frequency,min:0,max:1}),this._lfoR=new LFO({context:this.context,frequency:e.frequency,min:0,max:1,phase:180}),this._baseFrequency=this.toFrequency(e.baseFrequency),this._octaves=e.octaves,this.Q=new Signal({context:this.context,value:e.Q,units:"positive"}),this._filtersL=this._makeFilters(e.stages,this._lfoL),this._filtersR=this._makeFilters(e.stages,this._lfoR),this.frequency=this._lfoL.frequency,this.frequency.value=e.frequency,this.connectEffectLeft(...this._filtersL),this.connectEffectRight(...this._filtersR),this._lfoL.frequency.connect(this._lfoR.frequency),this.baseFrequency=e.baseFrequency,this.octaves=e.octaves,this._lfoL.start(),this._lfoR.start(),readOnly(this,["frequency","Q"])}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{frequency:.5,octaves:3,stages:10,Q:10,baseFrequency:350})}_makeFilters(e,t){let s=[];for(let i=0;i<e;i++){let e=this.context.createBiquadFilter();e.type="allpass",this.Q.connect(e.Q),t.connect(e.frequency),s.push(e)}return s}get octaves(){return this._octaves}set octaves(e){this._octaves=e;let t=this._baseFrequency*Math.pow(2,e);this._lfoL.max=t,this._lfoR.max=t}get baseFrequency(){return this._baseFrequency}set baseFrequency(e){this._baseFrequency=this.toFrequency(e),this._lfoL.min=this._baseFrequency,this._lfoR.min=this._baseFrequency,this.octaves=this._octaves}dispose(){return super.dispose(),this.Q.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._filtersL.forEach(e=>e.disconnect()),this._filtersR.forEach(e=>e.disconnect()),this.frequency.dispose(),this}};let Reverb=class Reverb extends Effect{constructor(){super(optionsFromArguments(Reverb.getDefaults(),arguments,["decay"])),this.name="Reverb",this._convolver=this.context.createConvolver(),this.ready=Promise.resolve();let e=optionsFromArguments(Reverb.getDefaults(),arguments,["decay"]);this._decay=e.decay,this._preDelay=e.preDelay,this.generate(),this.connectEffect(this._convolver)}static getDefaults(){return Object.assign(Effect.getDefaults(),{decay:1.5,preDelay:.01})}get decay(){return this._decay}set decay(e){assertRange(e=this.toSeconds(e),.001),this._decay=e,this.generate()}get preDelay(){return this._preDelay}set preDelay(e){assertRange(e=this.toSeconds(e),0),this._preDelay=e,this.generate()}generate(){return(0,sx.mG)(this,void 0,void 0,function*(){let e=this.ready,t=new OfflineContext(2,this._decay+this._preDelay,this.context.sampleRate),s=new Noise({context:t}),i=new Noise({context:t}),n=new Merge({context:t});s.connect(n,0,0),i.connect(n,0,1);let o=new Gain({context:t}).toDestination();n.connect(o),s.start(0),i.start(0),o.gain.setValueAtTime(0,0),o.gain.setValueAtTime(1,this._preDelay),o.gain.exponentialApproachValueAtTime(0,this._preDelay,this.decay);let r=t.render();return this.ready=r.then(noOp),yield e,this._convolver.buffer=(yield r).get(),this})}dispose(){return super.dispose(),this._convolver.disconnect(),this}};let MidSideSplit=class MidSideSplit extends ToneAudioNode{constructor(){super(optionsFromArguments(MidSideSplit.getDefaults(),arguments)),this.name="MidSideSplit",this._split=this.input=new Split({channels:2,context:this.context}),this._midAdd=new Add({context:this.context}),this.mid=new Multiply({context:this.context,value:Math.SQRT1_2}),this._sideSubtract=new Subtract({context:this.context}),this.side=new Multiply({context:this.context,value:Math.SQRT1_2}),this._split.connect(this._midAdd,0),this._split.connect(this._midAdd.addend,1),this._split.connect(this._sideSubtract,0),this._split.connect(this._sideSubtract.subtrahend,1),this._midAdd.connect(this.mid),this._sideSubtract.connect(this.side)}dispose(){return super.dispose(),this.mid.dispose(),this.side.dispose(),this._midAdd.dispose(),this._sideSubtract.dispose(),this._split.dispose(),this}};let MidSideMerge=class MidSideMerge extends ToneAudioNode{constructor(){super(optionsFromArguments(MidSideMerge.getDefaults(),arguments)),this.name="MidSideMerge",this.mid=new Gain({context:this.context}),this.side=new Gain({context:this.context}),this._left=new Add({context:this.context}),this._leftMult=new Multiply({context:this.context,value:Math.SQRT1_2}),this._right=new Subtract({context:this.context}),this._rightMult=new Multiply({context:this.context,value:Math.SQRT1_2}),this._merge=this.output=new Merge({context:this.context}),this.mid.fan(this._left),this.side.connect(this._left.addend),this.mid.connect(this._right),this.side.connect(this._right.subtrahend),this._left.connect(this._leftMult),this._right.connect(this._rightMult),this._leftMult.connect(this._merge,0,0),this._rightMult.connect(this._merge,0,1)}dispose(){return super.dispose(),this.mid.dispose(),this.side.dispose(),this._leftMult.dispose(),this._rightMult.dispose(),this._left.dispose(),this._right.dispose(),this}};let MidSideEffect=class MidSideEffect extends Effect{constructor(e){super(e),this.name="MidSideEffect",this._midSideMerge=new MidSideMerge({context:this.context}),this._midSideSplit=new MidSideSplit({context:this.context}),this._midSend=this._midSideSplit.mid,this._sideSend=this._midSideSplit.side,this._midReturn=this._midSideMerge.mid,this._sideReturn=this._midSideMerge.side,this.effectSend.connect(this._midSideSplit),this._midSideMerge.connect(this.effectReturn)}connectEffectMid(...e){this._midSend.chain(...e,this._midReturn)}connectEffectSide(...e){this._sideSend.chain(...e,this._sideReturn)}dispose(){return super.dispose(),this._midSideSplit.dispose(),this._midSideMerge.dispose(),this._midSend.dispose(),this._sideSend.dispose(),this._midReturn.dispose(),this._sideReturn.dispose(),this}};let StereoWidener=class StereoWidener extends MidSideEffect{constructor(){super(optionsFromArguments(StereoWidener.getDefaults(),arguments,["width"])),this.name="StereoWidener";let e=optionsFromArguments(StereoWidener.getDefaults(),arguments,["width"]);this.width=new Signal({context:this.context,value:e.width,units:"normalRange"}),readOnly(this,["width"]),this._twoTimesWidthMid=new Multiply({context:this.context,value:2}),this._twoTimesWidthSide=new Multiply({context:this.context,value:2}),this._midMult=new Multiply({context:this.context}),this._twoTimesWidthMid.connect(this._midMult.factor),this.connectEffectMid(this._midMult),this._oneMinusWidth=new Subtract({context:this.context}),this._oneMinusWidth.connect(this._twoTimesWidthMid),connect(this.context.getConstant(1),this._oneMinusWidth),this.width.connect(this._oneMinusWidth.subtrahend),this._sideMult=new Multiply({context:this.context}),this.width.connect(this._twoTimesWidthSide),this._twoTimesWidthSide.connect(this._sideMult.factor),this.connectEffectSide(this._sideMult)}static getDefaults(){return Object.assign(MidSideEffect.getDefaults(),{width:.5})}dispose(){return super.dispose(),this.width.dispose(),this._midMult.dispose(),this._sideMult.dispose(),this._twoTimesWidthMid.dispose(),this._twoTimesWidthSide.dispose(),this._oneMinusWidth.dispose(),this}};let Tremolo=class Tremolo extends StereoEffect{constructor(){super(optionsFromArguments(Tremolo.getDefaults(),arguments,["frequency","depth"])),this.name="Tremolo";let e=optionsFromArguments(Tremolo.getDefaults(),arguments,["frequency","depth"]);this._lfoL=new LFO({context:this.context,type:e.type,min:1,max:0}),this._lfoR=new LFO({context:this.context,type:e.type,min:1,max:0}),this._amplitudeL=new Gain({context:this.context}),this._amplitudeR=new Gain({context:this.context}),this.frequency=new Signal({context:this.context,value:e.frequency,units:"frequency"}),this.depth=new Signal({context:this.context,value:e.depth,units:"normalRange"}),readOnly(this,["frequency","depth"]),this.connectEffectLeft(this._amplitudeL),this.connectEffectRight(this._amplitudeR),this._lfoL.connect(this._amplitudeL.gain),this._lfoR.connect(this._amplitudeR.gain),this.frequency.fan(this._lfoL.frequency,this._lfoR.frequency),this.depth.fan(this._lfoR.amplitude,this._lfoL.amplitude),this.spread=e.spread}static getDefaults(){return Object.assign(StereoEffect.getDefaults(),{frequency:10,type:"sine",depth:.5,spread:180})}start(e){return this._lfoL.start(e),this._lfoR.start(e),this}stop(e){return this._lfoL.stop(e),this._lfoR.stop(e),this}sync(){return this._lfoL.sync(),this._lfoR.sync(),this.context.transport.syncSignal(this.frequency),this}unsync(){return this._lfoL.unsync(),this._lfoR.unsync(),this.context.transport.unsyncSignal(this.frequency),this}get type(){return this._lfoL.type}set type(e){this._lfoL.type=e,this._lfoR.type=e}get spread(){return this._lfoR.phase-this._lfoL.phase}set spread(e){this._lfoL.phase=90-e/2,this._lfoR.phase=e/2+90}dispose(){return super.dispose(),this._lfoL.dispose(),this._lfoR.dispose(),this._amplitudeL.dispose(),this._amplitudeR.dispose(),this.frequency.dispose(),this.depth.dispose(),this}};let Vibrato=class Vibrato extends Effect{constructor(){super(optionsFromArguments(Vibrato.getDefaults(),arguments,["frequency","depth"])),this.name="Vibrato";let e=optionsFromArguments(Vibrato.getDefaults(),arguments,["frequency","depth"]);this._delayNode=new Delay({context:this.context,delayTime:0,maxDelay:e.maxDelay}),this._lfo=new LFO({context:this.context,type:e.type,min:0,max:e.maxDelay,frequency:e.frequency,phase:-90}).start().connect(this._delayNode.delayTime),this.frequency=this._lfo.frequency,this.depth=this._lfo.amplitude,this.depth.value=e.depth,readOnly(this,["frequency","depth"]),this.effectSend.chain(this._delayNode,this.effectReturn)}static getDefaults(){return Object.assign(Effect.getDefaults(),{maxDelay:.005,frequency:5,depth:.1,type:"sine"})}get type(){return this._lfo.type}set type(e){this._lfo.type=e}dispose(){return super.dispose(),this._delayNode.dispose(),this._lfo.dispose(),this.frequency.dispose(),this.depth.dispose(),this}};let Analyser=class Analyser extends ToneAudioNode{constructor(){super(optionsFromArguments(Analyser.getDefaults(),arguments,["type","size"])),this.name="Analyser",this._analysers=[],this._buffers=[];let e=optionsFromArguments(Analyser.getDefaults(),arguments,["type","size"]);this.input=this.output=this._gain=new Gain({context:this.context}),this._split=new Split({context:this.context,channels:e.channels}),this.input.connect(this._split),assertRange(e.channels,1);for(let t=0;t<e.channels;t++)this._analysers[t]=this.context.createAnalyser(),this._split.connect(this._analysers[t],t,0);this.size=e.size,this.type=e.type}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{size:1024,smoothing:.8,type:"fft",channels:1})}getValue(){return(this._analysers.forEach((e,t)=>{let s=this._buffers[t];"fft"===this._type?e.getFloatFrequencyData(s):"waveform"===this._type&&e.getFloatTimeDomainData(s)}),1===this.channels)?this._buffers[0]:this._buffers}get size(){return this._analysers[0].frequencyBinCount}set size(e){this._analysers.forEach((t,s)=>{t.fftSize=2*e,this._buffers[s]=new Float32Array(e)})}get channels(){return this._analysers.length}get type(){return this._type}set type(e){assert("waveform"===e||"fft"===e,`Analyser: invalid type: ${e}`),this._type=e}get smoothing(){return this._analysers[0].smoothingTimeConstant}set smoothing(e){this._analysers.forEach(t=>t.smoothingTimeConstant=e)}dispose(){return super.dispose(),this._analysers.forEach(e=>e.disconnect()),this._split.dispose(),this._gain.dispose(),this}};let MeterBase=class MeterBase extends ToneAudioNode{constructor(){super(optionsFromArguments(MeterBase.getDefaults(),arguments)),this.name="MeterBase",this.input=this.output=this._analyser=new Analyser({context:this.context,size:256,type:"waveform"})}dispose(){return super.dispose(),this._analyser.dispose(),this}};let Meter=class Meter extends MeterBase{constructor(){super(optionsFromArguments(Meter.getDefaults(),arguments,["smoothing"])),this.name="Meter",this._rms=0;let e=optionsFromArguments(Meter.getDefaults(),arguments,["smoothing"]);this.input=this.output=this._analyser=new Analyser({context:this.context,size:256,type:"waveform",channels:e.channels}),this.smoothing=e.smoothing,this.normalRange=e.normalRange}static getDefaults(){return Object.assign(MeterBase.getDefaults(),{smoothing:.8,normalRange:!1,channels:1})}getLevel(){return warn("'getLevel' has been changed to 'getValue'"),this.getValue()}getValue(){let e=this._analyser.getValue(),t=1===this.channels?[e]:e,s=t.map(e=>{let t=e.reduce((e,t)=>e+t*t,0),s=Math.sqrt(t/e.length);return this._rms=Math.max(s,this._rms*this.smoothing),this.normalRange?this._rms:gainToDb(this._rms)});return 1===this.channels?s[0]:s}get channels(){return this._analyser.channels}dispose(){return super.dispose(),this._analyser.dispose(),this}};let FFT=class FFT extends MeterBase{constructor(){super(optionsFromArguments(FFT.getDefaults(),arguments,["size"])),this.name="FFT";let e=optionsFromArguments(FFT.getDefaults(),arguments,["size"]);this.normalRange=e.normalRange,this._analyser.type="fft",this.size=e.size}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{normalRange:!1,size:1024,smoothing:.8})}getValue(){let e=this._analyser.getValue();return e.map(e=>this.normalRange?dbToGain(e):e)}get size(){return this._analyser.size}set size(e){this._analyser.size=e}get smoothing(){return this._analyser.smoothing}set smoothing(e){this._analyser.smoothing=e}getFrequencyOfIndex(e){return assert(0<=e&&e<this.size,`index must be greater than or equal to 0 and less than ${this.size}`),e*this.context.sampleRate/(2*this.size)}};let DCMeter=class DCMeter extends MeterBase{constructor(){super(optionsFromArguments(DCMeter.getDefaults(),arguments)),this.name="DCMeter",this._analyser.type="waveform",this._analyser.size=256}getValue(){let e=this._analyser.getValue();return e[0]}};let Waveform=class Waveform extends MeterBase{constructor(){super(optionsFromArguments(Waveform.getDefaults(),arguments,["size"])),this.name="Waveform";let e=optionsFromArguments(Waveform.getDefaults(),arguments,["size"]);this._analyser.type="waveform",this.size=e.size}static getDefaults(){return Object.assign(MeterBase.getDefaults(),{size:1024})}getValue(){return this._analyser.getValue()}get size(){return this._analyser.size}set size(e){this._analyser.size=e}};let Solo=class Solo extends ToneAudioNode{constructor(){super(optionsFromArguments(Solo.getDefaults(),arguments,["solo"])),this.name="Solo";let e=optionsFromArguments(Solo.getDefaults(),arguments,["solo"]);this.input=this.output=new Gain({context:this.context}),Solo._allSolos.has(this.context)||Solo._allSolos.set(this.context,new Set),Solo._allSolos.get(this.context).add(this),this.solo=e.solo}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{solo:!1})}get solo(){return this._isSoloed()}set solo(e){e?this._addSolo():this._removeSolo(),Solo._allSolos.get(this.context).forEach(e=>e._updateSolo())}get muted(){return 0===this.input.gain.value}_addSolo(){Solo._soloed.has(this.context)||Solo._soloed.set(this.context,new Set),Solo._soloed.get(this.context).add(this)}_removeSolo(){Solo._soloed.has(this.context)&&Solo._soloed.get(this.context).delete(this)}_isSoloed(){return Solo._soloed.has(this.context)&&Solo._soloed.get(this.context).has(this)}_noSolos(){return!Solo._soloed.has(this.context)||Solo._soloed.has(this.context)&&0===Solo._soloed.get(this.context).size}_updateSolo(){this._isSoloed()?this.input.gain.value=1:this._noSolos()?this.input.gain.value=1:this.input.gain.value=0}dispose(){return super.dispose(),Solo._allSolos.get(this.context).delete(this),this._removeSolo(),this}};Solo._allSolos=new Map,Solo._soloed=new Map;let PanVol=class PanVol extends ToneAudioNode{constructor(){super(optionsFromArguments(PanVol.getDefaults(),arguments,["pan","volume"])),this.name="PanVol";let e=optionsFromArguments(PanVol.getDefaults(),arguments,["pan","volume"]);this._panner=this.input=new Panner({context:this.context,pan:e.pan,channelCount:e.channelCount}),this.pan=this._panner.pan,this._volume=this.output=new Volume({context:this.context,volume:e.volume}),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=e.mute,readOnly(this,["pan","volume"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mute:!1,pan:0,volume:0,channelCount:1})}get mute(){return this._volume.mute}set mute(e){this._volume.mute=e}dispose(){return super.dispose(),this._panner.dispose(),this.pan.dispose(),this._volume.dispose(),this.volume.dispose(),this}};let Channel=class Channel extends ToneAudioNode{constructor(){super(optionsFromArguments(Channel.getDefaults(),arguments,["volume","pan"])),this.name="Channel";let e=optionsFromArguments(Channel.getDefaults(),arguments,["volume","pan"]);this._solo=this.input=new Solo({solo:e.solo,context:this.context}),this._panVol=this.output=new PanVol({context:this.context,pan:e.pan,volume:e.volume,mute:e.mute,channelCount:e.channelCount}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),readOnly(this,["pan","volume"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{pan:0,volume:0,mute:!1,solo:!1,channelCount:1})}get solo(){return this._solo.solo}set solo(e){this._solo.solo=e}get muted(){return this._solo.muted||this.mute}get mute(){return this._panVol.mute}set mute(e){this._panVol.mute=e}_getBus(e){return Channel.buses.has(e)||Channel.buses.set(e,new Gain({context:this.context})),Channel.buses.get(e)}send(e,t=0){let s=this._getBus(e),i=new Gain({context:this.context,units:"decibels",gain:t});return this.connect(i),i.connect(s),i}receive(e){let t=this._getBus(e);return t.connect(this),this}dispose(){return super.dispose(),this._panVol.dispose(),this.pan.dispose(),this.volume.dispose(),this._solo.dispose(),this}};Channel.buses=new Map;let Mono=class Mono extends ToneAudioNode{constructor(){super(optionsFromArguments(Mono.getDefaults(),arguments)),this.name="Mono",this.input=new Gain({context:this.context}),this._merge=this.output=new Merge({channels:2,context:this.context}),this.input.connect(this._merge,0,0),this.input.connect(this._merge,0,1)}dispose(){return super.dispose(),this._merge.dispose(),this.input.dispose(),this}};let MultibandSplit=class MultibandSplit extends ToneAudioNode{constructor(){super(optionsFromArguments(MultibandSplit.getDefaults(),arguments,["lowFrequency","highFrequency"])),this.name="MultibandSplit",this.input=new Gain({context:this.context}),this.output=void 0,this.low=new Filter({context:this.context,frequency:0,type:"lowpass"}),this._lowMidFilter=new Filter({context:this.context,frequency:0,type:"highpass"}),this.mid=new Filter({context:this.context,frequency:0,type:"lowpass"}),this.high=new Filter({context:this.context,frequency:0,type:"highpass"}),this._internalChannels=[this.low,this.mid,this.high];let e=optionsFromArguments(MultibandSplit.getDefaults(),arguments,["lowFrequency","highFrequency"]);this.lowFrequency=new Signal({context:this.context,units:"frequency",value:e.lowFrequency}),this.highFrequency=new Signal({context:this.context,units:"frequency",value:e.highFrequency}),this.Q=new Signal({context:this.context,units:"positive",value:e.Q}),this.input.fan(this.low,this.high),this.input.chain(this._lowMidFilter,this.mid),this.lowFrequency.fan(this.low.frequency,this._lowMidFilter.frequency),this.highFrequency.fan(this.mid.frequency,this.high.frequency),this.Q.connect(this.low.Q),this.Q.connect(this._lowMidFilter.Q),this.Q.connect(this.mid.Q),this.Q.connect(this.high.Q),readOnly(this,["high","mid","low","highFrequency","lowFrequency"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{Q:1,highFrequency:2500,lowFrequency:400})}dispose(){return super.dispose(),writable(this,["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this._lowMidFilter.dispose(),this.mid.dispose(),this.high.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this.Q.dispose(),this}};let Listener=class Listener extends ToneAudioNode{constructor(){super(...arguments),this.name="Listener",this.positionX=new Param({context:this.context,param:this.context.rawContext.listener.positionX}),this.positionY=new Param({context:this.context,param:this.context.rawContext.listener.positionY}),this.positionZ=new Param({context:this.context,param:this.context.rawContext.listener.positionZ}),this.forwardX=new Param({context:this.context,param:this.context.rawContext.listener.forwardX}),this.forwardY=new Param({context:this.context,param:this.context.rawContext.listener.forwardY}),this.forwardZ=new Param({context:this.context,param:this.context.rawContext.listener.forwardZ}),this.upX=new Param({context:this.context,param:this.context.rawContext.listener.upX}),this.upY=new Param({context:this.context,param:this.context.rawContext.listener.upY}),this.upZ=new Param({context:this.context,param:this.context.rawContext.listener.upZ})}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:-1,upX:0,upY:1,upZ:0})}dispose(){return super.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this.forwardX.dispose(),this.forwardY.dispose(),this.forwardZ.dispose(),this.upX.dispose(),this.upY.dispose(),this.upZ.dispose(),this}};onContextInit(e=>{e.listener=new Listener({context:e})}),onContextClose(e=>{e.listener.dispose()});let Panner3D=class Panner3D extends ToneAudioNode{constructor(){super(optionsFromArguments(Panner3D.getDefaults(),arguments,["positionX","positionY","positionZ"])),this.name="Panner3D";let e=optionsFromArguments(Panner3D.getDefaults(),arguments,["positionX","positionY","positionZ"]);this._panner=this.input=this.output=this.context.createPanner(),this.panningModel=e.panningModel,this.maxDistance=e.maxDistance,this.distanceModel=e.distanceModel,this.coneOuterGain=e.coneOuterGain,this.coneOuterAngle=e.coneOuterAngle,this.coneInnerAngle=e.coneInnerAngle,this.refDistance=e.refDistance,this.rolloffFactor=e.rolloffFactor,this.positionX=new Param({context:this.context,param:this._panner.positionX,value:e.positionX}),this.positionY=new Param({context:this.context,param:this._panner.positionY,value:e.positionY}),this.positionZ=new Param({context:this.context,param:this._panner.positionZ,value:e.positionZ}),this.orientationX=new Param({context:this.context,param:this._panner.orientationX,value:e.orientationX}),this.orientationY=new Param({context:this.context,param:this._panner.orientationY,value:e.orientationY}),this.orientationZ=new Param({context:this.context,param:this._panner.orientationZ,value:e.orientationZ})}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:0,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1})}setPosition(e,t,s){return this.positionX.value=e,this.positionY.value=t,this.positionZ.value=s,this}setOrientation(e,t,s){return this.orientationX.value=e,this.orientationY.value=t,this.orientationZ.value=s,this}get panningModel(){return this._panner.panningModel}set panningModel(e){this._panner.panningModel=e}get refDistance(){return this._panner.refDistance}set refDistance(e){this._panner.refDistance=e}get rolloffFactor(){return this._panner.rolloffFactor}set rolloffFactor(e){this._panner.rolloffFactor=e}get distanceModel(){return this._panner.distanceModel}set distanceModel(e){this._panner.distanceModel=e}get coneInnerAngle(){return this._panner.coneInnerAngle}set coneInnerAngle(e){this._panner.coneInnerAngle=e}get coneOuterAngle(){return this._panner.coneOuterAngle}set coneOuterAngle(e){this._panner.coneOuterAngle=e}get coneOuterGain(){return this._panner.coneOuterGain}set coneOuterGain(e){this._panner.coneOuterGain=e}get maxDistance(){return this._panner.maxDistance}set maxDistance(e){this._panner.maxDistance=e}dispose(){return super.dispose(),this._panner.disconnect(),this.orientationX.dispose(),this.orientationY.dispose(),this.orientationZ.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this}};let Recorder=class Recorder extends ToneAudioNode{constructor(){super(optionsFromArguments(Recorder.getDefaults(),arguments)),this.name="Recorder";let e=optionsFromArguments(Recorder.getDefaults(),arguments);this.input=new Gain({context:this.context}),assert(Recorder.supported,"Media Recorder API is not available"),this._stream=this.context.createMediaStreamDestination(),this.input.connect(this._stream),this._recorder=new MediaRecorder(this._stream.stream,{mimeType:e.mimeType})}static getDefaults(){return ToneAudioNode.getDefaults()}get mimeType(){return this._recorder.mimeType}static get supported(){return null!==sy&&Reflect.has(sy,"MediaRecorder")}get state(){return"inactive"===this._recorder.state?"stopped":"paused"===this._recorder.state?"paused":"started"}start(){return(0,sx.mG)(this,void 0,void 0,function*(){assert("started"!==this.state,"Recorder is already started");let e=new Promise(e=>{let handleStart=()=>{this._recorder.removeEventListener("start",handleStart,!1),e()};this._recorder.addEventListener("start",handleStart,!1)});return this._recorder.start(),yield e})}stop(){return(0,sx.mG)(this,void 0,void 0,function*(){assert("stopped"!==this.state,"Recorder is not started");let e=new Promise(e=>{let handleData=t=>{this._recorder.removeEventListener("dataavailable",handleData,!1),e(t.data)};this._recorder.addEventListener("dataavailable",handleData,!1)});return this._recorder.stop(),yield e})}pause(){return assert("started"===this.state,"Recorder must be started"),this._recorder.pause(),this}dispose(){return super.dispose(),this.input.dispose(),this._stream.disconnect(),this}};let Compressor=class Compressor extends ToneAudioNode{constructor(){super(optionsFromArguments(Compressor.getDefaults(),arguments,["threshold","ratio"])),this.name="Compressor",this._compressor=this.context.createDynamicsCompressor(),this.input=this._compressor,this.output=this._compressor;let e=optionsFromArguments(Compressor.getDefaults(),arguments,["threshold","ratio"]);this.threshold=new Param({minValue:this._compressor.threshold.minValue,maxValue:this._compressor.threshold.maxValue,context:this.context,convert:!1,param:this._compressor.threshold,units:"decibels",value:e.threshold}),this.attack=new Param({minValue:this._compressor.attack.minValue,maxValue:this._compressor.attack.maxValue,context:this.context,param:this._compressor.attack,units:"time",value:e.attack}),this.release=new Param({minValue:this._compressor.release.minValue,maxValue:this._compressor.release.maxValue,context:this.context,param:this._compressor.release,units:"time",value:e.release}),this.knee=new Param({minValue:this._compressor.knee.minValue,maxValue:this._compressor.knee.maxValue,context:this.context,convert:!1,param:this._compressor.knee,units:"decibels",value:e.knee}),this.ratio=new Param({minValue:this._compressor.ratio.minValue,maxValue:this._compressor.ratio.maxValue,context:this.context,convert:!1,param:this._compressor.ratio,units:"positive",value:e.ratio}),readOnly(this,["knee","release","attack","ratio","threshold"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{attack:.003,knee:30,ratio:12,release:.25,threshold:-24})}get reduction(){return this._compressor.reduction}dispose(){return super.dispose(),this._compressor.disconnect(),this.attack.dispose(),this.release.dispose(),this.threshold.dispose(),this.ratio.dispose(),this.knee.dispose(),this}};let Gate=class Gate extends ToneAudioNode{constructor(){super(Object.assign(optionsFromArguments(Gate.getDefaults(),arguments,["threshold","smoothing"]))),this.name="Gate";let e=optionsFromArguments(Gate.getDefaults(),arguments,["threshold","smoothing"]);this._follower=new Follower({context:this.context,smoothing:e.smoothing}),this._gt=new GreaterThan({context:this.context,value:dbToGain(e.threshold)}),this.input=new Gain({context:this.context}),this._gate=this.output=new Gain({context:this.context}),this.input.connect(this._gate),this.input.chain(this._follower,this._gt,this._gate.gain)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{smoothing:.1,threshold:-40})}get threshold(){return gainToDb(this._gt.value)}set threshold(e){this._gt.value=dbToGain(e)}get smoothing(){return this._follower.smoothing}set smoothing(e){this._follower.smoothing=e}dispose(){return super.dispose(),this.input.dispose(),this._follower.dispose(),this._gt.dispose(),this._gate.dispose(),this}};let Limiter=class Limiter extends ToneAudioNode{constructor(){super(Object.assign(optionsFromArguments(Limiter.getDefaults(),arguments,["threshold"]))),this.name="Limiter";let e=optionsFromArguments(Limiter.getDefaults(),arguments,["threshold"]);this._compressor=this.input=this.output=new Compressor({context:this.context,ratio:20,attack:.003,release:.01,threshold:e.threshold}),this.threshold=this._compressor.threshold,readOnly(this,"threshold")}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{threshold:-12})}get reduction(){return this._compressor.reduction}dispose(){return super.dispose(),this._compressor.dispose(),this.threshold.dispose(),this}};let MidSideCompressor=class MidSideCompressor extends ToneAudioNode{constructor(){super(Object.assign(optionsFromArguments(MidSideCompressor.getDefaults(),arguments))),this.name="MidSideCompressor";let e=optionsFromArguments(MidSideCompressor.getDefaults(),arguments);this._midSideSplit=this.input=new MidSideSplit({context:this.context}),this._midSideMerge=this.output=new MidSideMerge({context:this.context}),this.mid=new Compressor(Object.assign(e.mid,{context:this.context})),this.side=new Compressor(Object.assign(e.side,{context:this.context})),this._midSideSplit.mid.chain(this.mid,this._midSideMerge.mid),this._midSideSplit.side.chain(this.side,this._midSideMerge.side),readOnly(this,["mid","side"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},side:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10}})}dispose(){return super.dispose(),this.mid.dispose(),this.side.dispose(),this._midSideSplit.dispose(),this._midSideMerge.dispose(),this}};let MultibandCompressor=class MultibandCompressor extends ToneAudioNode{constructor(){super(Object.assign(optionsFromArguments(MultibandCompressor.getDefaults(),arguments))),this.name="MultibandCompressor";let e=optionsFromArguments(MultibandCompressor.getDefaults(),arguments);this._splitter=this.input=new MultibandSplit({context:this.context,lowFrequency:e.lowFrequency,highFrequency:e.highFrequency}),this.lowFrequency=this._splitter.lowFrequency,this.highFrequency=this._splitter.highFrequency,this.output=new Gain({context:this.context}),this.low=new Compressor(Object.assign(e.low,{context:this.context})),this.mid=new Compressor(Object.assign(e.mid,{context:this.context})),this.high=new Compressor(Object.assign(e.high,{context:this.context})),this._splitter.low.chain(this.low,this.output),this._splitter.mid.chain(this.mid,this.output),this._splitter.high.chain(this.high,this.output),readOnly(this,["high","mid","low","highFrequency","lowFrequency"])}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{lowFrequency:250,highFrequency:2e3,low:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10},mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},high:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16}})}dispose(){return super.dispose(),this._splitter.dispose(),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this.output.dispose(),this}};let EQ3=class EQ3 extends ToneAudioNode{constructor(){super(optionsFromArguments(EQ3.getDefaults(),arguments,["low","mid","high"])),this.name="EQ3",this.output=new Gain({context:this.context}),this._internalChannels=[];let e=optionsFromArguments(EQ3.getDefaults(),arguments,["low","mid","high"]);this.input=this._multibandSplit=new MultibandSplit({context:this.context,highFrequency:e.highFrequency,lowFrequency:e.lowFrequency}),this._lowGain=new Gain({context:this.context,gain:e.low,units:"decibels"}),this._midGain=new Gain({context:this.context,gain:e.mid,units:"decibels"}),this._highGain=new Gain({context:this.context,gain:e.high,units:"decibels"}),this.low=this._lowGain.gain,this.mid=this._midGain.gain,this.high=this._highGain.gain,this.Q=this._multibandSplit.Q,this.lowFrequency=this._multibandSplit.lowFrequency,this.highFrequency=this._multibandSplit.highFrequency,this._multibandSplit.low.chain(this._lowGain,this.output),this._multibandSplit.mid.chain(this._midGain,this.output),this._multibandSplit.high.chain(this._highGain,this.output),readOnly(this,["low","mid","high","lowFrequency","highFrequency"]),this._internalChannels=[this._multibandSplit]}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{high:0,highFrequency:2500,low:0,lowFrequency:400,mid:0})}dispose(){return super.dispose(),writable(this,["low","mid","high","lowFrequency","highFrequency"]),this._multibandSplit.dispose(),this.lowFrequency.dispose(),this.highFrequency.dispose(),this._lowGain.dispose(),this._midGain.dispose(),this._highGain.dispose(),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this.Q.dispose(),this}};let Convolver=class Convolver extends ToneAudioNode{constructor(){super(optionsFromArguments(Convolver.getDefaults(),arguments,["url","onload"])),this.name="Convolver",this._convolver=this.context.createConvolver();let e=optionsFromArguments(Convolver.getDefaults(),arguments,["url","onload"]);this._buffer=new ToneAudioBuffer(e.url,t=>{this.buffer=t,e.onload()}),this.input=new Gain({context:this.context}),this.output=new Gain({context:this.context}),this._buffer.loaded&&(this.buffer=this._buffer),this.normalize=e.normalize,this.input.chain(this._convolver,this.output)}static getDefaults(){return Object.assign(ToneAudioNode.getDefaults(),{normalize:!0,onload:noOp})}load(e){return(0,sx.mG)(this,void 0,void 0,function*(){this.buffer=yield this._buffer.load(e)})}get buffer(){return this._buffer.length?this._buffer:null}set buffer(e){e&&this._buffer.set(e),this._convolver.buffer&&(this.input.disconnect(),this._convolver.disconnect(),this._convolver=this.context.createConvolver(),this.input.chain(this._convolver,this.output));let t=this._buffer.get();this._convolver.buffer=t||null}get normalize(){return this._convolver.normalize}set normalize(e){this._convolver.normalize=e}dispose(){return super.dispose(),this._buffer.dispose(),this._convolver.disconnect(),this}};function now(){return getContext().now()}function immediate(){return getContext().immediate()}let sZ=getContext().transport;function getTransport(){return getContext().transport}let sX=getContext().destination,sY=getContext().destination;function getDestination(){return getContext().destination}let s$=getContext().listener;function getListener(){return getContext().listener}let sH=getContext().draw;function getDraw(){return getContext().draw}let sJ=getContext();function loaded(){return ToneAudioBuffer.loaded()}let sK=ToneAudioBuffer,s0=ToneAudioBuffers,s1=ToneBufferSource},3897:function(e){e.exports=function(e,t){(null==t||t>e.length)&&(t=e.length);for(var s=0,i=Array(t);s<t;s++)i[s]=e[s];return i},e.exports.__esModule=!0,e.exports.default=e.exports},9889:function(e){e.exports=function(e){if(Array.isArray(e))return e},e.exports.__esModule=!0,e.exports.default=e.exports},6690:function(e){e.exports=function(e,t){if(!(e instanceof t))throw TypeError("Cannot call a class as a function")},e.exports.__esModule=!0,e.exports.default=e.exports},9728:function(e,t,s){var i=s(4062);function _defineProperties(e,t){for(var s=0;s<t.length;s++){var n=t[s];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,i(n.key),n)}}e.exports=function(e,t,s){return t&&_defineProperties(e.prototype,t),s&&_defineProperties(e,s),Object.defineProperty(e,"prototype",{writable:!1}),e},e.exports.__esModule=!0,e.exports.default=e.exports},8872:function(e){e.exports=function(e,t){var s=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=s){var i,n,o,r,a=[],l=!0,u=!1;try{if(o=(s=s.call(e)).next,0===t){if(Object(s)!==s)return;l=!1}else for(;!(l=(i=o.call(s)).done)&&(a.push(i.value),a.length!==t);l=!0);}catch(e){u=!0,n=e}finally{try{if(!l&&null!=s.return&&(r=s.return(),Object(r)!==r))return}finally{if(u)throw n}}return a}},e.exports.__esModule=!0,e.exports.default=e.exports},2218:function(e){e.exports=function(){throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},e.exports.__esModule=!0,e.exports.default=e.exports},7424:function(e,t,s){var i=s(9889),n=s(8872),o=s(6116),r=s(2218);e.exports=function(e,t){return i(e)||n(e,t)||o(e,t)||r()},e.exports.__esModule=!0,e.exports.default=e.exports},5036:function(e,t,s){var i=s(8698).default;e.exports=function(e,t){if("object"!=i(e)||!e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var n=s.call(e,t||"default");if("object"!=i(n))return n;throw TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},4062:function(e,t,s){var i=s(8698).default,n=s(5036);e.exports=function(e){var t=n(e,"string");return"symbol"==i(t)?t:t+""},e.exports.__esModule=!0,e.exports.default=e.exports},8698:function(e){function _typeof(t){return e.exports=_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,_typeof(t)}e.exports=_typeof,e.exports.__esModule=!0,e.exports.default=e.exports},6116:function(e,t,s){var i=s(3897);e.exports=function(e,t){if(e){if("string"==typeof e)return i(e,t);var s=({}).toString.call(e).slice(8,-1);return"Object"===s&&e.constructor&&(s=e.constructor.name),"Map"===s||"Set"===s?Array.from(e):"Arguments"===s||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s)?i(e,t):void 0}},e.exports.__esModule=!0,e.exports.default=e.exports}}]);